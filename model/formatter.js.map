{"version":3,"file":"formatter.js","names":["formatter","status","sStatus","estadoText","date","sDate","Date","toLocaleDateString","year","month","day","error","odataDate","startsWith","endsWith","timestamp","parseInt","substring","length","currency","fAmount","undefined","toLocaleString","minimumFractionDigits","maximumFractionDigits","negativeCurrency","isEditable","isDocumentSelectable","doc","currentLines","some","line","U_NUMDOC","DocNum","U_IDSN","CardCode","isNewPlanilla","isNew"],"sources":["formatter.ts"],"sourcesContent":["const formatter = {\r\n    status: (sStatus: string): string => {\r\n        switch (sStatus) {\r\n            case \"E\":\r\n                return \"Success\";\r\n            case \"C\":\r\n                return \"Warning\";\r\n            case \"A\":\r\n                return \"Error\";\r\n\r\n            default:\r\n                return \"None\";\r\n        }\r\n    },\r\n    \r\n    estadoText: (sStatus: string): string => {\r\n        switch (sStatus) {\r\n            case \"E\":\r\n                return \"Ejecutada\";\r\n            case \"C\":\r\n                return \"Creada\";\r\n            case \"A\":\r\n                return \"Anulada\";\r\n            default:\r\n                return sStatus;\r\n        }\r\n    },\r\n    \r\n    date: (sDate: string): string => {\r\n        if (!sDate) return \"\";\r\n        \r\n        try {\r\n            const date = new Date(sDate);\r\n            return date.toLocaleDateString('es-ES', {\r\n                year: 'numeric',\r\n                month: '2-digit',\r\n                day: '2-digit'\r\n            });\r\n        } catch (error) {\r\n            return sDate;\r\n        }\r\n    },\r\n    \r\n    odataDate: (sDate: string): string => {\r\n        if (!sDate) return \"\";\r\n        \r\n        try {\r\n            // Handle OData date format: /Date(timestamp)/\r\n            if (sDate.startsWith('/Date(') && sDate.endsWith(')/')) {\r\n                const timestamp = parseInt(sDate.substring(6, sDate.length - 2));\r\n                const date = new Date(timestamp);\r\n                return date.toLocaleDateString('es-ES', {\r\n                    year: 'numeric',\r\n                    month: '2-digit',\r\n                    day: '2-digit'\r\n                });\r\n            } else {\r\n                // Handle regular date format\r\n                const date = new Date(sDate);\r\n                return date.toLocaleDateString('es-ES', {\r\n                    year: 'numeric',\r\n                    month: '2-digit',\r\n                    day: '2-digit'\r\n                });\r\n            }\r\n        } catch (error) {\r\n            return sDate;\r\n        }\r\n    },\r\n    \r\n    currency: (fAmount: number): string => {\r\n        if (fAmount === null || fAmount === undefined || fAmount === 0) return \"0.00\";\r\n        \r\n        return fAmount.toLocaleString('es-ES', {\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2\r\n        });\r\n    },\r\n    \r\n    negativeCurrency: (fAmount: number): string => {\r\n        if (fAmount === null || fAmount === undefined || fAmount === 0) return \"0.00\";\r\n        \r\n        return (-fAmount).toLocaleString('es-ES', {\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2\r\n        });\r\n    },\r\n    \r\n    isEditable: (sStatus: string): boolean => {\r\n        return sStatus === \"C\"; // Only editable when status is \"Creada\"\r\n    },\r\n    \r\n    isDocumentSelectable: (doc: any, currentLines: any[]): boolean => {\r\n        if (!doc || !currentLines) return true;\r\n        \r\n        // Check if document already exists in current lines\r\n        return !currentLines.some((line: any) => {\r\n            return line.U_NUMDOC === doc.DocNum && line.U_IDSN === doc.CardCode;\r\n        });\r\n    },\r\n    \r\n    isNewPlanilla: (isNew: boolean): boolean => {\r\n        return isNew === true;\r\n    }\r\n};\r\n\r\nexport default formatter; "],"mappings":"yCAAA,MAAMA,EAAY,CACdC,OAASC,IACL,OAAQA,GACJ,IAAK,IACD,MAAO,UACX,IAAK,IACD,MAAO,UACX,IAAK,IACD,MAAO,QAEX,QACI,MAAO,SAInBC,WAAaD,IACT,OAAQA,GACJ,IAAK,IACD,MAAO,YACX,IAAK,IACD,MAAO,SACX,IAAK,IACD,MAAO,UACX,QACI,OAAOA,IAInBE,KAAOC,IACH,IAAKA,EAAO,MAAO,GAEnB,IACI,MAAMD,EAAO,IAAIE,KAAKD,GACtB,OAAOD,EAAKG,mBAAmB,QAAS,CACpCC,KAAM,UACNC,MAAO,UACPC,IAAK,WAEb,CAAE,MAAOC,GACL,OAAON,CACX,GAGJO,UAAYP,IACR,IAAKA,EAAO,MAAO,GAEnB,IAEI,GAAIA,EAAMQ,WAAW,WAAaR,EAAMS,SAAS,MAAO,CACpD,MAAMC,EAAYC,SAASX,EAAMY,UAAU,EAAGZ,EAAMa,OAAS,IAC7D,MAAMd,EAAO,IAAIE,KAAKS,GACtB,OAAOX,EAAKG,mBAAmB,QAAS,CACpCC,KAAM,UACNC,MAAO,UACPC,IAAK,WAEb,KAAO,CAEH,MAAMN,EAAO,IAAIE,KAAKD,GACtB,OAAOD,EAAKG,mBAAmB,QAAS,CACpCC,KAAM,UACNC,MAAO,UACPC,IAAK,WAEb,CACJ,CAAE,MAAOC,GACL,OAAON,CACX,GAGJc,SAAWC,IACP,GAAIA,IAAY,MAAQA,IAAYC,WAAaD,IAAY,EAAG,MAAO,OAEvE,OAAOA,EAAQE,eAAe,QAAS,CACnCC,sBAAuB,EACvBC,sBAAuB,KAI/BC,iBAAmBL,IACf,GAAIA,IAAY,MAAQA,IAAYC,WAAaD,IAAY,EAAG,MAAO,OAEvE,QAASA,GAASE,eAAe,QAAS,CACtCC,sBAAuB,EACvBC,sBAAuB,KAI/BE,WAAaxB,GACFA,IAAY,IAGvByB,qBAAsBA,CAACC,EAAUC,KAC7B,IAAKD,IAAQC,EAAc,OAAO,KAGlC,OAAQA,EAAaC,KAAMC,GAChBA,EAAKC,WAAaJ,EAAIK,QAAUF,EAAKG,SAAWN,EAAIO,WAInEC,cAAgBC,GACLA,IAAU,MAEvB,OAEarC,CAAS","ignoreList":[]}