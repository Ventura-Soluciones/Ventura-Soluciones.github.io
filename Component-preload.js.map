{"version":3,"file":"Component-preload.js","sections":[{"offset":{"line":1,"column":0},"map":{"version":3,"names":[],"sources":["Component-preload.js?bundle-code-0"],"mappings":"AAAA;AACA","sourcesContent":["sap.ui.require.preload({\n"],"sourceRoot":""}},{"offset":{"line":3,"column":0},"map":{"version":3,"file":"Component.js","names":["createDeviceModel","___model_models","Component","BaseComponent","extend","metadata","manifest","interfaces","init","_init","BaseComponent.prototype.init.call","this","setModel","oGlobalModel","JSONModel","selectedPlanillaId","showDetail","getRouter","initialize"],"sources":["Component.ts"],"sourcesContent":["import BaseComponent from \"sap/ui/core/UIComponent\";\nimport { createDeviceModel } from \"./model/models\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\n\n/**\n * @namespace com.vs.extension.finanb1\n */\nexport default class Component extends BaseComponent {\n\n\tpublic static metadata = {\n\t\tmanifest: \"json\",\n        interfaces: [\n            \"sap.ui.core.IAsyncContentCreation\"\n        ]\n\t};\n\n\tpublic init(): void {\n\t\t// Llamar la función init del componente base\n\t\tsuper.init();\n\n        // Establecer el modelo de dispositivo\n        this.setModel(createDeviceModel(), \"device\");\n\n        // Establecer el modelo global para el estado de navegación\n        const oGlobalModel = new JSONModel({\n            selectedPlanillaId: null,\n            showDetail: false\n        });\n        this.setModel(oGlobalModel, \"global\");\n\n        // Habilitar enrutamiento\n        this.getRouter().initialize();\n\t}\n}"],"mappings":"AAAA,4HACSA,EAAiBC,EAAA,qBAG1B,MAGqBC,EAAkBC,EAAaC,OAAA,sCAErCC,SAAW,CACxBC,SAAU,OACJC,WAAY,CACR,sCAIJC,KAAI,SAAAC,IAEVC,sBAAAC,MAGMA,KAAKC,SAASZ,IAAqB,UAGnC,MAAMa,EAAe,IAAIC,EAAU,CAC/BC,mBAAoB,KACpBC,WAAY,QAEhBL,KAAKC,SAASC,EAAc,UAG5BF,KAAKM,YAAYC,YACxB,IAAC,OAzBmBhB,CAAS","ignoreList":[],"sourceRoot":""}},{"offset":{"line":6,"column":0},"map":{"version":3,"file":"App.controller.js","names":["formatter","_interopRequireDefault","__formatter","UserManager","___modules_UserManager","MenuManager","___modules_MenuManager","PagosMasivosManager","___modules_PagosMasivosManager","NavigationManager","___modules_NavigationManager","App","Controller","extend","constructor","prototype","apply","this","arguments","onInit","_onInit","userManager","menuManager","pagosMasivosManager","navigationManager","loadAuthenticatedUser","oView","getView","setModel","getModel","console","log","loadHardcodedMenuData","filterNavigationByRole","getCurrentUser","role","initializeModels","setController","getFilteredModel","checkForDetailNavigation","checkAuthentication","onSideNavigationItemSelect","_onSideNavigationItemSelect","oEvent","onSideNavItemSelect","_onSideNavItemSelect","onMenuButtonPress","_onMenuButtonPress","onLogout","_onLogout","MessageBox","confirm","title","onClose","sAction","Action","OK","logout","MessageToast","show","duration","oComponent","getOwnerComponent","oRouter","getRouter","navTo","onDateRangeChange","_onDateRangeChange","onStatusChange","_onStatusChange","onBancoChange","_onBancoChange","onClearFilters","_onClearFilters","onNuevaPlanillaButtonPress","_onNuevaPlanillaButtonPress","onListItemPress","_onListItemPress","onBackToPagosMasivos","_onBackToPagosMasivos","onEditPlanilla","_onEditPlanilla","oModelPlanilla","planillaData","getData","Status","error","onAnularPlanilla","_onAnularPlanilla","setData","onDownloadPlanilla","_onDownloadPlanilla","onFechaEjecucionChange","_onFechaEjecucionChange","onSerieChange","_onSerieChange","onGuardarPlanilla","_onGuardarPlanilla","onAddDocumentos","_onAddDocumentos","onDocumentSearch","_onDocumentSearch","onDocumentBankFilterChange","_onDocumentBankFilterChange","onDocumentSelectionChange","_onDocumentSelectionChange","onDocumentDialogCancel","_onDocumentDialogCancel","onDocumentDialogConfirm","_onDocumentDialogConfirm","loadPlanillaById","_loadPlanillaById","planillaId","planillasUrl","oModel","JSONModel","loadData","undefined","oData","planilla","find","item","Id","loadFallbackPlanillaData","_loadFallbackPlanillaData","fallbackData","Name","DateOfSale","Quantity","Price","CurrencyCode","Bank","SupplierName","Description","_checkForDetailNavigation","oRoute","getRoute","attachPatternMatched","getParameter","_checkAuthentication","authData","sessionStorage","getItem","localStorage","parsedAuthData","JSON","parse","isAuthenticated"],"sources":["App.controller.ts"],"sourcesContent":["import Controller from \"sap/ui/core/mvc/Controller\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport formatter from \"../model/formatter\";\nimport Event from \"sap/ui/base/Event\";\nimport type UIComponent from \"sap/ui/core/UIComponent\";\nimport { UserManager } from \"./modules/UserManager\";\nimport { MenuManager } from \"./modules/MenuManager\";\nimport { PagosMasivosManager } from \"./modules/PagosMasivosManager\";\nimport { NavigationManager } from \"./modules/NavigationManager\";\n\n/**\n * @namespace com.vs.extension.finanb1.controller\n */\nexport default class App extends Controller {\n    public formatter = formatter;\n    \n    // Managers for different concerns\n    public userManager: UserManager;\n    public menuManager: MenuManager;\n    public pagosMasivosManager: PagosMasivosManager;\n    public navigationManager: NavigationManager;\n\n    public onInit(): void {\n        // Initialize managers\n        this.userManager = new UserManager();\n        this.menuManager = new MenuManager();\n        this.pagosMasivosManager = new PagosMasivosManager();\n        this.navigationManager = new NavigationManager(this);\n        \n        // Load authenticated user\n        this.userManager.loadAuthenticatedUser();\n        \n        // Set up menu model\n        const oView = this.getView();\n        if (oView) {\n            oView.setModel(this.menuManager.getModel(), \"menuModel\");\n            console.log(\"Modelo de menú asignado a la vista en onInit\");\n        }\n        \n        // Load menu data\n        this.menuManager.loadHardcodedMenuData();\n        this.menuManager.filterNavigationByRole(this.userManager.getCurrentUser()?.role || 'user');\n        \n        // Initialize PagosMasivos models\n        this.pagosMasivosManager.initializeModels();\n        this.pagosMasivosManager.setController(this);\n        \n        // Set up PagosMasivos model in view\n        if (oView) {\n            oView.setModel(this.pagosMasivosManager.getFilteredModel(), \"planillas\");\n        }\n        \n        // Check for detail navigation\n        this.checkForDetailNavigation();\n        \n        // Verificar estado de autenticación al inicializar la aplicación\n        this.checkAuthentication();\n    }\n\n    // ===== NAVIGATION METHODS =====\n    public onSideNavigationItemSelect(oEvent: Event): void {\n        this.navigationManager.onSideNavigationItemSelect(oEvent);\n    }\n\n    public onSideNavItemSelect(oEvent: any): void {\n        this.navigationManager.onSideNavItemSelect(oEvent);\n    }\n\n    public onMenuButtonPress(): void {\n        this.navigationManager.onMenuButtonPress();\n    }\n\n    public onLogout(): void {\n        MessageBox.confirm(\"¿Está seguro que desea cerrar sesión?\", {\n            title: \"Confirmar Cierre de Sesión\",\n            onClose: (sAction: string) => {\n                if (sAction === MessageBox.Action.OK) {\n                    this.userManager.logout();\n                    MessageToast.show(\"Sesión cerrada exitosamente\", { duration: 2000 });\n                    const oComponent = this.getOwnerComponent() as UIComponent;\n                    const oRouter = oComponent.getRouter();\n                    oRouter.navTo(\"RouteLogin\");\n                }\n            }\n        });\n    }\n\n    // ===== PAGOS MASIVOS METHODS =====\n    public onDateRangeChange(oEvent: any): void {\n        this.pagosMasivosManager.onDateRangeChange(oEvent);\n    }\n\n    public onStatusChange(oEvent: any): void {\n        this.pagosMasivosManager.onStatusChange(oEvent);\n    }\n\n    public onBancoChange(oEvent: any): void {\n        this.pagosMasivosManager.onBancoChange(oEvent);\n    }\n\n    public onClearFilters(): void {\n        this.pagosMasivosManager.onClearFilters();\n    }\n\n    public onNuevaPlanillaButtonPress(): void {\n        this.pagosMasivosManager.onNuevaPlanillaButtonPress();\n    }\n\n    public onListItemPress(oEvent: Event): void {\n        console.log(\"App.controller - onListItemPress triggered!\", oEvent);\n        this.pagosMasivosManager.onListItemPress(oEvent);\n    }\n\n    // ===== PAGOS MASIVOS DETALLE METHODS =====\n    public onBackToPagosMasivos(): void {\n        console.log(\"App.controller - onBackToPagosMasivos triggered!\");\n        const oComponent = this.getOwnerComponent() as UIComponent;\n        const oRouter = oComponent.getRouter();\n        oRouter.navTo(\"RoutePagosMasivos\");\n    }\n\n    public onEditPlanilla(): void {\n        const oView = this.getView();\n        if (oView) {\n            const oModelPlanilla = oView.getModel(\"planilla\") as JSONModel;\n            if (oModelPlanilla) {\n                const planillaData = oModelPlanilla.getData();\n                if (planillaData && planillaData.Status === \"Creada\") {\n                    MessageToast.show(\"Función de edición en desarrollo\", { duration: 2000 });\n                    // Aquí se puede implementar la lógica para editar la planilla\n                } else {\n                    MessageBox.error(\"Solo se pueden editar planillas con estado 'Creada'\");\n                }\n            }\n        }\n    }\n\n    public onAnularPlanilla(): void {\n        const oView = this.getView();\n        if (oView) {\n            const oModelPlanilla = oView.getModel(\"planilla\") as JSONModel;\n            if (oModelPlanilla) {\n                const planillaData = oModelPlanilla.getData();\n                if (planillaData && planillaData.Status === \"Creada\") {\n                    MessageBox.confirm(\"¿Está seguro que desea anular esta planilla?\", {\n                        title: \"Confirmar Anulación\",\n                        onClose: (sAction: string) => {\n                            if (sAction === MessageBox.Action.OK) {\n                                // Actualizar el estado de la planilla\n                                planillaData.Status = \"Anulada\";\n                                oModelPlanilla.setData(planillaData);\n                                MessageToast.show(\"Planilla anulada exitosamente\", { duration: 2000 });\n                            }\n                        }\n                    });\n                } else {\n                    MessageBox.error(\"Solo se pueden anular planillas con estado 'Creada'\");\n                }\n            }\n        }\n    }\n\n    public onDownloadPlanilla(): void {\n        console.log(\"App.controller - onDownloadPlanilla triggered!\");\n        this.pagosMasivosManager.onDownloadPlanilla();\n    }\n\n    public onFechaEjecucionChange(oEvent: any): void {\n        console.log(\"App.controller - onFechaEjecucionChange triggered!\");\n        this.pagosMasivosManager.onFechaEjecucionChange(oEvent);\n    }\n\n    public onSerieChange(oEvent: any): void {\n        console.log(\"App.controller - onSerieChange triggered!\");\n        this.pagosMasivosManager.onSerieChange(oEvent);\n    }\n\n    public onGuardarPlanilla(): void {\n        console.log(\"App.controller - onGuardarPlanilla triggered!\");\n        console.log(\"App.controller - PagosMasivosManager instance:\", this.pagosMasivosManager);\n        if (this.pagosMasivosManager) {\n            this.pagosMasivosManager.onGuardarPlanilla();\n        } else {\n            console.error(\"PagosMasivosManager is not initialized!\");\n        }\n    }\n\n    public onAddDocumentos(): void {\n        console.log(\"App.controller - onAddDocumentos triggered!\");\n        if (this.pagosMasivosManager) {\n            this.pagosMasivosManager.onAddDocumentos();\n        } else {\n            console.error(\"PagosMasivosManager is not initialized!\");\n        }\n    }\n\n    public onDocumentSearch(oEvent: any): void {\n        console.log(\"App.controller - onDocumentSearch triggered!\");\n        if (this.pagosMasivosManager) {\n            this.pagosMasivosManager.onDocumentSearch(oEvent);\n        }\n    }\n\n    public onDocumentBankFilterChange(oEvent: any): void {\n        console.log(\"App.controller - onDocumentBankFilterChange triggered!\");\n        if (this.pagosMasivosManager) {\n            this.pagosMasivosManager.onDocumentBankFilterChange(oEvent);\n        }\n    }\n\n    public onDocumentSelectionChange(oEvent: any): void {\n        console.log(\"App.controller - onDocumentSelectionChange triggered!\");\n        if (this.pagosMasivosManager) {\n            this.pagosMasivosManager.onDocumentSelectionChange(oEvent);\n        }\n    }\n\n    public onDocumentDialogCancel(): void {\n        console.log(\"App.controller - onDocumentDialogCancel triggered!\");\n        if (this.pagosMasivosManager) {\n            this.pagosMasivosManager.onDocumentDialogCancel();\n        }\n    }\n\n    public onDocumentDialogConfirm(): void {\n        console.log(\"App.controller - onDocumentDialogConfirm triggered!\");\n        if (this.pagosMasivosManager) {\n            this.pagosMasivosManager.onDocumentDialogConfirm();\n        }\n    }\n\n    // ===== PRIVATE METHODS =====\n    private loadPlanillaById(planillaId: string): void {\n        // Cargar datos de la planilla desde el archivo JSON\n        const planillasUrl = \"./model/mock/products.json\";\n        \n        try {\n            const oModel = new JSONModel();\n            oModel.loadData(planillasUrl, undefined, false);\n            const oData = oModel.getData();\n            console.log(\"App.controller - Planilla data loaded:\", oData);\n            \n            // Buscar la planilla por ID\n            const planilla = oData.find((item: any) => item.Id === planillaId);\n            \n            if (planilla) {\n                console.log(\"App.controller - Planilla found:\", planilla);\n                \n                // Crear modelo para la planilla seleccionada\n                const oModelPlanilla = new JSONModel();\n                oModelPlanilla.setData(planilla);\n                \n                // Asignar el modelo a la vista\n                const oView = this.getView();\n                if (oView) {\n                    oView.setModel(oModelPlanilla, \"planilla\");\n                    console.log(\"App.controller - Planilla model assigned to view\");\n                }\n            } else {\n                console.log(\"App.controller - Planilla not found, loading fallback data\");\n                this.loadFallbackPlanillaData(planillaId);\n            }\n        } catch (error) {\n            console.error(\"App.controller - Exception loading planilla data:\", error);\n            this.loadFallbackPlanillaData(planillaId);\n        }\n    }\n\n    private loadFallbackPlanillaData(planillaId: string): void {\n        console.log(\"App.controller - Loading fallback planilla data for ID:\", planillaId);\n        \n        // Datos de respaldo para mostrar en caso de error\n        const fallbackData = {\n            \"Id\": planillaId,\n            \"Name\": `Planilla Pago Proveedor ${planillaId}`,\n            \"DateOfSale\": \"2024-01-01\",\n            \"Status\": \"Creada\",\n            \"Quantity\": 10,\n            \"Price\": 1000.00,\n            \"CurrencyCode\": \"SOL\",\n            \"Bank\": \"BCP\",\n            \"SupplierName\": \"Proveedor Ejemplo\",\n            \"Description\": \"Descripción de ejemplo para la planilla\"\n        };\n        \n        const oModelPlanilla = new JSONModel();\n        oModelPlanilla.setData(fallbackData);\n        \n        const oView = this.getView();\n        if (oView) {\n            oView.setModel(oModelPlanilla, \"planilla\");\n            console.log(\"App.controller - Fallback planilla model assigned to view\");\n        }\n    }\n\n    private checkForDetailNavigation(): void {\n        // Check if we need to navigate to detail page\n        const oComponent = this.getOwnerComponent() as UIComponent;\n        const oRouter = oComponent.getRouter();\n        \n        // Get current route parameters\n        const oRoute = oRouter.getRoute(\"RoutePagosMasivosDetalle\");\n        if (oRoute) {\n            oRoute.attachPatternMatched((oEvent: any) => {\n                const planillaId = oEvent.getParameter(\"arguments\").planillaId;\n                if (planillaId) {\n                    console.log(\"App.controller - Navigating to planilla detail:\", planillaId);\n                    this.loadPlanillaById(planillaId);\n                }\n            });\n        }\n    }\n\n    private checkAuthentication(): void {\n        // Verificar si el usuario ya está autenticado\n        const authData = sessionStorage.getItem(\"finanb1_auth\") || localStorage.getItem(\"finanb1_auth\");\n        \n        if (authData) {\n            try {\n                const parsedAuthData = JSON.parse(authData);\n                if (parsedAuthData.isAuthenticated) {\n                    // Usuario autenticado, redirigir a configuración (página principal)\n                    const oComponent = this.getOwnerComponent() as UIComponent;\n                    const oRouter = oComponent.getRouter();\n                    oRouter.navTo(\"RouteConfiguracion\");\n                }\n            } catch (error) {\n                console.error(\"Error parsing auth data:\", error);\n            }\n        }\n    }\n}"],"mappings":"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","ignoreList":[],"sourceRoot":"controller"}},{"offset":{"line":9,"column":0},"map":{"version":3,"file":"Configuracion.controller.js","names":["Configuracion","Controller","extend","onInit","_onInit","console","log"],"sources":["Configuracion.controller.ts"],"sourcesContent":["import Controller from \"sap/ui/core/mvc/Controller\";\r\n\r\n/**\r\n * @namespace com.vs.extension.finanb1.controller\r\n */\r\nexport default class Configuracion extends Controller {\r\n\r\n    public onInit(): void {\r\n        console.log(\"Configuracion controller initialized\");\r\n    }\r\n\r\n} "],"mappings":"AAAA,sEAEA,MAGqBA,EAAsBC,EAAUC,OAAA,qDAE1CC,OAAM,SAAAC,IACTC,QAAQC,IAAI,uCAChB,IAAC,OAJgBN,CAAa","ignoreList":[],"sourceRoot":"controller"}},{"offset":{"line":12,"column":0},"map":{"version":3,"file":"Detracciones.controller.js","names":["Detracciones","Controller","extend","onInit","_onInit","console","log"],"sources":["Detracciones.controller.ts"],"sourcesContent":["import Controller from \"sap/ui/core/mvc/Controller\";\r\n\r\n/**\r\n * @namespace com.vs.extension.finanb1.controller\r\n */\r\nexport default class Detracciones extends Controller {\r\n\r\n    public onInit(): void {\r\n        console.log(\"Detracciones controller initialized\");\r\n    }\r\n\r\n} "],"mappings":"AAAA,sEAEA,MAGqBA,EAAqBC,EAAUC,OAAA,oDAEzCC,OAAM,SAAAC,IACTC,QAAQC,IAAI,sCAChB,IAAC,OAJgBN,CAAY","ignoreList":[],"sourceRoot":"controller"}},{"offset":{"line":15,"column":0},"map":{"version":3,"file":"Login.controller.js","names":["sap","ui","define","Controller","MessageToast","MessageBox","JSONModel","extend","oCurrentUser","onInit","oLoginModel","username","password","rememberMe","this","getView","setModel","onLoginPress","oModel","getModel","sUsername","getProperty","sPassword","bRememberMe","error","loginButton","byId","setEnabled","setText","authenticateUser","then","authenticated","setAuthenticationState","show","duration","oRouter","getOwnerComponent","getRouter","navTo","catch","console","finally","Promise","resolve","reject","aUserAccess","loadData","undefined","data","getData","users","aUsers","oUser","find","user","email","useFallbackUsers","fallbackUsers","id","name","role","status","companies","bAuthenticated","oAuthData","isAuthenticated","userInfo","timestamp","Date","now","localStorage","setItem","JSON","stringify","sessionStorage","onForgotPassword","information","onKeyPress","oEvent","getParameter","getAuthenticationState","sAuthData","getItem","parse"],"sources":["Login.controller.ts"],"sourcesContent":["sap.ui.define([\r\n    \"sap/ui/core/mvc/Controller\",\r\n    \"sap/m/MessageToast\",\r\n    \"sap/m/MessageBox\",\r\n    \"sap/ui/model/json/JSONModel\"\r\n],\r\n    /**\r\n     * @param {typeof sap.ui.core.mvc.Controller} Controller\r\n     */\r\n    function (\r\n        Controller: any,\r\n        MessageToast: any,\r\n        MessageBox: any,\r\n        JSONModel: any\r\n    ) {\r\n        \"use strict\";\r\n\r\n        // Definir interfaces para seguridad de tipos\r\n        interface User {\r\n            id: number;\r\n            name: string;\r\n            email: string;\r\n            password: string;\r\n            role: string;\r\n            status: string;\r\n            companies: Array<{ id: number; name: string }>;\r\n        }\r\n\r\n        interface AuthData {\r\n            isAuthenticated: boolean;\r\n            userInfo: User;\r\n            timestamp: number;\r\n        }\r\n\r\n        interface LoginModel {\r\n            username: string;\r\n            password: string;\r\n            rememberMe: boolean;\r\n        }\r\n\r\n        return Controller.extend(\"finanb1.controller.Login\", {\r\n            oCurrentUser: null as User | null,\r\n\r\n            onInit: function (this: any): void {\r\n                const oLoginModel: any = new JSONModel({\r\n                    username: \"\",\r\n                    password: \"\",\r\n                    rememberMe: false\r\n                } as LoginModel);\r\n                this.getView().setModel(oLoginModel, \"loginModel\");\r\n            },\r\n\r\n            onLoginPress: function (this: any): void {\r\n                const oModel: any = this.getView().getModel(\"loginModel\");\r\n                const sUsername: string = oModel.getProperty(\"/username\");\r\n                const sPassword: string = oModel.getProperty(\"/password\");\r\n                const bRememberMe: boolean = oModel.getProperty(\"/rememberMe\");\r\n\r\n                // Basic validation\r\n                if (!sUsername || !sPassword) {\r\n                    MessageBox.error(\"Por favor ingrese usuario y contraseña\");\r\n                    return;\r\n                }\r\n\r\n                // Show loading indicator\r\n                const loginButton: any = this.byId(\"loginButton\");\r\n                if (loginButton) {\r\n                    loginButton.setEnabled(false);\r\n                    loginButton.setText(\"Verificando...\");\r\n                }\r\n\r\n                // Authenticate user asynchronously\r\n                this.authenticateUser(sUsername, sPassword).then((authenticated: boolean) => {\r\n                    if (authenticated) {\r\n                        this.setAuthenticationState(true, sUsername, bRememberMe);\r\n                        \r\n                        MessageToast.show(\"Inicio de sesión exitoso\", {\r\n                            duration: 2000\r\n                        });\r\n\r\n                        const oRouter: any = this.getOwnerComponent().getRouter();\r\n                        oRouter.navTo(\"RouteConfiguracion\");\r\n                    } else {\r\n                        MessageBox.error(\"Usuario o contraseña incorrectos\");\r\n                    }\r\n                }).catch((error: any) => {\r\n                    console.error(\"Authentication error:\", error);\r\n                    MessageBox.error(\"Error durante la autenticación. Por favor intente nuevamente.\");\r\n                }).finally(() => {\r\n                    // Reset button state\r\n                    if (loginButton) {\r\n                        loginButton.setEnabled(true);\r\n                        loginButton.setText(\"Iniciar Sesión\");\r\n                    }\r\n                });\r\n            },\r\n\r\n            authenticateUser: function (this: any, sUsername: string, sPassword: string): Promise<boolean> {\r\n                return new Promise((resolve, reject) => {\r\n                    // Get mock users data\r\n                    const aUserAccess: any = new JSONModel();\r\n                    \r\n                    try {\r\n                        // Load data synchronously first\r\n                        aUserAccess.loadData(\"./model/mock/users.json\", undefined, false);\r\n                        \r\n                        // Try to get data immediately\r\n                        const data = aUserAccess.getData();\r\n                        if (data && data.users) {\r\n                            const aUsers: User[] = data.users;\r\n                            \r\n                            // Find user with matching credentials (using email as username)\r\n                            const oUser: User | undefined = aUsers.find(function(user: User): boolean {\r\n                                return user.email === sUsername && user.password === sPassword;\r\n                            });\r\n                            \r\n                            if (oUser) {\r\n                                // Store user info for later use\r\n                                this.oCurrentUser = oUser;\r\n                                resolve(true);\r\n                            } else {\r\n                                resolve(false);\r\n                            }\r\n                        } else {\r\n                            // Fallback to hardcoded users\r\n                            this.useFallbackUsers(sUsername, sPassword, resolve);\r\n                        }\r\n                    } catch (error) {\r\n                        console.error(\"Error loading user data:\", error);\r\n                        // Fallback to hardcoded users for testing\r\n                        this.useFallbackUsers(sUsername, sPassword, resolve);\r\n                    }\r\n                });\r\n            },\r\n\r\n            useFallbackUsers: function (this: any, sUsername: string, sPassword: string, resolve: any): void {\r\n                const fallbackUsers: User[] = [\r\n                    {\r\n                        id: 1,\r\n                        name: \"Admin User\",\r\n                        email: \"admin@company.com\",\r\n                        password: \"admin123\",\r\n                        role: \"admin\",\r\n                        status: \"active\",\r\n                        companies: [{ id: 1, name: \"Demo Company\" }]\r\n                    },\r\n                    {\r\n                        id: 2,\r\n                        name: \"Regular User\",\r\n                        email: \"user@company.com\",\r\n                        password: \"user123\",\r\n                        role: \"user\",\r\n                        status: \"active\",\r\n                        companies: [{ id: 1, name: \"Demo Company\" }]\r\n                    }\r\n                ];\r\n                \r\n                const oUser: User | undefined = fallbackUsers.find(function(user: User): boolean {\r\n                    return user.email === sUsername && user.password === sPassword;\r\n                });\r\n                \r\n                if (oUser) {\r\n                    this.oCurrentUser = oUser;\r\n                    resolve(true);\r\n                } else {\r\n                    resolve(false);\r\n                }\r\n            },\r\n\r\n            setAuthenticationState: function (this: any, bAuthenticated: boolean, sUsername: string, bRememberMe: boolean): void {\r\n                const oAuthData: AuthData = {\r\n                    isAuthenticated: bAuthenticated,\r\n                    userInfo: this.oCurrentUser || {} as User,\r\n                    timestamp: Date.now()\r\n                };\r\n\r\n                if (bRememberMe) {\r\n                    localStorage.setItem(\"finanb1_auth\", JSON.stringify(oAuthData));\r\n                } else {\r\n                    sessionStorage.setItem(\"finanb1_auth\", JSON.stringify(oAuthData));\r\n                }\r\n            },\r\n\r\n            onForgotPassword: function (this: any): void {\r\n                MessageBox.information(\"Función de recuperación de contraseña en desarrollo\");\r\n            },\r\n\r\n            onKeyPress: function (this: any, oEvent: any): void {\r\n                // Handle Enter key press to trigger login\r\n                if (oEvent.getParameter(\"keyCode\") === 13) { // Enter key\r\n                    this.onLoginPress();\r\n                }\r\n            },\r\n\r\n            getAuthenticationState: function (this: any): AuthData | null {\r\n                // Check both session and local storage\r\n                const sAuthData: string | null = sessionStorage.getItem(\"finanb1_auth\") || localStorage.getItem(\"finanb1_auth\");\r\n                return sAuthData ? JSON.parse(sAuthData) as AuthData : null;\r\n            }\r\n        });\r\n    });\r\n"],"mappings":"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","ignoreList":[],"sourceRoot":"controller"}},{"offset":{"line":18,"column":0},"map":{"version":3,"file":"PagosMasivos.controller.js","names":["formatter","_interopRequireDefault","__formatter","UserManager","___modules_UserManager","MenuManager","___modules_MenuManager","PagosMasivosManager","___modules_PagosMasivosManager","NavigationManager","___modules_NavigationManager","PagosMasivos","Controller","extend","constructor","prototype","apply","this","arguments","onInit","_onInit","userManager","menuManager","pagosMasivosManager","navigationManager","loadAuthenticatedUser","oView","getView","setModel","getModel","console","log","loadHardcodedMenuData","filterNavigationByRole","getCurrentUser","role","initializeModels","setController","getFilteredModel","onSideNavigationItemSelect","_onSideNavigationItemSelect","oEvent","onSideNavItemSelect","_onSideNavItemSelect","onMenuButtonPress","_onMenuButtonPress","onLogout","_onLogout","MessageBox","confirm","title","onClose","sAction","Action","OK","logout","MessageToast","show","duration","oComponent","getOwnerComponent","oRouter","getRouter","navTo","onDateRangeChange","_onDateRangeChange","onStatusChange","_onStatusChange","onBancoChange","_onBancoChange","onClearFilters","_onClearFilters","onNuevaPlanillaButtonPress","_onNuevaPlanillaButtonPress","onListItemPress","_onListItemPress"],"sources":["PagosMasivos.controller.ts"],"sourcesContent":["import Controller from \"sap/ui/core/mvc/Controller\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport formatter from \"../model/formatter\";\nimport Event from \"sap/ui/base/Event\";\nimport type UIComponent from \"sap/ui/core/UIComponent\";\nimport { UserManager } from \"./modules/UserManager\";\nimport { MenuManager } from \"./modules/MenuManager\";\nimport { PagosMasivosManager } from \"./modules/PagosMasivosManager\";\nimport { NavigationManager } from \"./modules/NavigationManager\";\n\n/**\n * @namespace com.vs.extension.finanb1.controller\n */\nexport default class PagosMasivos extends Controller {\n    public formatter = formatter;\n    \n    // Gestores para diferentes funcionalidades\n    public userManager: UserManager;\n    public menuManager: MenuManager;\n    public pagosMasivosManager: PagosMasivosManager;\n    public navigationManager: NavigationManager;\n\n    public onInit(): void {\n        // Inicializar gestores\n        this.userManager = new UserManager();\n        this.menuManager = new MenuManager();\n        this.pagosMasivosManager = new PagosMasivosManager();\n        this.navigationManager = new NavigationManager(this);\n        \n        // Cargar usuario autenticado\n        this.userManager.loadAuthenticatedUser();\n        \n        // Configurar modelo del menú\n        const oView = this.getView();\n        if (oView) {\n            oView.setModel(this.menuManager.getModel(), \"menuModel\");\n            console.log(\"Modelo de menú asignado a la vista en onInit\");\n        }\n        \n        // Cargar datos del menú\n        this.menuManager.loadHardcodedMenuData();\n        this.menuManager.filterNavigationByRole(this.userManager.getCurrentUser()?.role || 'user');\n        \n        // Inicializar modelos de PagosMasivos\n        this.pagosMasivosManager.initializeModels();\n        this.pagosMasivosManager.setController(this);\n        \n        // Configurar modelo de PagosMasivos en la vista\n        if (oView) {\n            oView.setModel(this.pagosMasivosManager.getFilteredModel(), \"planillas\");\n        }\n    }\n\n    // ===== MÉTODOS DE NAVEGACIÓN =====\n    public onSideNavigationItemSelect(oEvent: Event): void {\n        this.navigationManager.onSideNavigationItemSelect(oEvent);\n    }\n\n    public onSideNavItemSelect(oEvent: any): void {\n        this.navigationManager.onSideNavItemSelect(oEvent);\n    }\n\n    public onMenuButtonPress(): void {\n        this.navigationManager.onMenuButtonPress();\n    }\n\n    public onLogout(): void {\n        MessageBox.confirm(\"¿Está seguro que desea cerrar sesión?\", {\n            title: \"Confirmar Cierre de Sesión\",\n            onClose: (sAction: string) => {\n                if (sAction === MessageBox.Action.OK) {\n                    this.userManager.logout();\n                    MessageToast.show(\"Sesión cerrada exitosamente\", { duration: 2000 });\n                    const oComponent = this.getOwnerComponent() as UIComponent;\n                    const oRouter = oComponent.getRouter();\n                    oRouter.navTo(\"RouteLogin\");\n                }\n            }\n        });\n    }\n\n    // ===== MÉTODOS DE PAGOS MASIVOS =====\n    public onDateRangeChange(oEvent: any): void {\n        this.pagosMasivosManager.onDateRangeChange(oEvent);\n    }\n\n    public onStatusChange(oEvent: any): void {\n        this.pagosMasivosManager.onStatusChange(oEvent);\n    }\n\n    public onBancoChange(oEvent: any): void {\n        this.pagosMasivosManager.onBancoChange(oEvent);\n    }\n\n    public onClearFilters(): void {\n        this.pagosMasivosManager.onClearFilters();\n    }\n\n    public onNuevaPlanillaButtonPress(): void {\n        this.pagosMasivosManager.onNuevaPlanillaButtonPress();\n    }\n\n    public onListItemPress(oEvent: Event): void {\n        console.log(\"PagosMasivos.controller - onListItemPress triggered!\", oEvent);\n        this.pagosMasivosManager.onListItemPress(oEvent);\n    }\n\n\n} "],"mappings":"AAAA,sVAIOA,EAASC,EAAAC,GAAA,MAGPC,EAAWC,EAAA,qBACXC,EAAWC,EAAA,qBACXC,EAAmBC,EAAA,6BACnBC,EAAiBC,EAAA,qBAE1B,MAGqBC,EAAqBC,EAAUC,OAAA,oDAAAC,YAAA,SAAAA,IAAAF,EAAAG,UAAAD,YAAAE,MAAAC,KAAAC,WAAAD,KACzCjB,UAAYA,CAAS,EAQrBmB,OAAM,SAAAC,IAETH,KAAKI,YAAc,IAAIlB,EACvBc,KAAKK,YAAc,IAAIjB,EACvBY,KAAKM,oBAAsB,IAAIhB,EAC/BU,KAAKO,kBAAoB,IAAIf,EAAkBQ,MAG/CA,KAAKI,YAAYI,wBAGjB,MAAMC,EAAQT,KAAKU,UACnB,GAAID,EAAO,CACPA,EAAME,SAASX,KAAKK,YAAYO,WAAY,aAC5CC,QAAQC,IAAI,+CAChB,CAGAd,KAAKK,YAAYU,wBACjBf,KAAKK,YAAYW,uBAAuBhB,KAAKI,YAAYa,kBAAkBC,MAAQ,QAGnFlB,KAAKM,oBAAoBa,mBACzBnB,KAAKM,oBAAoBc,cAAcpB,MAGvC,GAAIS,EAAO,CACPA,EAAME,SAASX,KAAKM,oBAAoBe,mBAAoB,YAChE,CACJ,EAGOC,2BAA0B,SAAAC,EAACC,GAC9BxB,KAAKO,kBAAkBe,2BAA2BE,EACtD,EAEOC,oBAAmB,SAAAC,EAACF,GACvBxB,KAAKO,kBAAkBkB,oBAAoBD,EAC/C,EAEOG,kBAAiB,SAAAC,IACpB5B,KAAKO,kBAAkBoB,mBAC3B,EAEOE,SAAQ,SAAAC,IACXC,EAAWC,QAAQ,wCAAyC,CACxDC,MAAO,6BACPC,QAAUC,IACN,GAAIA,IAAYJ,EAAWK,OAAOC,GAAI,CAClCrC,KAAKI,YAAYkC,SACjBC,EAAaC,KAAK,8BAA+B,CAAEC,SAAU,MAC7D,MAAMC,EAAa1C,KAAK2C,oBACxB,MAAMC,EAAUF,EAAWG,YAC3BD,EAAQE,MAAM,aAClB,IAGZ,EAGOC,kBAAiB,SAAAC,EAACxB,GACrBxB,KAAKM,oBAAoByC,kBAAkBvB,EAC/C,EAEOyB,eAAc,SAAAC,EAAC1B,GAClBxB,KAAKM,oBAAoB2C,eAAezB,EAC5C,EAEO2B,cAAa,SAAAC,EAAC5B,GACjBxB,KAAKM,oBAAoB6C,cAAc3B,EAC3C,EAEO6B,eAAc,SAAAC,IACjBtD,KAAKM,oBAAoB+C,gBAC7B,EAEOE,2BAA0B,SAAAC,IAC7BxD,KAAKM,oBAAoBiD,4BAC7B,EAEOE,gBAAe,SAAAC,EAAClC,GACnBX,QAAQC,IAAI,uDAAwDU,GACpExB,KAAKM,oBAAoBmD,gBAAgBjC,EAC7C,IAAC,OA5FgB9B,CAAY","ignoreList":[],"sourceRoot":"controller"}},{"offset":{"line":21,"column":0},"map":{"version":3,"file":"PagosMasivosDetalle.controller.js","names":["formatter","_interopRequireDefault","__formatter","UserManager","___modules_UserManager","MenuManager","___modules_MenuManager","PagosMasivosManager","___modules_PagosMasivosManager","NavigationManager","___modules_NavigationManager","PagosMasivosDetalle","Controller","extend","constructor","prototype","apply","this","arguments","onInit","_onInit","userManager","menuManager","pagosMasivosManager","navigationManager","loadAuthenticatedUser","oView","getView","setModel","getModel","console","log","loadHardcodedMenuData","filterNavigationByRole","getCurrentUser","role","initializeModels","setController","oModel","JSONModel","loadData","undefined","cuentasBancariasModel","attachRequestCompleted","oFilterBar","byId","oTable","_filterTimer","data","getData","documents","forEach","doc","alreadyInPlanilla","setData","_clearTableFilters","checkForDetailNavigation","onExit","_onExit","onSelectionChange","_onSelectionChange","oEvent","_debouncedSearch","onDateRangeChange","_onDateRangeChange","iDelay","delay","clearTimeout","setTimeout","onSearch","_onSearch","aTableFilters","getFilterGroupItems","reduce","aResult","oFilterGroupItem","oControl","getControl","getSelectedKeys","aSelectedKeys","aFilters","map","sSelectedKey","fieldPath","getName","Filter","path","operator","FilterOperator","Contains","value1","length","push","filters","and","getValue","sValue","aDateRange","split","sStartDate","sEndDate","BT","value2","getBinding","filter","_logTableData","aData","getProperty","slice","docTypes","suppliers","banks","onSideNavigationItemSelect","_onSideNavigationItemSelect","onSideNavItemSelect","_onSideNavItemSelect","onMenuButtonPress","_onMenuButtonPress","onLogout","_onLogout","MessageBox","confirm","title","onClose","sAction","Action","OK","logout","MessageToast","show","duration","oComponent","getOwnerComponent","oRouter","getRouter","navTo","onBackToPagosMasivos","_onBackToPagosMasivos","onNuevaPlanilla","_onNuevaPlanilla","planillaId","onEditPlanilla","_onEditPlanilla","oModelPlanilla","planillaData","Status","error","onAnularPlanilla","_onAnularPlanilla","mockCancelPlanillaAPI","DocEntry","_mockCancelPlanillaAPI","mockResponse","success","message","timestamp","Date","toISOString","details","JSON","stringify","U_ESTADO","refresh","onDownloadPlanilla","_onDownloadPlanilla","onFechaEjecucionChange","_onFechaEjecucionChange","onSerieChange","_onSerieChange","onCuentaBancariaChange","_onCuentaBancariaChange","selectedItem","getParameter","selectedKey","getKey","cuentasBancarias","selectedAccount","value","find","account","AccNo","planillaModel","setProperty","BankCode","Branch","GLAccount","U_CUENTA","U_IDBANCO","U_NMBANCO","U_MONEDA","U_GLACCOUNT","onGuardarPlanilla","_onGuardarPlanilla","isNewPlanilla","validationResult","validateNewPlanilla","isValid","mockCreatePlanillaAPI","information","onEjecutarPlanilla","_onEjecutarPlanilla","warning","VS_PMP1Collection","mockExecutePlanillaAPI","_mockCreatePlanillaAPI","Math","floor","random","createdPlanilla","_mockExecutePlanillaAPI","executeData","U_FECHAP","U_TC","U_NOPBAN","executedPlanilla","_validateNewPlanilla","errors","U_SERIE","join","onAddDocumentos","_onAddDocumentos","onDocumentSearch","_onDocumentSearch","onDocumentBankFilterChange","_onDocumentBankFilterChange","onDocumentSelectionChange","_onDocumentSelectionChange","onDocumentDialogCancel","_onDocumentDialogCancel","onDocumentDialogConfirm","_onDocumentDialogConfirm","aSelectedItems","getSelectedItems","oPlanillaModel","currentDocuments","existingDocNums","U_NUMDOC","documentsToAdd","skippedDocuments","oItem","documentData","getBindingContext","getObject","includes","DocNum","newLine","LineId","VisOrder","Object","LogInst","U_CHECK","U_IDPAGO","U_TIPDOC","DocType","U_IDDOC","U_LINDOC","U_OBJDOC","U_CUODOC","U_IDSN","CardCode","U_NMSN","CardName","U_RUC","U_MONDOC","Currency","U_IMPORTE","Total","U_SALDO","Balance","U_PAGONETO","U_PAGLOC","U_PAGEXT","U_RETLOC","U_RETEXT","U_FVENC","DueDate","U_FCONT","DocDate","U_FDOCU","U_CCORRI","CuentaBancaria","U_CTAINF","U_MONINF","U_RETCOD","U_RETPOR","U_SL","U_SE","U_RL","U_RE","U_BL","U_BE","U_IL","U_REF2","U_PAGLOC0","U_PAGEXT0","U_RETLOC0","U_RETEXT0","U_MPBB","recalculatePlanillaTotals","updateAlreadyAddedStatus","oDialog","close","removeSelections","_updateAlreadyAddedStatus","markAlreadyAddedDocuments","onDeletePlanillaLine","_onDeletePlanillaLine","button","getSource","listItem","getParent","bindingContext","lineData","lineIndex","getPath","pop","action","deletePlanillaLine","parseInt","_deletePlanillaLine","updatedLines","line","index","_recalculatePlanillaTotals","lines","totalImporte","sum","totalRetencion","totalPagoFinal","U_TOTAL","U_RETEN","U_SUBTOTAL","total","retencion","subtotal","onDeleteSelectedLines","_onDeleteSelectedLines","selectedItems","documentsToDelete","item","documentNames","deleteSelectedPlanillaLines","_deleteSelectedPlanillaLines","documentNumbersToDelete","loadPlanillaById","_loadPlanillaById","planillasUrl","oData","planillas","planillaIdNum","planilla","planillaWithMode","loadSeriesData","loadFallbackPlanillaData","_loadFallbackPlanillaData","fallbackData","U_CCBANCO","U_FECHA","U_FECHAV","U_GLOSA","U_REF","U_IDSUC","U_NMSUC","U_FCAJA","U_CONTA","_checkForDetailNavigation","oRoute","getRoute","attachPatternMatched","createNewPlanilla","onDocumentDialogAfterOpen","_onDocumentDialogAfterOpen","availableDocuments","_markAlreadyAddedDocuments","keys","markedCount","isAlreadyAdded"],"sources":["PagosMasivosDetalle.controller.ts"],"sourcesContent":["import Controller from \"sap/ui/core/mvc/Controller\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport Dialog from \"sap/m/Dialog\";\nimport formatter from \"../model/formatter\";\nimport Event from \"sap/ui/base/Event\";\nimport type UIComponent from \"sap/ui/core/UIComponent\";\nimport { UserManager } from \"./modules/UserManager\";\nimport { MenuManager } from \"./modules/MenuManager\";\nimport { PagosMasivosManager } from \"./modules/PagosMasivosManager\";\nimport { NavigationManager } from \"./modules/NavigationManager\";\nimport Filter from \"sap/ui/model/Filter\";\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\n\n\n/**\n * @namespace com.vs.extension.finanb1.controller\n */\nexport default class PagosMasivosDetalle extends Controller {\n    public formatter = formatter;\n    \n    // Gestores para diferentes funcionalidades\n    public userManager: UserManager;\n    public menuManager: MenuManager;\n    public pagosMasivosManager: PagosMasivosManager;\n    public navigationManager: NavigationManager;\n\n    // Propiedades para FilterBar\n    private oModel: any;\n    private oFilterBar: any;\n    private oTable: any;\n    private _filterTimer: any;\n\n\n    public onInit(): void {\n        // Inicializar gestores\n        this.userManager = new UserManager();\n        this.menuManager = new MenuManager();\n        this.pagosMasivosManager = new PagosMasivosManager();\n        this.navigationManager = new NavigationManager(this);\n        \n        // Cargar usuario autenticado\n        this.userManager.loadAuthenticatedUser();\n        \n        // Configurar modelo del menú\n        const oView = this.getView();\n        if (oView) {\n            oView.setModel(this.menuManager.getModel(), \"menuModel\");\n            console.log(\"Modelo de menú asignado a la vista en onInit\");\n        }\n        \n        // Cargar datos del menú\n        this.menuManager.loadHardcodedMenuData();\n        this.menuManager.filterNavigationByRole(this.userManager.getCurrentUser()?.role || 'user');\n        \n        // Inicializar modelos de PagosMasivos\n        this.pagosMasivosManager.initializeModels();\n        this.pagosMasivosManager.setController(this);\n        \n        // Configurar modelo de documentos disponibles\n        if (oView) {\n            this.oModel = new JSONModel();\n\t\t\tthis.oModel.loadData(\"./model/mock/available-documents.json\", undefined, false);\n\t\t\toView.setModel(this.oModel, \"oModel\");\n\n            // Cargar datos de cuentas bancarias\n            const cuentasBancariasModel = new JSONModel();\n            cuentasBancariasModel.loadData(\"./model/mock/cuentas-bancarias.json\", undefined, false);\n            oView.setModel(cuentasBancariasModel, \"cuentasBancarias\");\n            \n            // Asegurar que los datos de cuentas bancarias se carguen\n            cuentasBancariasModel.attachRequestCompleted(() => {\n                console.log(\"Modelo de cuentas bancarias cargado\");\n            });\n\n            this.oFilterBar = this.getView()?.byId(\"filterbar\");\n            this.oTable = this.getView()?.byId(\"table\");\n            \n            // Inicializar temporizador de debounce para filtrado automático\n            this._filterTimer = null;\n            \n            // Asegurar que la tabla muestre todos los datos inicialmente después de cargar el modelo\n            this.oModel.attachRequestCompleted(() => {\n                console.log(\"Modelo de documentos disponibles cargado\");\n                // Inicializar alreadyInPlanilla a false para todos los documentos\n                const data = this.oModel.getData();\n                if (data && data.documents) {\n                    data.documents.forEach((doc: any) => {\n                        doc.alreadyInPlanilla = false;\n                    });\n                    this.oModel.setData(data);\n                }\n                this._clearTableFilters();\n            });\n        }\n        \n\n        \n        // Verificar navegación a detalle\n        this.checkForDetailNavigation();\n    }\n\n//MÉTODOS DE FILTROS\npublic onExit(): void {\n    this.oModel = null;\n    this.oFilterBar = null;\n    this.oTable = null;\n}\n\npublic onSelectionChange(oEvent: Event): void {\n    // Aplicar filtro inmediatamente\n    this._debouncedSearch();\n}\n\npublic onDateRangeChange(oEvent: Event): void {\n    // Aplicar filtro inmediatamente\n    this._debouncedSearch();\n}\n\nprivate _debouncedSearch(iDelay?: number): void {\n    const delay = iDelay || 0;\n    \n    // Limpiar temporizador existente\n    if (this._filterTimer) {\n        clearTimeout(this._filterTimer);\n    }\n    \n    // Establecer nuevo temporizador\n    this._filterTimer = setTimeout(() => {\n        this.onSearch();\n    }, delay);\n}\n\npublic onSearch(): void {\n    const aTableFilters = this.oFilterBar.getFilterGroupItems().reduce((aResult: any[], oFilterGroupItem: any) => {\n        const oControl = oFilterGroupItem.getControl();\n        \n        // Manejar controles MultiComboBox (filtros de texto)\n        if (oControl && oControl.getSelectedKeys) {\n            const aSelectedKeys = oControl.getSelectedKeys();\n            const aFilters = aSelectedKeys.map((sSelectedKey: string) => {\n                // Mapear nombres de filtros a campos reales de datos\n                let fieldPath = oFilterGroupItem.getName();\n                if (fieldPath === \"Name\") fieldPath = \"DocType\";\n                else if (fieldPath === \"Category\") fieldPath = \"CardCode\";\n                else if (fieldPath === \"SupplierName\") fieldPath = \"BankCode\";\n                \n                return new Filter({\n                    path: fieldPath,\n                    operator: FilterOperator.Contains,\n                    value1: sSelectedKey\n                });\n            });\n\n            if (aSelectedKeys.length > 0) {\n                aResult.push(new Filter({\n                    filters: aFilters,\n                    and: false\n                }));\n            }\n        }\n        // Manejar controles DateRangeSelection (filtros de rango de fechas)\n        else if (oControl && oControl.getValue) {\n            const sValue = oControl.getValue();\n            if (sValue && sValue !== \"\") {\n                const aDateRange = sValue.split(\" - \");\n                if (aDateRange.length === 2) {\n                    const sStartDate = aDateRange[0];\n                    const sEndDate = aDateRange[1];\n                    \n                    // Solo aplicar filtro si ambas fechas están seleccionadas\n                    if (sStartDate && sEndDate && sStartDate !== \"\" && sEndDate !== \"\") {\n                        aResult.push(new Filter({\n                            path: \"DocDate\", // Mapear al campo de fecha del documento\n                            operator: FilterOperator.BT,\n                            value1: sStartDate,\n                            value2: sEndDate\n                        }));\n                    }\n                }\n            }\n        }\n\n        return aResult;\n    }, []);\n\n    if (this.oTable && this.oTable.getBinding(\"items\")) {\n        this.oTable.getBinding(\"items\").filter(aTableFilters);\n    }\n}\n\n\n\nprivate _clearTableFilters(): void {\n    // Limpiar filtros existentes para mostrar todos los datos\n    if (this.oTable && this.oTable.getBinding(\"items\")) {\n        this.oTable.getBinding(\"items\").filter([]);\n    }\n    \n    // Depuración: Registrar los datos para ver qué está disponible\n    this._logTableData();\n}\n\nprivate _logTableData(): void {\n    // Método de depuración para verificar qué datos están disponibles\n    const oView = this.getView();\n    if (!oView) return;\n    \n    const oModel = oView.getModel();\n    if (!oModel) return;\n    \n    const aData = oModel.getProperty(\"/documents\");\n    if (!aData) return;\n    \n    console.log(\"Total de documentos:\", aData.length);\n    console.log(\"Primeros documentos:\", aData.slice(0, 3));\n    \n    // Registrar datos de filtros disponibles\n    const docTypes = oModel.getProperty(\"/docTypes\");\n    const suppliers = oModel.getProperty(\"/suppliers\");\n    const banks = oModel.getProperty(\"/banks\");\n    \n    console.log(\"Tipos de documento disponibles:\", docTypes?.length || 0);\n    console.log(\"Proveedores disponibles:\", suppliers?.length || 0);\n    console.log(\"Bancos disponibles:\", banks?.length || 0);\n}\n\n\n    // ===== MÉTODOS DE NAVEGACIÓN =====\n    public onSideNavigationItemSelect(oEvent: Event): void {\n        this.navigationManager.onSideNavigationItemSelect(oEvent);\n    }\n\n    public onSideNavItemSelect(oEvent: any): void {\n        this.navigationManager.onSideNavItemSelect(oEvent);\n    }\n\n    public onMenuButtonPress(): void {\n        this.navigationManager.onMenuButtonPress();\n    }\n\n    public onLogout(): void {\n        MessageBox.confirm(\"¿Está seguro que desea cerrar sesión?\", {\n            title: \"Confirmar Cierre de Sesión\",\n            onClose: (sAction: string) => {\n                if (sAction === MessageBox.Action.OK) {\n                    this.userManager.logout();\n                    MessageToast.show(\"Sesión cerrada exitosamente\", { duration: 2000 });\n                    const oComponent = this.getOwnerComponent() as UIComponent;\n                    const oRouter = oComponent.getRouter();\n                    oRouter.navTo(\"RouteLogin\");\n                }\n            }\n        });\n    }\n\n    // ===== MÉTODOS DE PAGOS MASIVOS DETALLE =====\n    public onBackToPagosMasivos(): void {\n        console.log(\"PagosMasivosDetalle.controller - onBackToPagosMasivos triggered!\");\n        const oComponent = this.getOwnerComponent() as UIComponent;\n        const oRouter = oComponent.getRouter();\n        oRouter.navTo(\"RoutePagosMasivos\");\n    }\n\n    public onNuevaPlanilla(): void {\n        console.log(\"PagosMasivosDetalle.controller - onNuevaPlanilla triggered!\");\n        // Navigate to new planilla\n        const oComponent = this.getOwnerComponent() as UIComponent;\n        const oRouter = oComponent.getRouter();\n        oRouter.navTo(\"RoutePagosMasivosDetalle\", { planillaId: \"new\" });\n    }\n\n    public onEditPlanilla(): void {\n        const oView = this.getView();\n        if (oView) {\n            const oModelPlanilla = oView.getModel(\"planilla\") as JSONModel;\n            if (oModelPlanilla) {\n                const planillaData = oModelPlanilla.getData();\n                if (planillaData && planillaData.Status === \"Creada\") {\n                    MessageToast.show(\"Función de edición en desarrollo\", { duration: 2000 });\n                    // Aquí se puede implementar la lógica para editar la planilla\n                } else {\n                    MessageBox.error(\"Solo se pueden editar planillas con estado 'Creada'\");\n                }\n            }\n        }\n    }\n\n    public onAnularPlanilla(): void {\n        const oView = this.getView();\n        if (oView) {\n            const oModelPlanilla = oView.getModel(\"planilla\") as JSONModel;\n            if (oModelPlanilla) {\n                const planillaData = oModelPlanilla.getData();\n                if (planillaData) {\n                    MessageBox.confirm(\"¿Está seguro que desea anular esta planilla?\", {\n                        title: \"Confirmar Anulación\",\n                        onClose: (sAction: string) => {\n                            if (sAction === MessageBox.Action.OK) {\n                                // Mock API call to cancel planilla\n                                this.mockCancelPlanillaAPI(planillaData.DocEntry);\n                            }\n                        }\n                    });\n                } else {\n                    MessageBox.error(\"No se pudo obtener los datos de la planilla\");\n                }\n            } else {\n                MessageBox.error(\"No se pudo acceder al modelo de la planilla\");\n            }\n        } else {\n            MessageBox.error(\"No se pudo acceder a la vista\");\n        }\n    }\n\n    private mockCancelPlanillaAPI(planillaId: number): void {\n        console.log(\"PagosMasivosDetalle.controller - Llamada API simulada: POST /Planilla(\" + planillaId + \")/Cancel\");\n        \n        // Simular retraso de llamada API\n        setTimeout(() => {\n            // Respuesta exitosa simulada\n            const mockResponse = {\n                success: true,\n                message: \"Planilla anulada exitosamente\",\n                planillaId: planillaId,\n                timestamp: new Date().toISOString()\n            };\n            \n            console.log(\"PagosMasivosDetalle.controller - Respuesta API simulada:\", mockResponse);\n            \n            // Mostrar mensaje de éxito\n            MessageBox.success(\"Planilla anulada exitosamente\", {\n                title: \"Operación Exitosa\",\n                details: `Llamada API: POST /Planilla(${planillaId})/Cancel\\nRespuesta: ${JSON.stringify(mockResponse, null, 2)}`,\n                onClose: () => {\n                    // Actualizar el estado de la planilla en el modelo\n                    const oView = this.getView();\n                    if (oView) {\n                        const oModelPlanilla = oView.getModel(\"planilla\") as JSONModel;\n                        if (oModelPlanilla) {\n                            const planillaData = oModelPlanilla.getData();\n                            if (planillaData) {\n                                planillaData.U_ESTADO = \"A\"; // Anulada\n                                oModelPlanilla.refresh(true);\n                                console.log(\"PagosMasivosDetalle.controller - Estado de planilla actualizado a 'Anulada'\");\n                            }\n                        }\n                    }\n                }\n            });\n        }, 1000); // Retraso de 1 segundo para simular llamada API\n    }\n\n    public onDownloadPlanilla(): void {\n        console.log(\"PagosMasivosDetalle.controller - onDownloadPlanilla triggered!\");\n        this.pagosMasivosManager.onDownloadPlanilla();\n    }\n\n    public onFechaEjecucionChange(oEvent: any): void {\n        console.log(\"PagosMasivosDetalle.controller - onFechaEjecucionChange triggered!\");\n        this.pagosMasivosManager.onFechaEjecucionChange(oEvent);\n    }\n\n    public onSerieChange(oEvent: any): void {\n        console.log(\"PagosMasivosDetalle.controller - onSerieChange triggered!\");\n        this.pagosMasivosManager.onSerieChange(oEvent);\n    }\n\n    public onCuentaBancariaChange(oEvent: any): void {\n        console.log(\"PagosMasivosDetalle.controller - onCuentaBancariaChange activado\");\n        \n        const oView = this.getView();\n        if (!oView) return;\n        \n        const selectedItem = oEvent.getParameter(\"selectedItem\");\n        if (!selectedItem) {\n            console.log(\"No se seleccionó ninguna cuenta bancaria\");\n            return;\n        }\n        \n        const selectedKey = selectedItem.getKey();\n        console.log(\"PagosMasivosDetalle.controller - Cuenta bancaria seleccionada (clave):\", selectedKey);\n        \n        // Obtener el modelo de cuentas bancarias para encontrar la cuenta seleccionada\n        const cuentasBancariasModel = oView.getModel(\"cuentasBancarias\") as JSONModel;\n        if (!cuentasBancariasModel) {\n            console.error(\"PagosMasivosDetalle.controller - Modelo de cuentas bancarias no encontrado\");\n            return;\n        }\n        \n        const cuentasBancarias = cuentasBancariasModel.getData();\n        const selectedAccount = cuentasBancarias.value.find((account: any) => account.AccNo === selectedKey);\n        \n        if (!selectedAccount) {\n            console.error(\"PagosMasivosDetalle.controller - Cuenta seleccionada no encontrada\");\n            return;\n        }\n        \n        console.log(\"PagosMasivosDetalle.controller - Cuenta seleccionada:\", selectedAccount);\n        \n        // Actualizar el modelo de planilla con los datos de la cuenta seleccionada\n        const planillaModel = oView.getModel(\"planilla\") as JSONModel;\n        if (planillaModel) {\n            // Actualizar los campos basándose en la cuenta seleccionada\n            planillaModel.setProperty(\"/U_CUENTA\", selectedAccount.AccNo);\n            planillaModel.setProperty(\"/U_IDBANCO\", selectedAccount.BankCode);\n            planillaModel.setProperty(\"/U_NMBANCO\", selectedAccount.BankCode); // Usando BankCode como nombre del banco por ahora\n            planillaModel.setProperty(\"/U_MONEDA\", selectedAccount.Branch);\n            planillaModel.setProperty(\"/U_GLACCOUNT\", selectedAccount.GLAccount);\n            \n            console.log(\"PagosMasivosDetalle.controller - Planilla actualizada con datos de cuenta:\", {\n                U_CUENTA: selectedAccount.AccNo,\n                U_IDBANCO: selectedAccount.BankCode,\n                U_NMBANCO: selectedAccount.BankCode,\n                U_MONEDA: selectedAccount.Branch,\n                U_GLACCOUNT: selectedAccount.GLAccount\n            });\n            \n            // Forzar actualización del modelo\n            planillaModel.refresh(true);\n        } else {\n            console.error(\"PagosMasivosDetalle.controller - Modelo de planilla no encontrado\");\n        }\n    }\n\n    public onGuardarPlanilla(): void {\n        console.log(\"PagosMasivosDetalle.controller - onGuardarPlanilla triggered!\");\n        \n        const oView = this.getView();\n        if (!oView) {\n            MessageBox.error(\"No se pudo acceder a la vista\");\n            return;\n        }\n        \n        const oModelPlanilla = oView.getModel(\"planilla\") as JSONModel;\n        if (!oModelPlanilla) {\n            MessageBox.error(\"No se pudo acceder al modelo de la planilla\");\n            return;\n        }\n        \n        const planillaData = oModelPlanilla.getData();\n        if (!planillaData) {\n            MessageBox.error(\"No se pudo obtener los datos de la planilla\");\n            return;\n        }\n        \n        // Verificar si es una nueva planilla\n        console.log(\"PagosMasivosDetalle.controller - Valor de isNewPlanilla:\", planillaData.isNewPlanilla);\n        console.log(\"PagosMasivosDetalle.controller - Datos de planilla:\", planillaData);\n        \n        if (planillaData.isNewPlanilla === true) {\n            // Validar campos requeridos para nueva planilla\n            const validationResult = this.validateNewPlanilla(planillaData);\n            \n            if (!validationResult.isValid) {\n                MessageBox.error(validationResult.message, {\n                    title: \"Validación Requerida\"\n                });\n                return;\n            }\n            \n            // Mostrar confirmación para crear nueva planilla\n            MessageBox.confirm(\"¿Está seguro que desea crear esta planilla?\", {\n                title: \"Confirmar Creación\",\n                onClose: (sAction: string) => {\n                    if (sAction === MessageBox.Action.OK) {\n                        // Llamada API simulada para crear planilla\n                        this.mockCreatePlanillaAPI(planillaData);\n                    }\n                }\n            });\n        } else {\n            // Para planillas existentes, solo mostrar un mensaje\n            MessageBox.information(\"Esta planilla ya existe. Use 'Ejecutar' para procesarla.\");\n        }\n    }\n\n    public onEjecutarPlanilla(): void {\n        console.log(\"PagosMasivosDetalle.controller - onEjecutarPlanilla triggered!\");\n        \n        const oView = this.getView();\n        if (!oView) {\n            MessageBox.error(\"No se pudo acceder a la vista\");\n            return;\n        }\n        \n        const oModelPlanilla = oView.getModel(\"planilla\") as JSONModel;\n        if (!oModelPlanilla) {\n            MessageBox.error(\"No se pudo acceder al modelo de la planilla\");\n            return;\n        }\n        \n        const planillaData = oModelPlanilla.getData();\n        if (!planillaData) {\n            MessageBox.error(\"No se pudo obtener los datos de la planilla\");\n            return;\n        }\n        \n        // Verificar que la planilla esté en estado \"Creada\"\n        if (planillaData.U_ESTADO !== \"C\") {\n            MessageBox.warning(\"Solo se pueden ejecutar planillas con estado 'Creada'\");\n            return;\n        }\n        \n        // Validar que tenga al menos un documento\n        if (!planillaData.VS_PMP1Collection || planillaData.VS_PMP1Collection.length === 0) {\n            MessageBox.warning(\"La planilla debe tener al menos un documento para ser ejecutada\");\n            return;\n        }\n        \n        // Mostrar confirmación para ejecutar la planilla\n        MessageBox.confirm(\"¿Está seguro que desea ejecutar esta planilla?\", {\n            title: \"Confirmar Ejecución\",\n            onClose: (sAction: string) => {\n                if (sAction === MessageBox.Action.OK) {\n                    // Llamada API simulada para ejecutar planilla\n                    this.mockExecutePlanillaAPI(planillaData);\n                }\n            }\n        });\n    }\n\n    private mockCreatePlanillaAPI(planillaData: any): void {\n        console.log(\"PagosMasivosDetalle.controller - Llamada API simulada: POST /Planilla\");\n        console.log(\"PagosMasivosDetalle.controller - Datos enviados:\", planillaData);\n        \n        // Simular retraso de llamada API\n        setTimeout(() => {\n            // Respuesta exitosa simulada\n            const mockResponse = {\n                success: true,\n                message: \"Planilla creada exitosamente\",\n                planillaId: Math.floor(Math.random() * 1000) + 100, // ID aleatorio\n                timestamp: new Date().toISOString(),\n                createdPlanilla: {\n                    ...planillaData,\n                    DocEntry: Math.floor(Math.random() * 1000) + 100,\n                    isNewPlanilla: false,\n                    U_ESTADO: \"C\" // Creada\n                }\n            };\n            \n            console.log(\"PagosMasivosDetalle.controller - Respuesta API simulada:\", mockResponse);\n            \n            // Mostrar mensaje de éxito con detalles de la API\n            MessageBox.success(\"Planilla creada exitosamente\", {\n                title: \"Operación Exitosa\",\n                details: `Llamada API: POST /Planilla\\nDatos enviados: ${JSON.stringify(planillaData, null, 2)}\\nRespuesta: ${JSON.stringify(mockResponse, null, 2)}`,\n                onClose: () => {\n                    // Actualizar la planilla con los datos de respuesta\n                    const oView = this.getView();\n                    if (oView) {\n                        const oModelPlanilla = oView.getModel(\"planilla\") as JSONModel;\n                        if (oModelPlanilla) {\n                            // Actualizar con los datos de la planilla creada\n                            oModelPlanilla.setData(mockResponse.createdPlanilla);\n                            oModelPlanilla.refresh(true);\n                            console.log(\"PagosMasivosDetalle.controller - Planilla actualizada con datos creados\");\n                        }\n                    }\n                }\n            });\n        }, 1500); // Retraso de 1.5 segundos para simular llamada API\n    }\n\n    private mockExecutePlanillaAPI(planillaData: any): void {\n        console.log(\"PagosMasivosDetalle.controller - Llamada API simulada: POST /Planilla(\" + planillaData.DocEntry + \")/Execute\");\n        \n        // Preparar solo los datos requeridos para la ejecución\n        const executeData = {\n            DocEntry: planillaData.DocEntry,\n            U_FECHAP: planillaData.U_FECHAP,\n            U_TC: planillaData.U_TC,\n            U_NOPBAN: planillaData.U_NOPBAN\n        };\n        \n        console.log(\"PagosMasivosDetalle.controller - Datos enviados para ejecución:\", executeData);\n        \n        // Simular retraso de llamada API\n        setTimeout(() => {\n            // Respuesta exitosa simulada\n            const mockResponse = {\n                success: true,\n                message: \"Planilla ejecutada exitosamente\",\n                planillaId: planillaData.DocEntry,\n                timestamp: new Date().toISOString(),\n                executedPlanilla: {\n                    ...planillaData,\n                    U_ESTADO: \"E\" // Ejecutada\n                }\n            };\n            \n            console.log(\"PagosMasivosDetalle.controller - Respuesta API simulada:\", mockResponse);\n            \n            // Mostrar mensaje de éxito con detalles de la API\n            MessageBox.success(\"Planilla ejecutada exitosamente\", {\n                title: \"Operación Exitosa\",\n                details: `Llamada API: POST /Planilla(${planillaData.DocEntry})/Execute\\nDatos enviados: ${JSON.stringify(executeData, null, 2)}\\nRespuesta: ${JSON.stringify(mockResponse, null, 2)}`,\n                onClose: () => {\n                    // Actualizar la planilla con los datos de respuesta\n                    const oView = this.getView();\n                    if (oView) {\n                        const oModelPlanilla = oView.getModel(\"planilla\") as JSONModel;\n                        if (oModelPlanilla) {\n                            // Actualizar con los datos de la planilla ejecutada\n                            oModelPlanilla.setData(mockResponse.executedPlanilla);\n                            oModelPlanilla.refresh(true);\n                            console.log(\"PagosMasivosDetalle.controller - Planilla actualizada con datos ejecutados\");\n                        }\n                    }\n                }\n            });\n        }, 2000); // Retraso de 2 segundos para simular llamada API\n    }\n\n    private validateNewPlanilla(planillaData: any): { isValid: boolean; message: string } {\n        console.log(\"PagosMasivosDetalle.controller - Validando nueva planilla:\", planillaData);\n        \n        const errors: string[] = [];\n        \n        // Validar Cuenta Bancaria\n        if (!planillaData.U_CUENTA) {\n            errors.push(\"• Cuenta Bancaria es requerida\");\n        }\n        \n        // Validar Serie\n        if (!planillaData.U_SERIE) {\n            errors.push(\"• Serie es requerida\");\n        }\n        \n        // Validar Fecha de Ejecución\n        if (!planillaData.U_FECHAP) {\n            errors.push(\"• Fecha de Ejecución es requerida\");\n        }\n        \n        // Validar Tipo de Cambio\n        if (!planillaData.U_TC) {\n            errors.push(\"• Tipo de Cambio es requerido\");\n        }\n        \n        // Validar al menos un documento\n        if (!planillaData.VS_PMP1Collection || planillaData.VS_PMP1Collection.length === 0) {\n            errors.push(\"• Al menos un documento es requerido\");\n        }\n        \n        if (errors.length > 0) {\n            const message = \"Por favor complete los siguientes campos requeridos:\\n\\n\" + errors.join(\"\\n\");\n            return { isValid: false, message: message };\n        }\n        \n        return { isValid: true, message: \"\" };\n    }\n\n    public onAddDocumentos(): void {\n        console.log(\"PagosMasivosDetalle.controller - onAddDocumentos triggered!\");\n        if (this.pagosMasivosManager) {\n            this.pagosMasivosManager.onAddDocumentos();\n        } else {\n            console.error(\"PagosMasivosManager is not initialized!\");\n        }\n    }\n\n    public onDocumentSearch(oEvent: any): void {\n        console.log(\"PagosMasivosDetalle.controller - onDocumentSearch triggered!\");\n        if (this.pagosMasivosManager) {\n            this.pagosMasivosManager.onDocumentSearch(oEvent);\n        }\n    }\n\n\n\n    public onDocumentBankFilterChange(oEvent: any): void {\n        console.log(\"PagosMasivosDetalle.controller - onDocumentBankFilterChange triggered!\");\n        if (this.pagosMasivosManager) {\n            this.pagosMasivosManager.onDocumentBankFilterChange(oEvent);\n        }\n    }\n\n\n\n    public onDocumentSelectionChange(oEvent: any): void {\n        console.log(\"PagosMasivosDetalle.controller - onDocumentSelectionChange triggered!\");\n        if (this.pagosMasivosManager) {\n            this.pagosMasivosManager.onDocumentSelectionChange(oEvent);\n        }\n    }\n\n    public onDocumentDialogCancel(): void {\n        console.log(\"PagosMasivosDetalle.controller - onDocumentDialogCancel triggered!\");\n        if (this.pagosMasivosManager) {\n            this.pagosMasivosManager.onDocumentDialogCancel();\n        }\n    }\n\n    public onDocumentDialogConfirm(): void {\n        console.log(\"PagosMasivosDetalle.controller - onDocumentDialogConfirm triggered!\");\n        \n        const oView = this.getView();\n        if (!oView) return;\n        \n        const oTable = oView.byId(\"table\") as any;\n        if (!oTable) return;\n        \n        const aSelectedItems = oTable.getSelectedItems();\n        if (aSelectedItems.length === 0) {\n            MessageBox.warning(\"Por favor seleccione al menos un documento.\");\n            return;\n        }\n        \n        // Obtener el modelo de planilla\n        const oPlanillaModel = oView.getModel(\"planilla\") as JSONModel;\n        if (!oPlanillaModel) return;\n        \n        const planillaData = oPlanillaModel.getData();\n        if (!planillaData) return;\n        \n        // Obtener documentos actuales en la planilla\n        const currentDocuments = planillaData.VS_PMP1Collection || [];\n        \n        // Obtener números de documentos existentes para evitar duplicados\n        const existingDocNums = currentDocuments.map((doc: any) => doc.U_NUMDOC);\n        const documentsToAdd: any[] = [];\n        const skippedDocuments: any[] = [];\n        \n        // Agregar documentos seleccionados a la planilla (evitando duplicados)\n        aSelectedItems.forEach((oItem: any) => {\n            const documentData = oItem.getBindingContext(\"oModel\").getObject();\n            \n            // Verificar si el documento ya está en la planilla\n            if (existingDocNums.includes(documentData.DocNum)) {\n                skippedDocuments.push(documentData.DocNum);\n                return; // Omitir este documento\n            }\n            \n            // Crear nueva línea de elemento para la planilla\n            const newLine = {\n                DocEntry: planillaData.DocEntry,\n                LineId: currentDocuments.length + documentsToAdd.length + 1,\n                VisOrder: currentDocuments.length + documentsToAdd.length + 1,\n                Object: \"VS_OPMP\",\n                LogInst: null,\n                U_CHECK: \"Y\",\n                U_IDPAGO: planillaData.U_IDPAGO,\n                U_TIPDOC: documentData.DocType,\n                U_IDDOC: documentData.DocEntry,\n                U_LINDOC: 0,\n                U_OBJDOC: \"18\",\n                U_CUODOC: \"1\",\n                U_IDSN: documentData.CardCode,\n                U_NMSN: documentData.CardName,\n                U_RUC: documentData.CardCode,\n                U_NUMDOC: documentData.DocNum,\n                U_MONDOC: documentData.Currency,\n                U_IMPORTE: documentData.Total,\n                U_SALDO: documentData.Balance,\n                U_PAGONETO: documentData.Balance,\n                U_PAGLOC: documentData.Balance,\n                U_PAGEXT: 0,\n                U_RETLOC: 0, // Valor por defecto 0 ya que RetLoc no existe en documentos disponibles\n                U_RETEXT: 0,\n                U_FVENC: documentData.DueDate,\n                U_FCONT: documentData.DocDate,\n                U_FDOCU: documentData.DocDate,\n                U_CCORRI: documentData.CuentaBancaria,\n                U_CTAINF: documentData.BankCode,\n                U_MONINF: documentData.Currency,\n                U_RETCOD: \"\",\n                U_RETPOR: 0,\n                U_ESTADO: \"1\",\n                U_SL: documentData.Balance,\n                U_SE: 0,\n                U_RL: 0, // Valor por defecto 0 ya que RetLoc no existe en documentos disponibles\n                U_RE: 0,\n                U_BL: 0,\n                U_BE: 0,\n                U_IL: documentData.Balance,\n                U_REF2: documentData.DocNum,\n                U_PAGLOC0: documentData.Balance, // Usar Balance como PAGLOC0 ya que PAGLOC0 no existe\n                U_PAGEXT0: 0,\n                U_RETLOC0: 0, // Valor por defecto 0 ya que RetLoc no existe en documentos disponibles\n                U_RETEXT0: 0,\n                U_MPBB: \"2\"\n            };\n            \n            documentsToAdd.push(newLine);\n        });\n        \n        // Agregar nuevos documentos a la planilla\n        currentDocuments.push(...documentsToAdd);\n        \n        // Actualizar el modelo de planilla\n        planillaData.VS_PMP1Collection = currentDocuments;\n        \n        // Recalcular totales después de agregar documentos\n        this.recalculatePlanillaTotals(planillaData);\n        \n        // Actualizar el modelo con datos recalculados\n        oPlanillaModel.setData(planillaData);\n        oPlanillaModel.refresh(true);\n        \n        // Actualizar el estado de ya agregado en el modal\n        this.updateAlreadyAddedStatus();\n        \n        // Cerrar el diálogo\n        const oDialog = oView.byId(\"documentSelectionDialog\") as any;\n        if (oDialog) {\n            oDialog.close();\n        }\n        \n        // Limpiar selección de tabla\n        oTable.removeSelections();\n        \n        // Mostrar mensaje apropiado\n        if (documentsToAdd.length > 0 && skippedDocuments.length > 0) {\n            MessageToast.show(`${documentsToAdd.length} documento(s) agregado(s), ${skippedDocuments.length} ya existían.`);\n        } else if (documentsToAdd.length > 0) {\n            MessageToast.show(`${documentsToAdd.length} documento(s) agregado(s) a la planilla.`);\n        } else if (skippedDocuments.length > 0) {\n            MessageBox.warning(\"Todos los documentos seleccionados ya están en la planilla.\");\n        } else {\n            MessageBox.warning(\"Por favor seleccione al menos un documento.\");\n        }\n    }\n\n    private updateAlreadyAddedStatus(): void {\n        this.markAlreadyAddedDocuments();\n    }\n\n    public onDeletePlanillaLine(oEvent: any): void {\n        console.log(\"PagosMasivosDetalle.controller - Delete planilla line triggered\");\n        \n        const oView = this.getView();\n        if (!oView) {\n            return;\n        }\n\n        const oPlanillaModel = oView.getModel(\"planilla\") as JSONModel;\n        if (!oPlanillaModel) {\n            console.log(\"Planilla model not found\");\n            return;\n        }\n\n        // Get the button that was clicked\n        const button = oEvent.getSource();\n        const listItem = button.getParent().getParent();\n        const bindingContext = listItem.getBindingContext(\"planilla\");\n        \n        if (!bindingContext) {\n            console.log(\"No binding context found\");\n            return;\n        }\n\n        // Get the line data\n        const lineData = bindingContext.getObject();\n        const lineIndex = bindingContext.getPath().split(\"/\").pop();\n        \n        console.log(\"Deleting line:\", lineData);\n        console.log(\"Line index:\", lineIndex);\n        \n        // Show confirmation dialog\n        MessageBox.confirm(\n            `¿Está seguro que desea eliminar el documento ${lineData.U_NUMDOC}?`,\n            {\n                title: \"Confirmar eliminación\",\n                onClose: (action: string) => {\n                    if (action === MessageBox.Action.OK) {\n                        this.deletePlanillaLine(parseInt(lineIndex));\n                    }\n                }\n            }\n        );\n    }\n\n    private deletePlanillaLine(lineIndex: number): void {\n        console.log(\"PagosMasivosDetalle.controller - Deleting line at index:\", lineIndex);\n        \n        const oView = this.getView();\n        if (!oView) {\n            return;\n        }\n\n        const oPlanillaModel = oView.getModel(\"planilla\") as JSONModel;\n        if (!oPlanillaModel) {\n            console.log(\"Planilla model not found\");\n            return;\n        }\n\n        const planillaData = oPlanillaModel.getData();\n        if (!planillaData || !planillaData.VS_PMP1Collection) {\n            console.log(\"No planilla data found\");\n            return;\n        }\n\n        // Remove the line from the collection\n        const updatedLines = planillaData.VS_PMP1Collection.filter((line: any, index: number) => index !== lineIndex);\n        \n        // Update the planilla data\n        planillaData.VS_PMP1Collection = updatedLines;\n        \n        // Recalculate totals\n        this.recalculatePlanillaTotals(planillaData);\n        \n        // Update the model\n        oPlanillaModel.setData(planillaData);\n        oPlanillaModel.refresh(true);\n        \n        console.log(\"Line deleted successfully\");\n        MessageToast.show(\"Línea eliminada correctamente\", { duration: 3000 });\n        \n        // Update the available documents to reflect the change\n        this.updateAlreadyAddedStatus();\n    }\n\n    private recalculatePlanillaTotals(planillaData: any): void {\n        console.log(\"PagosMasivosDetalle.controller - Recalculando totales de planilla\");\n        \n        if (!planillaData || !planillaData.VS_PMP1Collection) {\n            return;\n        }\n\n        const lines = planillaData.VS_PMP1Collection;\n        \n        // Calcular totales\n        const totalImporte = lines.reduce((sum: number, line: any) => sum + (line.U_IMPORTE || 0), 0);\n        const totalRetencion = lines.reduce((sum: number, line: any) => sum + (line.U_RETLOC || 0), 0);\n        const totalPagoFinal = lines.reduce((sum: number, line: any) => sum + (line.U_PAGLOC0 || 0), 0);\n        \n        // Actualizar totales de planilla\n        planillaData.U_TOTAL = totalImporte;\n        planillaData.U_RETEN = totalRetencion;\n        planillaData.U_SUBTOTAL = totalPagoFinal;\n        \n        console.log(\"Totales actualizados:\", {\n            total: totalImporte,\n            retencion: totalRetencion,\n            subtotal: totalPagoFinal\n        });\n    }\n\n    public onDeleteSelectedLines(): void {\n        console.log(\"PagosMasivosDetalle.controller - Delete selected lines triggered\");\n        \n        const oView = this.getView();\n        if (!oView) {\n            return;\n        }\n\n        const oPlanillaModel = oView.getModel(\"planilla\") as JSONModel;\n        if (!oPlanillaModel) {\n            console.log(\"Planilla model not found\");\n            return;\n        }\n\n        const planillaData = oPlanillaModel.getData();\n        if (!planillaData || !planillaData.VS_PMP1Collection) {\n            console.log(\"No planilla data found\");\n            return;\n        }\n\n        // Get the table\n        const oTable = oView.byId(\"planillaLinesTable\") as any;\n        if (!oTable) {\n            console.log(\"Planilla table not found\");\n            return;\n        }\n\n        // Get selected items\n        const selectedItems = oTable.getSelectedItems();\n        if (selectedItems.length === 0) {\n            MessageBox.warning(\"Por favor seleccione al menos una línea para eliminar.\");\n            return;\n        }\n\n        // Obtener los documentos a eliminar\n        const documentsToDelete = selectedItems.map((item: any) => {\n            const bindingContext = item.getBindingContext(\"planilla\");\n            return bindingContext ? bindingContext.getObject() : null;\n        }).filter((doc: any) => doc !== null);\n\n        if (documentsToDelete.length === 0) {\n            MessageBox.warning(\"No se pudieron obtener los documentos seleccionados.\");\n            return;\n        }\n\n        // Mostrar diálogo de confirmación\n        const documentNames = documentsToDelete.map((doc: any) => doc.U_NUMDOC).join(\", \");\n        MessageBox.confirm(\n            `¿Está seguro que desea eliminar los siguientes documentos?\\n${documentNames}`,\n            {\n                title: \"Confirmar eliminación múltiple\",\n                onClose: (action: string) => {\n                    if (action === MessageBox.Action.OK) {\n                        this.deleteSelectedPlanillaLines(documentsToDelete);\n                    }\n                }\n            }\n        );\n    }\n\n    private deleteSelectedPlanillaLines(documentsToDelete: any[]): void {\n        console.log(\"PagosMasivosDetalle.controller - Deleting selected lines:\", documentsToDelete);\n        \n        const oView = this.getView();\n        if (!oView) {\n            return;\n        }\n\n        const oPlanillaModel = oView.getModel(\"planilla\") as JSONModel;\n        if (!oPlanillaModel) {\n            console.log(\"Planilla model not found\");\n            return;\n        }\n\n        const planillaData = oPlanillaModel.getData();\n        if (!planillaData || !planillaData.VS_PMP1Collection) {\n            console.log(\"No planilla data found\");\n            return;\n        }\n\n        // Obtener números de documentos a eliminar\n        const documentNumbersToDelete = documentsToDelete.map((doc: any) => doc.U_NUMDOC);\n        \n        // Eliminar las líneas de la colección\n        const updatedLines = planillaData.VS_PMP1Collection.filter((line: any) => \n            !documentNumbersToDelete.includes(line.U_NUMDOC)\n        );\n        \n        // Actualizar los datos de la planilla\n        planillaData.VS_PMP1Collection = updatedLines;\n        \n        // Recalcular totales\n        this.recalculatePlanillaTotals(planillaData);\n        \n        // Actualizar el modelo\n        oPlanillaModel.setData(planillaData);\n        oPlanillaModel.refresh(true);\n        \n        // Limpiar selección de tabla\n        const oTable = oView.byId(\"planillaLinesTable\") as any;\n        if (oTable) {\n            oTable.removeSelections();\n        }\n        \n        console.log(\"Líneas seleccionadas eliminadas exitosamente\");\n        MessageToast.show(`${documentsToDelete.length} línea(s) eliminada(s) correctamente`, { duration: 3000 });\n        \n        // Actualizar los documentos disponibles para reflejar el cambio\n        this.updateAlreadyAddedStatus();\n    }\n\n    // ===== MÉTODOS PRIVADOS =====\n    private loadPlanillaById(planillaId: string): void {\n        // Cargar datos de la planilla desde el archivo JSON\n        const planillasUrl = \"./model/mock/planilla-object.json\";\n        \n        try {\n            const oModel = new JSONModel();\n            oModel.loadData(planillasUrl, undefined, false);\n            const oData = oModel.getData();\n            console.log(\"PagosMasivosDetalle.controller - Datos de planilla cargados:\", oData);\n            \n            // Buscar la planilla por ID en el array de planillas (convertir a número para comparación)\n            const planillas = oData.planillas || [];\n            const planillaIdNum = parseInt(planillaId);\n            const planilla = planillas.find((item: any) => item.DocEntry === planillaIdNum);\n            \n            if (planilla) {\n                console.log(\"PagosMasivosDetalle.controller - Planilla encontrada:\", planilla);\n                \n                // Agregar la propiedad isNewPlanilla como false para planillas existentes\n                const planillaWithMode = {\n                    ...planilla,\n                    isNewPlanilla: false\n                };\n                \n                // Crear modelo para la planilla seleccionada\n                const oModelPlanilla = new JSONModel();\n                oModelPlanilla.setData(planillaWithMode);\n                \n                // Asignar el modelo a la vista\n                const oView = this.getView();\n                if (oView) {\n                    oView.setModel(oModelPlanilla, \"planilla\");\n                    console.log(\"PagosMasivosDetalle.controller - Modelo de planilla asignado a la vista\");\n                    \n                    // Cargar también las series\n                    this.pagosMasivosManager.loadSeriesData();\n                    \n                    // Cargar cuentas bancarias para el ComboBox\n                    const cuentasBancariasModel = new JSONModel();\n                    cuentasBancariasModel.loadData(\"./model/mock/cuentas-bancarias.json\", undefined, false);\n                    oView.setModel(cuentasBancariasModel, \"cuentasBancarias\");\n                    \n                    cuentasBancariasModel.attachRequestCompleted(() => {\n                        console.log(\"PagosMasivosDetalle.controller - Cuentas bancarias cargadas para planilla existente\");\n                        // Forzar actualización del modelo de planilla para asegurar que el ComboBox funcione\n                        oModelPlanilla.refresh(true);\n                    });\n                }\n            } else {\n                console.log(\"PagosMasivosDetalle.controller - Planilla no encontrada, cargando datos de respaldo\");\n                this.loadFallbackPlanillaData(planillaId);\n            }\n        } catch (error) {\n            console.error(\"PagosMasivosDetalle.controller - Excepción al cargar datos de planilla:\", error);\n            this.loadFallbackPlanillaData(planillaId);\n        }\n    }\n\n        private loadFallbackPlanillaData(planillaId: string): void {\n        console.log(\"PagosMasivosDetalle.controller - Cargando datos de respaldo para planilla ID:\", planillaId);\n        \n        // Datos de respaldo para mostrar en caso de error\n        const fallbackData = {\n            \"DocEntry\": planillaId,\n            \"DocNum\": parseInt(planillaId),\n            \"isNewPlanilla\": false,\n            \"U_CUENTA\": \"194-1985504-0-94\",\n            \"U_IDBANCO\": \"BCP\",\n            \"U_NMBANCO\": \"BANCO DE CREDITO\",\n            \"U_CCBANCO\": \"1941985504094\",\n            \"U_GLACCOUNT\": \"1041101\",\n            \"U_MONEDA\": \"SOL\",\n            \"U_SERIE\": 24,\n            \"U_ESTADO\": \"E\",\n            \"U_FECHA\": \"2024-03-21T00:00:00Z\",\n            \"U_FECHAP\": \"2024-03-21T00:00:00Z\",\n            \"U_TC\": 3.701,\n            \"U_RETEN\": null,\n            \"U_FECHAV\": null,\n            \"U_IDSN\": null,\n            \"U_NMSN\": null,\n            \"U_GLOSA\": \"PG F/VARIAS\",\n            \"U_TOTAL\": 19516.06,\n            \"U_IDPAGO\": 1977,\n            \"U_SUBTOTAL\": 19516.06,\n            \"U_REF\": null,\n            \"U_NOPBAN\": \"09627515\",\n            \"U_IDSUC\": null,\n            \"U_NMSUC\": null,\n            \"U_FCAJA\": -1,\n            \"U_CONTA\": 0,\n            \"VS_PMP1Collection\": [\n                {\n                    \"DocEntry\": parseInt(planillaId),\n                    \"LineId\": 1,\n                    \"VisOrder\": 1,\n                    \"Object\": \"VS_OPMP\",\n                    \"LogInst\": null,\n                    \"U_CHECK\": \"Y\",\n                    \"U_IDPAGO\": 1971,\n                    \"U_TIPDOC\": \"Factura\",\n                    \"U_IDDOC\": 3617,\n                    \"U_LINDOC\": 0,\n                    \"U_OBJDOC\": \"18\",\n                    \"U_CUODOC\": \"1\",\n                    \"U_IDSN\": \"PL10081644867\",\n                    \"U_NMSN\": \"BUSTAMANTE DAVILA MARIA ELIZABETH\",\n                    \"U_RUC\": \"10081644867\",\n                    \"U_NUMDOC\": \"E001-78\",\n                    \"U_MONDOC\": \"SOL\",\n                    \"U_IMPORTE\": 288,\n                    \"U_SALDO\": 288,\n                    \"U_PAGONETO\": 288,\n                    \"U_PAGLOC\": 288,\n                    \"U_PAGEXT\": 0,\n                    \"U_RETLOC\": 0,\n                    \"U_RETEXT\": 0,\n                    \"U_FVENC\": \"2024-03-15T00:00:00Z\",\n                    \"U_FCONT\": \"2024-03-15T00:00:00Z\",\n                    \"U_FDOCU\": \"2024-03-15T00:00:00Z\",\n                    \"U_CCORRI\": \"19394614129025\",\n                    \"U_CTAINF\": \"BCP\",\n                    \"U_MONINF\": \"SOL\",\n                    \"U_RETCOD\": \"\",\n                    \"U_RETPOR\": 0,\n                    \"U_ESTADO\": \"1\",\n                    \"U_SL\": 288,\n                    \"U_SE\": 0,\n                    \"U_RL\": 0,\n                    \"U_RE\": 0,\n                    \"U_BL\": 0,\n                    \"U_BE\": 0,\n                    \"U_IL\": 288,\n                    \"U_REF2\": \"01E001-78\",\n                    \"U_PAGLOC0\": 0,\n                    \"U_PAGEXT0\": 0,\n                    \"U_RETLOC0\": 0,\n                    \"U_RETEXT0\": 0,\n                    \"U_MPBB\": \"2\"\n                }\n            ]\n        };\n        \n        const oModelPlanilla = new JSONModel();\n        oModelPlanilla.setData(fallbackData);\n        \n        const oView = this.getView();\n        if (oView) {\n            oView.setModel(oModelPlanilla, \"planilla\");\n            console.log(\"PagosMasivosDetalle.controller - Modelo de planilla de respaldo asignado a la vista\");\n            \n            // Cargar también las series\n            this.pagosMasivosManager.loadSeriesData();\n            \n            // Cargar cuentas bancarias para el ComboBox\n            const cuentasBancariasModel = new JSONModel();\n            cuentasBancariasModel.loadData(\"./model/mock/cuentas-bancarias.json\", undefined, false);\n            oView.setModel(cuentasBancariasModel, \"cuentasBancarias\");\n            \n            cuentasBancariasModel.attachRequestCompleted(() => {\n                console.log(\"PagosMasivosDetalle.controller - Cuentas bancarias cargadas para planilla de respaldo\");\n                // Forzar actualización del modelo de planilla para asegurar que el ComboBox funcione\n                oModelPlanilla.refresh(true);\n            });\n        }\n    }\n\n    private checkForDetailNavigation(): void {\n        // Verificar si necesitamos navegar a la página de detalle\n        const oComponent = this.getOwnerComponent() as UIComponent;\n        const oRouter = oComponent.getRouter();\n        \n        // Obtener parámetros de la ruta actual\n        const oRoute = oRouter.getRoute(\"RoutePagosMasivosDetalle\");\n        if (oRoute) {\n            oRoute.attachPatternMatched((oEvent: any) => {\n                const planillaId = oEvent.getParameter(\"arguments\").planillaId;\n                if (planillaId && planillaId !== \"new\") {\n                    console.log(\"PagosMasivosDetalle.controller - Navegando al detalle de planilla:\", planillaId);\n                    this.loadPlanillaById(planillaId);\n                } else if (planillaId === \"new\") {\n                    console.log(\"PagosMasivosDetalle.controller - Creando nueva planilla\");\n                    this.pagosMasivosManager.createNewPlanilla();\n                }\n            });\n        }\n    }\n\n\n\n    public onDocumentDialogAfterOpen(): void {\n        console.log(\"PagosMasivosDetalle.controller - Diálogo abierto, marcando documentos existentes\");\n        \n        const oView = this.getView();\n        if (!oView) {\n            return;\n        }\n\n        // Obtener el modelo de planilla para verificar documentos existentes\n        const oPlanillaModel = oView.getModel(\"planilla\") as JSONModel;\n        const oModel = oView.getModel(\"oModel\") as JSONModel;\n        \n        if (!oPlanillaModel || !oModel) {\n            console.log(\"Modelos no encontrados\");\n            return;\n        }\n        \n        const planillaData = oPlanillaModel.getData();\n        const availableDocuments = oModel.getData();\n        \n        console.log(\"Datos de planilla:\", planillaData);\n        console.log(\"Datos de documentos disponibles:\", availableDocuments);\n        \n        if (!planillaData || !availableDocuments) {\n            console.log(\"No hay datos disponibles\");\n            return;\n        }\n        \n        // Verificar si los documentos están cargados\n        if (!availableDocuments.documents || availableDocuments.documents.length === 0) {\n            console.log(\"Documentos aún no cargados, esperando datos...\");\n            // Esperar a que el modelo se cargue\n            oModel.attachRequestCompleted(() => {\n                setTimeout(() => {\n                    this.markAlreadyAddedDocuments();\n                }, 100);\n            });\n            return;\n        }\n        \n        // Agregar un pequeño retraso para asegurar que los datos estén correctamente vinculados\n        setTimeout(() => {\n            this.markAlreadyAddedDocuments();\n        }, 100);\n    }\n\n    private markAlreadyAddedDocuments(): void {\n        console.log(\"=== INICIO markAlreadyAddedDocuments ===\");\n        const oView = this.getView();\n        if (!oView) {\n            console.log(\"Vista no encontrada\");\n            return;\n        }\n        \n        const oPlanillaModel = oView.getModel(\"planilla\") as JSONModel;\n        const oModel = oView.getModel(\"oModel\") as JSONModel;\n        \n        if (!oPlanillaModel || !oModel) {\n            console.log(\"Modelos no encontrados\");\n            return;\n        }\n        \n        const planillaData = oPlanillaModel.getData();\n        const availableDocuments = oModel.getData();\n        \n        console.log(\"Claves de datos de planilla:\", planillaData ? Object.keys(planillaData) : \"null\");\n        console.log(\"Claves de documentos disponibles:\", availableDocuments ? Object.keys(availableDocuments) : \"null\");\n        \n        if (!planillaData || !availableDocuments || !availableDocuments.documents) {\n            console.log(\"Faltan datos para marcar documentos\");\n            return;\n        }\n        \n        // Verificar si los datos de planilla están correctamente cargados\n        if (!planillaData.VS_PMP1Collection) {\n            console.log(\"VS_PMP1Collection de planilla no encontrada, inicializando como vacía\");\n            planillaData.VS_PMP1Collection = [];\n            oPlanillaModel.setData(planillaData);\n        }\n        \n        // Obtener números de documentos existentes en la planilla\n        const existingDocNums = (planillaData.VS_PMP1Collection || []).map((doc: any) => doc.U_NUMDOC);\n        console.log(\"Documentos existentes en planilla:\", existingDocNums);\n        console.log(\"Cantidad de documentos disponibles:\", availableDocuments.documents.length);\n        console.log(\"Longitud de VS_PMP1Collection de planilla:\", planillaData.VS_PMP1Collection ? planillaData.VS_PMP1Collection.length : 0);\n        \n        // Siempre inicializar alreadyInPlanilla a false primero\n        console.log(\"Inicializando todos los documentos a alreadyInPlanilla = false\");\n        availableDocuments.documents.forEach((doc: any, index: number) => {\n            doc.alreadyInPlanilla = false;\n            console.log(`Documento ${index}: ${doc.DocNum} - alreadyInPlanilla establecido a false`);\n        });\n        \n        // Solo marcar documentos si realmente hay documentos existentes en la planilla\n        if (!planillaData.VS_PMP1Collection || planillaData.VS_PMP1Collection.length === 0) {\n            console.log(\"No hay documentos existentes en planilla, todos los documentos marcados como no agregados\");\n            // Asegurar que todos los documentos estén marcados como no agregados\n            availableDocuments.documents.forEach((doc: any, index: number) => {\n                doc.alreadyInPlanilla = false;\n                console.log(`Documento ${index}: ${doc.DocNum} - alreadyInPlanilla establecido a false (planilla vacía)`);\n            });\n        } else {\n            // Marcar documentos como ya en la planilla\n            let markedCount = 0;\n            availableDocuments.documents.forEach((doc: any, index: number) => {\n                const isAlreadyAdded = existingDocNums.includes(doc.DocNum);\n                doc.alreadyInPlanilla = isAlreadyAdded;\n                console.log(`Documento ${index}: ${doc.DocNum} - verificando contra existentes: ${existingDocNums.join(', ')} - alreadyInPlanilla establecido a ${isAlreadyAdded}`);\n                if (isAlreadyAdded) {\n                    markedCount++;\n                }\n            });\n            console.log(`Marcados ${markedCount} documentos como ya agregados de ${availableDocuments.documents.length} total`);\n        }\n        \n        // Actualizar el modelo\n        console.log(\"Actualizando modelo con datos modificados\");\n        oModel.setData(availableDocuments);\n        console.log(\"=== FIN markAlreadyAddedDocuments ===\");\n    }\n\n\n} "],"mappings":"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","ignoreList":[],"sourceRoot":"controller"}},{"offset":{"line":24,"column":0},"map":{"version":3,"file":"MenuManager.js","names":["MenuManager","constructor","this","oModel","JSONModel","getModel","loadHardcodedMenuData","hardcodedMenuData","selectedKey","navigation","key","text","icon","fixedNavigation","console","log","setData","filterNavigationByRole","userRole","aNavigation","getProperty","aFilteredNavigation","filter","item","setProperty","sSelectedKey","bKeyExists","some","length","getData","refresh","setSelectedKey","getSelectedKey","__exports","__esModule"],"sources":["MenuManager.ts"],"sourcesContent":["import JSONModel from \"sap/ui/model/json/JSONModel\";\r\n\r\n/**\r\n * MenuManager - Handles navigation menu logic\r\n */\r\nexport class MenuManager {\r\n    private oModel: JSONModel;\r\n\r\n    constructor() {\r\n        this.oModel = new JSONModel();\r\n    }\r\n\r\n    public getModel(): JSONModel {\r\n        return this.oModel;\r\n    }\r\n\r\n    public loadHardcodedMenuData(): void {\r\n        const hardcodedMenuData = {\r\n            \"selectedKey\": \"pagosMasivos\",\r\n            \"navigation\": [\r\n                {\r\n                    \"key\": \"configuracion\",\r\n                    \"text\": \"Configuración\",\r\n                    \"icon\": \"sap-icon://settings\"\r\n                },\r\n                {\r\n                    \"key\": \"pagosMasivos\",\r\n                    \"text\": \"Pagos Masivos\",\r\n                    \"icon\": \"sap-icon://money-bills\"\r\n                },\r\n                {\r\n                    \"key\": \"detracciones\",\r\n                    \"text\": \"Detracciones\",\r\n                    \"icon\": \"sap-icon://document\"\r\n                }\r\n            ],\r\n            \"fixedNavigation\": []\r\n        };\r\n        \r\n        console.log(\"Cargando datos de menú hardcodeados:\", hardcodedMenuData);\r\n        this.oModel.setData(hardcodedMenuData);\r\n    }\r\n\r\n    public filterNavigationByRole(userRole: string): void {\r\n        console.log(\"Filtrando navegación por rol:\", userRole);\r\n        \r\n        const aNavigation = this.oModel.getProperty(\"/navigation\") || [];\r\n        console.log(\"Navegación original:\", aNavigation);\r\n        \r\n        const aFilteredNavigation = aNavigation.filter((item: any) => {\r\n            if (userRole === 'admin') return true;\r\n            if (item.key === 'configuracion') return false;\r\n            return true;\r\n        });\r\n        console.log(\"Navegación filtrada:\", aFilteredNavigation);\r\n        \r\n        this.oModel.setProperty(\"/navigation\", aFilteredNavigation);\r\n        const sSelectedKey = this.oModel.getProperty(\"/selectedKey\");\r\n        const bKeyExists = aFilteredNavigation.some((item: any) => item.key === sSelectedKey);\r\n        if (!bKeyExists && aFilteredNavigation.length > 0) {\r\n            this.oModel.setProperty(\"/selectedKey\", aFilteredNavigation[0].key);\r\n        }\r\n        \r\n        console.log(\"Datos finales del modelo:\", this.oModel.getData());\r\n        \r\n        // Forzar actualización de la vista\r\n        this.oModel.refresh(true);\r\n        console.log(\"Modelo de menú actualizado\");\r\n    }\r\n\r\n    public setSelectedKey(key: string): void {\r\n        this.oModel.setProperty(\"/selectedKey\", key);\r\n    }\r\n\r\n    public getSelectedKey(): string {\r\n        return this.oModel.getProperty(\"/selectedKey\");\r\n    }\r\n} "],"mappings":"AAAA,uEAKO,MAAMA,EAGTC,cACIC,KAAKC,OAAS,IAAIC,CACtB,CAEOC,WACH,OAAOH,KAAKC,MAChB,CAEOG,wBACH,MAAMC,EAAoB,CACtBC,YAAe,eACfC,WAAc,CACV,CACIC,IAAO,gBACPC,KAAQ,gBACRC,KAAQ,uBAEZ,CACIF,IAAO,eACPC,KAAQ,gBACRC,KAAQ,0BAEZ,CACIF,IAAO,eACPC,KAAQ,eACRC,KAAQ,wBAGhBC,gBAAmB,IAGvBC,QAAQC,IAAI,uCAAwCR,GACpDL,KAAKC,OAAOa,QAAQT,EACxB,CAEOU,uBAAuBC,GAC1BJ,QAAQC,IAAI,gCAAiCG,GAE7C,MAAMC,EAAcjB,KAAKC,OAAOiB,YAAY,gBAAkB,GAC9DN,QAAQC,IAAI,uBAAwBI,GAEpC,MAAME,EAAsBF,EAAYG,OAAQC,IAC5C,GAAIL,IAAa,QAAS,OAAO,KACjC,GAAIK,EAAKb,MAAQ,gBAAiB,OAAO,MACzC,OAAO,OAEXI,QAAQC,IAAI,uBAAwBM,GAEpCnB,KAAKC,OAAOqB,YAAY,cAAeH,GACvC,MAAMI,EAAevB,KAAKC,OAAOiB,YAAY,gBAC7C,MAAMM,EAAaL,EAAoBM,KAAMJ,GAAcA,EAAKb,MAAQe,GACxE,IAAKC,GAAcL,EAAoBO,OAAS,EAAG,CAC/C1B,KAAKC,OAAOqB,YAAY,eAAgBH,EAAoB,GAAGX,IACnE,CAEAI,QAAQC,IAAI,4BAA6Bb,KAAKC,OAAO0B,WAGrD3B,KAAKC,OAAO2B,QAAQ,MACpBhB,QAAQC,IAAI,6BAChB,CAEOgB,eAAerB,GAClBR,KAAKC,OAAOqB,YAAY,eAAgBd,EAC5C,CAEOsB,iBACH,OAAO9B,KAAKC,OAAOiB,YAAY,eACnC,EACH,IAAAa,EAAA,CAAAC,WAAA,MAAAD,EAAAjC,cAAA,OAAAiC,CAAA","ignoreList":[],"sourceRoot":"controller/modules"}},{"offset":{"line":27,"column":0},"map":{"version":3,"file":"NavigationManager.js","names":["NavigationManager","constructor","controller","this","navigateToPage","sKey","currentUser","console","log","role","MessageBox","error","oComponent","getOwnerComponent","oRouter","getRouter","routeMap","configuracion","pagosMasivos","detracciones","routeName","navTo","onSideNavigationItemSelect","oEvent","oView","getView","oModel","getModel","selectedKey","getProperty","userManager","getCurrentUser","onSideNavItemSelect","onMenuButtonPress","toolPage","byId","setSideExpanded","getSideExpanded","__exports","__esModule"],"sources":["NavigationManager.ts"],"sourcesContent":["import MessageBox from \"sap/m/MessageBox\";\nimport Event from \"sap/ui/base/Event\";\nimport type UIComponent from \"sap/ui/core/UIComponent\";\n\n/**\n * NavigationManager - Handles page navigation logic\n */\nexport class NavigationManager {\n    private controller: any;\n\n    constructor(controller: any) {\n        this.controller = controller;\n    }\n\n    public navigateToPage(sKey: string, currentUser: any): void {\n        console.log(\"Navegando a la clave:\", sKey);\n        \n        if (sKey === 'configuracion' && currentUser?.role !== 'admin') {\n            MessageBox.error(\"No tiene permisos para acceder a la configuración\");\n            return;\n        }\n        \n        const oComponent = this.controller.getOwnerComponent() as UIComponent;\n        const oRouter = oComponent.getRouter();\n        \n        // Map page keys to route names\n        const routeMap: { [key: string]: string } = {\n            'configuracion': 'RouteConfiguracion',\n            'pagosMasivos': 'RoutePagosMasivos',\n            'detracciones': 'RouteDetracciones'\n        };\n        \n        const routeName = routeMap[sKey];\n        if (routeName) {\n            console.log(\"Navegando a la ruta:\", routeName);\n            oRouter.navTo(routeName);\n        } else {\n            console.error(\"Ruta no encontrada para la clave:\", sKey);\n        }\n    }\n\n    public onSideNavigationItemSelect(oEvent: Event<any>): void {\n        console.log(\"Evento de navegación activado:\", oEvent);\n        \n        // Para TNT SideNavigation, necesitamos obtener la clave seleccionada del modelo\n        const oView = this.controller.getView();\n        if (!oView) {\n            console.error(\"No se encontró la vista\");\n            return;\n        }\n        \n        const oModel = oView.getModel(\"menuModel\");\n        if (!oModel) {\n            console.error(\"No se encontró menuModel\");\n            return;\n        }\n        \n        // Obtener la clave seleccionada del modelo\n        const selectedKey = oModel.getProperty(\"/selectedKey\");\n        console.log(\"Clave seleccionada del modelo:\", selectedKey);\n        \n        if (selectedKey) {\n            this.navigateToPage(selectedKey, this.controller.userManager?.getCurrentUser());\n        }\n    }\n\n    public onSideNavItemSelect(oEvent: any): void {\n        this.onSideNavigationItemSelect(oEvent);\n    }\n\n    public onMenuButtonPress(): void {\n        const toolPage = this.controller.byId(\"toolPage2\") as any;\n        if (toolPage && typeof toolPage.setSideExpanded === \"function\" && typeof toolPage.getSideExpanded === \"function\") {\n            toolPage.setSideExpanded(!toolPage.getSideExpanded());\n        }\n    }\n} "],"mappings":"AAAA,4DAOO,MAAMA,EAGTC,YAAYC,GACRC,KAAKD,WAAaA,CACtB,CAEOE,eAAeC,EAAcC,GAChCC,QAAQC,IAAI,wBAAyBH,GAErC,GAAIA,IAAS,iBAAmBC,GAAaG,OAAS,QAAS,CAC3DC,EAAWC,MAAM,qDACjB,MACJ,CAEA,MAAMC,EAAaT,KAAKD,WAAWW,oBACnC,MAAMC,EAAUF,EAAWG,YAG3B,MAAMC,EAAsC,CACxCC,cAAiB,qBACjBC,aAAgB,oBAChBC,aAAgB,qBAGpB,MAAMC,EAAYJ,EAASX,GAC3B,GAAIe,EAAW,CACXb,QAAQC,IAAI,uBAAwBY,GACpCN,EAAQO,MAAMD,EAClB,KAAO,CACHb,QAAQI,MAAM,oCAAqCN,EACvD,CACJ,CAEOiB,2BAA2BC,GAC9BhB,QAAQC,IAAI,iCAAkCe,GAG9C,MAAMC,EAAQrB,KAAKD,WAAWuB,UAC9B,IAAKD,EAAO,CACRjB,QAAQI,MAAM,2BACd,MACJ,CAEA,MAAMe,EAASF,EAAMG,SAAS,aAC9B,IAAKD,EAAQ,CACTnB,QAAQI,MAAM,4BACd,MACJ,CAGA,MAAMiB,EAAcF,EAAOG,YAAY,gBACvCtB,QAAQC,IAAI,iCAAkCoB,GAE9C,GAAIA,EAAa,CACbzB,KAAKC,eAAewB,EAAazB,KAAKD,WAAW4B,aAAaC,iBAClE,CACJ,CAEOC,oBAAoBT,GACvBpB,KAAKmB,2BAA2BC,EACpC,CAEOU,oBACH,MAAMC,EAAW/B,KAAKD,WAAWiC,KAAK,aACtC,GAAID,UAAmBA,EAASE,kBAAoB,mBAAqBF,EAASG,kBAAoB,WAAY,CAC9GH,EAASE,iBAAiBF,EAASG,kBACvC,CACJ,EACH,IAAAC,EAAA,CAAAC,WAAA,MAAAD,EAAAtC,oBAAA,OAAAsC,CAAA","ignoreList":[],"sourceRoot":"controller/modules"}},{"offset":{"line":30,"column":0},"map":{"version":3,"file":"PagosMasivosManager.js","names":["PagosMasivosManager","constructor","this","oOriginalModel","JSONModel","oFilteredModel","initializeModels","console","log","planillasUrl","loadData","undefined","getData","error","loadFallbackData","sortPlanillasByDocEntry","setData","getFilteredModel","getOriginalModel","data","PlanillasCollection","Array","isArray","sort","a","b","docEntryA","parseInt","DocEntry","docEntryB","fallbackData","Id","Name","DateOfSale","Status","Quantity","Price","CurrencyCode","Bank","onDateRangeChange","oEvent","getParameter","applyFilters","onStatusChange","onBancoChange","onClearFilters","dateRangeFilter","getControlById","setValue","statusFilter","setSelectedKey","bancoFilter","MessageToast","show","duration","onNuevaPlanillaButtonPress","createNewPlanilla","navigateToDetailPage","newDocEntry","generateNewDocEntry","newPlanillaData","DocNum","Period","Date","getMonth","Instance","Series","Handwrtten","RequestStatus","Creator","Remark","Canceled","Object","LogInst","UserSign","Transfered","CreateDate","toISOString","split","CreateTime","toTimeString","UpdateDate","UpdateTime","DataSource","U_CUENTA","U_IDBANCO","U_NMBANCO","U_CCBANCO","U_MONEDA","U_GLACCOUNT","U_SERIE","U_ESTADO","U_FECHA","U_FECHAP","U_TC","U_RETEN","U_FECHAV","U_IDSN","U_NMSN","U_GLOSA","U_TOTAL","U_IDPAGO","U_SUBTOTAL","U_REF","U_NOPBAN","U_IDSUC","U_NMSUC","U_FCAJA","U_CONTA","VS_PMP1Collection","isNewPlanilla","oModelPlanilla","oView","getController","getView","setModel","loadSeriesData","now","timestamp","getTime","Math","floor","onSerieChange","getParameters","selectedItem","selectedKey","getKey","newValue","key","planillaModel","getModel","getProperty","setProperty","refresh","onGuardarPlanilla","planillaData","createPlanillaInMockDatabase","updatePlanillaInMockDatabase","newPlanilla","planillaDetailUrl","fetch","then","response","json","planillaToSave","planillas","push","simulateServerCreate","navigateBackToList","catch","MessageBox","updatedPlanilla","planillaIndex","findIndex","item","simplifiedData","simulateServerUpdate","information","JSON","stringify","title","details","onFechaEjecucionChange","selectedDate","datePicker","getSource","originalValue","preventDefault","dateStr","dateParts","length","day","monthStr","toLowerCase","year","monthMap","ene","feb","mar","abr","may","jun","jul","ago","sep","oct","nov","dic","month","isNaN","date","tiposCambioUrl","exchangeRate","ExchangeRates","find","rate","Currency","startsWith","Rate","formattedOriginalValue","originalDate","toLocaleDateString","message","onDownloadPlanilla","oModel","jsonData","substring","blob","Blob","type","size","url","URL","createObjectURL","link","document","createElement","href","download","style","display","body","appendChild","click","setTimeout","removeChild","revokeObjectURL","newWindow","window","open","write","fallbackError","onListItemPress","oItem","oContext","getBindingContext","getObject","list","items","getItems","i","model","handlePlanillaSelection","oPlanilla","planillaId","loadPlanillaById","oComponent","getOwnerComponent","oRouter","getRouter","navTo","oDetailModel","oData","planillaIdNum","planilla","forEach","line","index","LineId","NumAtCard","CardCode","CardName","DocDate","DocDueDate","TaxDate","TaxCode","TaxAmount","TaxAmountFC","DocTotal","DocTotalFC","WithholdingTax","loadFallbackPlanillaData","VisOrder","U_CHECK","U_TIPDOC","U_IDDOC","U_LINDOC","U_OBJDOC","U_CUODOC","U_RUC","U_NUMDOC","U_MONDOC","U_IMPORTE","U_SALDO","U_PAGONETO","U_PAGLOC","U_PAGEXT","U_RETLOC","U_RETEXT","U_FVENC","U_FCONT","U_FDOCU","U_CCORRI","U_CTAINF","U_MONINF","U_RETCOD","U_RETPOR","U_SL","U_SE","U_RL","U_RE","U_BL","U_BE","U_IL","U_REF2","U_PAGLOC0","U_PAGEXT0","U_RETLOC0","U_RETEXT0","U_MPBB","seriesUrl","status","oModelSeries","aFilters","getValue","dateRangeValue","includes","startDateStr","endDateStr","startDate","path","operator","value","endDate","getSelectedKey","originalData","filteredData","filterData","filters","filteredItems","filter","every","filterValue","itemDate","controlId","setController","controller","control","byId","onAddDocumentos","loadAvailableDocuments","dialog","documentsUrl","currentLines","documents","slice","doc","selected","alreadyInPlanilla","isAlreadyAdded","some","matches","modelData","selectedTotal","selectedCount","existingCount","oModelDocuments","onDocumentSearch","searchTerm","documentsModel","filteredDocuments","onDocumentBankFilterChange","selectedBank","BankCode","onDocumentSelectionChange","table","selectedItems","getSelectedItems","context","selectedDocuments","reduce","sum","Balance","selectedButExisting","onDocumentDialogCancel","close","onDocumentDialogConfirm","validDocuments","isAlreadyInPlanilla","duplicateCount","addDocumentsToPlanilla","newLines","map","lineId","DueDate","Total","AccountCode","updatedLines","recalculatePlanillaTotals","lines","total","reten","subtotal","__exports","__esModule"],"sources":["PagosMasivosManager.ts"],"sourcesContent":["import JSONModel from \"sap/ui/model/json/JSONModel\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport type UIComponent from \"sap/ui/core/UIComponent\";\n\n/**\n * PagosMasivosManager - Handles all PagosMasivos-related logic\n */\nexport class PagosMasivosManager {\n    private oOriginalModel: JSONModel;\n    private oFilteredModel: JSONModel;\n    private controller: any;\n\n    constructor() {\n        this.oOriginalModel = new JSONModel();\n        this.oFilteredModel = new JSONModel();\n    }\n\n    public initializeModels(): void {\n        console.log(\"PagosMasivosManager - Initializing models...\");\n        // Cargar datos originales\n        const planillasUrl = \"./model/mock/planillas.json\";\n        \n        try {\n            this.oOriginalModel.loadData(planillasUrl, undefined, false);\n            console.log(\"PagosMasivosManager - Data loaded from URL:\", this.oOriginalModel.getData());\n        } catch (error) {\n            console.log(\"PagosMasivosManager - Error loading data, using fallback:\", error);\n            this.loadFallbackData();\n            return;\n        }\n\n        // Ordenar los datos por DocEntry descendente\n        this.sortPlanillasByDocEntry();\n\n        // Crear modelo filtrado\n        this.oFilteredModel.setData(this.oOriginalModel.getData());\n        console.log(\"PagosMasivosManager - Filtered model data:\", this.oFilteredModel.getData());\n    }\n\n    public getFilteredModel(): JSONModel {\n        return this.oFilteredModel;\n    }\n\n    public getOriginalModel(): JSONModel {\n        return this.oOriginalModel;\n    }\n\n    private sortPlanillasByDocEntry(): void {\n        const data = this.oOriginalModel.getData();\n        if (data && data.PlanillasCollection && Array.isArray(data.PlanillasCollection)) {\n            // Ordenar por DocEntry descendente\n            data.PlanillasCollection.sort((a: any, b: any) => {\n                const docEntryA = parseInt(a.DocEntry) || 0;\n                const docEntryB = parseInt(b.DocEntry) || 0;\n                return docEntryB - docEntryA; // Descendente (mayor a menor)\n            });\n            \n            // Actualizar el modelo con los datos ordenados\n            this.oOriginalModel.setData(data);\n            console.log(\"PagosMasivosManager - Planillas ordenadas por DocEntry descendente\");\n        }\n    }\n\n    private loadFallbackData(): void {\n        const fallbackData = {\n            \"PlanillasCollection\": [\n                {\n                    \"Id\": \"HT-1000\",\n                    \"Name\": \"Planilla Pago Proveedor 10003\",\n                    \"DateOfSale\": \"2025-03-26\",\n                    \"Status\": \"Ejecutada\",\n                    \"Quantity\": 10,\n                    \"Price\": 1000.34,\n                    \"CurrencyCode\": \"SOL\",\n                    \"Bank\": \"BCP\"\n                },\n                {\n                    \"Id\": \"HT-1001\",\n                    \"Name\": \"Planilla Pago Proveedor 10004\",\n                    \"DateOfSale\": \"2024-04-17\",\n                    \"Status\": \"Creada\",\n                    \"Quantity\": 20,\n                    \"Price\": 1249,\n                    \"CurrencyCode\": \"USD\",\n                    \"Bank\": \"BBVA\"\n                },\n                {\n                    \"Id\": \"HT-1003\",\n                    \"Name\": \"Planilla Pago Proveedor 10005\",\n                    \"DateOfSale\": \"2024-04-09\",\n                    \"Status\": \"Anulada\",\n                    \"Quantity\": 15,\n                    \"Price\": 1650,\n                    \"CurrencyCode\": \"SOL\",\n                    \"Bank\": \"Interbank\"\n                },\n                {\n                    \"Id\": \"HT-1007\",\n                    \"Name\": \"Planilla Pago Proveedor 10006\",\n                    \"DateOfSale\": \"2024-05-17\",\n                    \"Status\": \"Creada\",\n                    \"Quantity\": 15,\n                    \"Price\": 299,\n                    \"CurrencyCode\": \"USD\",\n                    \"Bank\": \"Scotiabank\"\n                },\n                {\n                    \"Id\": \"HT-1010\",\n                    \"Name\": \"Planilla Pago Proveedor 10007\",\n                    \"DateOfSale\": \"2024-02-22\",\n                    \"Status\": \"Ejecutada\",\n                    \"Quantity\": 16,\n                    \"Price\": 1999,\n                    \"CurrencyCode\": \"SOL\",\n                    \"Bank\": \"BCP\"\n                },\n                {\n                    \"Id\": \"HT-1011\",\n                    \"Name\": \"Planilla Pago Proveedor 10008\",\n                    \"DateOfSale\": \"2024-03-15\",\n                    \"Status\": \"Creada\",\n                    \"Quantity\": 12,\n                    \"Price\": 850,\n                    \"CurrencyCode\": \"SOL\",\n                    \"Bank\": \"BBVA\"\n                },\n                {\n                    \"Id\": \"HT-1012\",\n                    \"Name\": \"Planilla Pago Proveedor 10009\",\n                    \"DateOfSale\": \"2024-06-10\",\n                    \"Status\": \"Ejecutada\",\n                    \"Quantity\": 8,\n                    \"Price\": 1200,\n                    \"CurrencyCode\": \"USD\",\n                    \"Bank\": \"Interbank\"\n                },\n                {\n                    \"Id\": \"HT-1013\",\n                    \"Name\": \"Planilla Pago Proveedor 10010\",\n                    \"DateOfSale\": \"2024-07-22\",\n                    \"Status\": \"Anulada\",\n                    \"Quantity\": 25,\n                    \"Price\": 2100,\n                    \"CurrencyCode\": \"SOL\",\n                    \"Bank\": \"Scotiabank\"\n                },\n                {\n                    \"Id\": \"HT-1014\",\n                    \"Name\": \"Planilla Pago Proveedor 10011\",\n                    \"DateOfSale\": \"2024-08-05\",\n                    \"Status\": \"Creada\",\n                    \"Quantity\": 18,\n                    \"Price\": 950,\n                    \"CurrencyCode\": \"BCP\",\n                    \"Bank\": \"BCP\"\n                },\n                {\n                    \"Id\": \"HT-1015\",\n                    \"Name\": \"Planilla Pago Proveedor 10012\",\n                    \"DateOfSale\": \"2024-09-12\",\n                    \"Status\": \"Ejecutada\",\n                    \"Quantity\": 22,\n                    \"Price\": 1750,\n                    \"CurrencyCode\": \"USD\",\n                    \"Bank\": \"BBVA\"\n                }\n            ]\n        };\n        \n        this.oOriginalModel.setData(fallbackData);\n        this.oFilteredModel.setData(fallbackData);\n    }\n\n    // Manejadores de eventos para PagosMasivos\n    public onDateRangeChange(oEvent: any): void {\n        console.log(\"PagosMasivos - Rango de fechas cambiado:\", oEvent.getParameter(\"value\"));\n        this.applyFilters();\n    }\n\n    public onStatusChange(oEvent: any): void {\n        this.applyFilters();\n    }\n\n    public onBancoChange(oEvent: any): void {\n        this.applyFilters();\n    }\n\n    public onClearFilters(): void {\n        // Limpiar filtro de rango de fechas\n        const dateRangeFilter = this.getControlById(\"pagosMasivosDateRangeFilter\");\n        if (dateRangeFilter) {\n            dateRangeFilter.setValue(\"\");\n        }\n        \n        // Limpiar filtro de estado\n        const statusFilter = this.getControlById(\"pagosMasivosStatusFilter\");\n        if (statusFilter) {\n            statusFilter.setSelectedKey(\"\");\n        }\n\n        // Limpiar filtro de banco\n        const bancoFilter = this.getControlById(\"pagosMasivosBancoFilter\");\n        if (bancoFilter) {\n            bancoFilter.setSelectedKey(\"\");\n        }\n\n        // Restablecer datos originales\n        this.oFilteredModel.setData(this.oOriginalModel.getData());\n        \n        MessageToast.show(\"Filtros limpiados desde Pagos Masivos Controller\", { duration: 2000 });\n    }\n\n    public onNuevaPlanillaButtonPress(): void {\n        console.log(\"PagosMasivosManager - onNuevaPlanillaButtonPress triggered!\");\n        \n        // Crear una nueva planilla con datos por defecto\n        this.createNewPlanilla();\n        \n        // Navegar a la página de detalle en modo creación\n        this.navigateToDetailPage();\n    }\n\n    public createNewPlanilla(): void {\n        console.log(\"PagosMasivosManager - Creating new planilla...\");\n        \n        // Generar un nuevo DocEntry (en un entorno real, esto vendría del backend)\n        const newDocEntry = this.generateNewDocEntry();\n        \n\n        \n        // Crear datos de planilla por defecto\n        const newPlanillaData = {\n            \"DocEntry\": newDocEntry,\n            \"DocNum\": newDocEntry,\n            \"Period\": new Date().getMonth() + 1,\n            \"Instance\": 0,\n            \"Series\": -1,\n            \"Handwrtten\": \"N\",\n            \"Status\": \"O\",\n            \"RequestStatus\": \"W\",\n            \"Creator\": \"manager\",\n            \"Remark\": null,\n            \"Canceled\": \"N\",\n            \"Object\": \"VS_OPMP\",\n            \"LogInst\": null,\n            \"UserSign\": 1,\n            \"Transfered\": \"N\",\n            \"CreateDate\": new Date().toISOString().split('T')[0] + \"T00:00:00Z\",\n            \"CreateTime\": new Date().toTimeString().split(' ')[0],\n            \"UpdateDate\": new Date().toISOString().split('T')[0] + \"T00:00:00Z\",\n            \"UpdateTime\": new Date().toTimeString().split(' ')[0],\n            \"DataSource\": \"I\",\n            \"U_CUENTA\": null,\n            \"U_IDBANCO\": null,\n            \"U_NMBANCO\": null,\n            \"U_CCBANCO\": null,\n            \"U_MONEDA\": null,\n            \"U_GLACCOUNT\": null,\n            \"U_SERIE\": null,\n            \"U_ESTADO\": \"C\", // Creada\n            \"U_FECHA\": new Date().toISOString().split('T')[0] + \"T00:00:00Z\",\n            \"U_FECHAP\": null,\n            \"U_TC\": null,\n            \"U_RETEN\": null,\n            \"U_FECHAV\": null,\n            \"U_IDSN\": null,\n            \"U_NMSN\": null,\n            \"U_GLOSA\": \"Nueva planilla de pagos masivos\",\n            \"U_TOTAL\": 0.0,\n            \"U_IDPAGO\": null,\n            \"U_SUBTOTAL\": 0.0,\n            \"U_REF\": null,\n            \"U_NOPBAN\": null,\n            \"U_IDSUC\": null,\n            \"U_NMSUC\": null,\n            \"U_FCAJA\": -1,\n            \"U_CONTA\": 0,\n            \"VS_PMP1Collection\": [],\n            \"isNewPlanilla\": true // Indicador para identificar que es una nueva planilla\n        };\n        \n        console.log(\"PagosMasivosManager - New planilla data created:\", newPlanillaData);\n        \n        // Crear modelo para la nueva planilla\n        const oModelPlanilla = new JSONModel();\n        oModelPlanilla.setData(newPlanillaData);\n        \n        // Asignar el modelo a la vista\n        const oView = this.getController().getView();\n        if (oView) {\n            oView.setModel(oModelPlanilla, \"planilla\");\n            console.log(\"PagosMasivosManager - New planilla model assigned to view\");\n            \n            // Cargar las series para el ComboBox\n            this.loadSeriesData();\n        }\n    }\n\n    private generateNewDocEntry(): number {\n        // En un entorno real, esto vendría del backend\n        // Por ahora, generamos un número basado en la fecha actual\n        const now = new Date();\n        const timestamp = now.getTime();\n        return Math.floor(timestamp / 1000) % 10000; // Número de 4 dígitos\n    }\n\n    public onSerieChange(oEvent: any): void {\n        console.log(\"PagosMasivosManager - onSerieChange triggered\");\n        console.log(\"PagosMasivosManager - Event parameters:\", oEvent.getParameters());\n        \n        const selectedItem = oEvent.getParameter(\"selectedItem\");\n        const selectedKey = oEvent.getParameter(\"selectedItem\")?.getKey();\n        const newValue = oEvent.getParameter(\"newValue\");\n        \n        console.log(\"PagosMasivosManager - Selected item:\", selectedItem);\n        console.log(\"PagosMasivosManager - Selected key:\", selectedKey);\n        console.log(\"PagosMasivosManager - New value:\", newValue);\n        \n        if (!selectedItem) {\n            console.log(\"No se seleccionó ningún item\");\n            return;\n        }\n        \n        const key = selectedItem.getKey();\n        console.log(\"PagosMasivosManager - Serie seleccionada (key):\", key);\n        \n        // Actualizar el modelo con la serie seleccionada\n        const planillaModel = this.getController().getView().getModel(\"planilla\");\n        if (planillaModel) {\n            console.log(\"PagosMasivosManager - Current U_SERIE value:\", planillaModel.getProperty(\"/U_SERIE\"));\n            planillaModel.setProperty(\"/U_SERIE\", key);\n            console.log(\"PagosMasivosManager - Updated U_SERIE value:\", planillaModel.getProperty(\"/U_SERIE\"));\n            \n            // Forzar la actualización del modelo\n            planillaModel.refresh(true);\n        } else {\n            console.error(\"PagosMasivosManager - Planilla model not found\");\n        }\n    }\n\n    public onGuardarPlanilla(): void {\n        console.log(\"PagosMasivosManager - Guardando planilla...\");\n        \n        const oView = this.getController().getView();\n        if (!oView) {\n            console.error(\"View not found\");\n            return;\n        }\n\n        const planillaModel = oView.getModel(\"planilla\");\n        if (!planillaModel) {\n            console.error(\"Planilla model not found\");\n            return;\n        }\n\n        const planillaData = planillaModel.getData();\n        console.log(\"Datos de la planilla a guardar:\", planillaData);\n\n        // Verificar si es una nueva planilla\n        if (planillaData.isNewPlanilla) {\n            this.createPlanillaInMockDatabase(planillaData);\n        } else {\n            this.updatePlanillaInMockDatabase(planillaData);\n        }\n    }\n\n    private createPlanillaInMockDatabase(newPlanilla: any): void {\n        // Cargar el archivo JSON actual\n        const planillaDetailUrl = \"./model/mock/planilla-object.json\";\n        \n        fetch(planillaDetailUrl)\n            .then(response => response.json())\n            .then(data => {\n                // Remover el indicador isNewPlanilla\n                const { isNewPlanilla, ...planillaToSave } = newPlanilla;\n                \n                // Agregar la nueva planilla al array\n                data.planillas.push(planillaToSave);\n                \n                console.log(\"Nueva planilla agregada al mock database:\", planillaToSave);\n\n                // Simular envío al servidor\n                this.simulateServerCreate(planillaToSave);\n\n                // Mostrar mensaje de éxito\n                MessageToast.show(\"Planilla creada exitosamente\", { duration: 3000 });\n                \n                // Navegar de vuelta a la lista\n                this.navigateBackToList();\n            })\n            .catch(error => {\n                console.error(\"Error al crear la planilla:\", error);\n                MessageBox.error(\"Error al crear la planilla\");\n            });\n    }\n\n    private updatePlanillaInMockDatabase(updatedPlanilla: any): void {\n        // Cargar el archivo JSON actual\n        const planillaDetailUrl = \"./model/mock/planilla-object.json\";\n        \n        fetch(planillaDetailUrl)\n            .then(response => response.json())\n            .then(data => {\n                // Buscar la planilla por DocEntry\n                const planillas = data.planillas || [];\n                const planillaIndex = planillas.findIndex((item: any) => \n                    item.DocEntry === updatedPlanilla.DocEntry\n                );\n\n                console.log(\"Planilla index:\", planillaIndex);\n\n                if (planillaIndex !== -1) {\n                    // Actualizar la planilla existente\n                    planillas[planillaIndex] = {\n                        ...planillas[planillaIndex],\n                        ...updatedPlanilla,\n                        \"UpdateDate\": new Date().toISOString().split('T')[0] + \"T00:00:00Z\",\n                        \"UpdateTime\": new Date().toTimeString().split(' ')[0]\n                    };\n\n                    console.log(\"Planilla actualizada en el mock database:\", planillas[planillaIndex]);\n\n                    // Simular envío al servidor (en un entorno real, esto será una llamada API al backend) \n                    // solo enviamos la data necesaria para evitar sobrecarga de datos\n                    const simplifiedData = {\n                        \"DocEntry\": planillas[planillaIndex].DocEntry,\n                        \"U_SERIE\": planillas[planillaIndex].U_SERIE,\n                        \"U_FECHAP\": planillas[planillaIndex].U_FECHAP,\n                        \"U_NOPBAN\": planillas[planillaIndex].U_NOPBAN\n                    }\n\n                    this.simulateServerUpdate(simplifiedData);\n\n                    // Mostrar mensaje de éxito\n                    MessageToast.show(\"Planilla guardada exitosamente\", { duration: 3000 });\n                } else {\n                    console.error(\"Planilla no encontrada en el mock database\");\n                    MessageBox.error(\"Error: No se pudo encontrar la planilla para actualizar\");\n                }\n            })\n            .catch(error => {\n                console.error(\"Error al cargar el mock database:\", error);\n                MessageBox.error(\"Error al cargar los datos de la planilla\");\n            });\n    }\n\n    private simulateServerUpdate(data: any): void {\n        // En un entorno real, aquí haríamos una llamada API como:\n        // fetch('/api/planillas', {\n        //     method: 'PUT', PUT PARA ACTUALIZAR LÍNEAS EN CASO SE HAYA MODIFICADO LA CANTIDAD DE LÍNEAS\n        //     headers: { 'Content-Type': 'application/json' },\n        //     body: JSON.stringify(data)\n        // });\n\n        // Mostrar el payload en un MessageBox para texto más largo\n        MessageBox.information(\"Backend POST/EjecutarPlanilla - Payload: \" + JSON.stringify(data, null, 2), {\n            title: \"Datos enviados al backend\",\n            details: \"Esta información se enviaría al servidor en un entorno real\"\n        });\n\n        console.log(\"Simulando actualización en el servidor...\");\n        console.log(\"Datos que se enviarían al servidor:\", data);\n\n    }\n\n    private simulateServerCreate(data: any): void {\n        // En un entorno real, aquí haríamos una llamada API como:\n        // fetch('/api/planillas', {\n        //     method: 'POST',\n        //     headers: { 'Content-Type': 'application/json' },\n        //     body: JSON.stringify(data)\n        // });\n\n        // Mostrar el payload en un MessageBox para texto más largo\n        MessageBox.information(\"Backend POST/CrearPlanilla - Payload: \" + JSON.stringify(data, null, 2), {\n            title: \"Datos enviados al backend\",\n            details: \"Esta información se enviaría al servidor en un entorno real\"\n        });\n\n        console.log(\"Simulando creación en el servidor...\");\n        console.log(\"Datos que se enviarían al servidor:\", data);\n    }\n\n    public onFechaEjecucionChange(oEvent: any): void {\n        const selectedDate = oEvent.getParameter(\"value\");\n        console.log(\"Fecha de ejecución seleccionada:\", selectedDate);\n        \n        if (!selectedDate) {\n            return;\n        }\n\n        // Obtener el valor original antes del cambio\n        const datePicker = oEvent.getSource();\n        const originalValue = this.getController().getView().getModel(\"planilla\").getProperty(\"/U_FECHAP\");\n        console.log(\"Valor original de la fecha:\", originalValue);\n\n        // Prevenir que el modelo se actualice automáticamente\n        oEvent.preventDefault();\n\n        // Formatear la fecha para buscar en el JSON\n        let dateStr: string;\n        if (selectedDate instanceof Date) {\n            dateStr = selectedDate.toISOString().split('T')[0]; // Obtener solo la parte de la fecha (YYYY-MM-DD)\n        } else if (typeof selectedDate === 'string') {\n            // Si es un string, necesitamos convertir el formato localizado a ISO\n            try {\n                // Parsear el formato \"7 ago 2025\" manualmente\n                const dateParts = selectedDate.split(' ');\n                if (dateParts.length === 3) {\n                    const day = parseInt(dateParts[0]);\n                    const monthStr = dateParts[1].toLowerCase();\n                    const year = parseInt(dateParts[2]);\n                    \n                    // Mapeo de meses en español\n                    const monthMap: { [key: string]: number } = {\n                        'ene': 0, 'feb': 1, 'mar': 2, 'abr': 3, 'may': 4, 'jun': 5,\n                        'jul': 6, 'ago': 7, 'sep': 8, 'oct': 9, 'nov': 10, 'dic': 11\n                    };\n                    \n                    const month = monthMap[monthStr];\n                    if (month !== undefined && !isNaN(day) && !isNaN(year)) {\n                        const date = new Date(year, month, day);\n                        dateStr = date.toISOString().split('T')[0]; // Convertir a formato YYYY-MM-DD\n                    } else {\n                        console.error(\"No se pudo parsear la fecha:\", selectedDate);\n                        return;\n                    }\n                } else {\n                    // Intentar con el constructor de Date como fallback\n                    const date = new Date(selectedDate);\n                    if (isNaN(date.getTime())) {\n                        console.error(\"No se pudo parsear la fecha:\", selectedDate);\n                        return;\n                    }\n                    dateStr = date.toISOString().split('T')[0]; // Convertir a formato YYYY-MM-DD\n                }\n            } catch (error) {\n                console.error(\"Error al convertir la fecha:\", error);\n                return;\n            }\n        } else {\n            console.error(\"Formato de fecha no válido:\", selectedDate);\n            return;\n        }\n        \n        // Cargar los tipos de cambio\n        const tiposCambioUrl = \"./model/mock/tipos-cambio.json\";\n        \n        fetch(tiposCambioUrl)\n            .then(response => response.json())\n            .then(data => {\n                // Buscar el tipo de cambio para USD en la fecha seleccionada\n                \n                console.log(\"PagosMasivosManager - Fecha:\", dateStr);\n                const exchangeRate = data.ExchangeRates.find((rate: any) => \n                    rate.Currency === \"USD\" && \n                    rate.Date.startsWith(dateStr)\n                );\n                \n                if (exchangeRate) {\n                    // Actualizar el campo de tipo de cambio y la fecha\n                    const planillaModel = this.getController().getView().getModel(\"planilla\");\n                    if (planillaModel) {\n                        planillaModel.setProperty(\"/U_TC\", exchangeRate.Rate);\n                        planillaModel.setProperty(\"/U_FECHAP\", selectedDate);\n                        MessageToast.show(`Tipo de cambio USD actualizado: ${exchangeRate.Rate}`, { duration: 2000 });\n                    }\n                } else {\n                    // No se encontró tipo de cambio, mantener la fecha original\n                    console.log(\"No se encontró tipo de cambio para la fecha:\", dateStr);\n                    \n                    // Revertir el DatePicker a su valor original\n                    let formattedOriginalValue = originalValue;\n                    if (originalValue && typeof originalValue === 'string') {\n                        try {\n                            const originalDate = new Date(originalValue);\n                            if (!isNaN(originalDate.getTime())) {\n                                // Formatear en el formato esperado por el DatePicker (dd MMM yyyy)\n                                formattedOriginalValue = originalDate.toLocaleDateString('es-ES', {\n                                    day: '2-digit',\n                                    month: 'short',\n                                    year: 'numeric'\n                                });\n                            }\n                        } catch (error) {\n                            console.error(\"Error al formatear la fecha original:\", error);\n                        }\n                    }\n                    \n                    datePicker.setValue(formattedOriginalValue);\n                    \n                    // Mostrar mensaje de error\n                    MessageBox.error(`No existe tipo de cambio para la fecha ${dateStr}`, {\n                        title: \"Error de Tipo de Cambio\",\n                        details: \"Por favor seleccione otra fecha\"\n                    });\n                }\n            })\n            .catch(error => {\n                console.error(\"Error cargando tipos de cambio:\", error);\n                MessageBox.error(\"Error al cargar los tipos de cambio\", {\n                    title: \"Error\",\n                    details: error.message\n                });\n            });\n    }\n\n    public onDownloadPlanilla(): void {\n        console.log(\"onDownloadPlanilla called from PagosMasivosManager!\");\n        \n        const oView = this.getController().getView();\n        if (!oView) {\n            console.error(\"PagosMasivosManager - No view found\");\n            MessageToast.show(\"Error: No se pudo acceder a la vista\", { duration: 2000 });\n            return;\n        }\n        \n        const oModel = oView.getModel(\"planilla\");\n        if (!oModel) {\n            console.error(\"PagosMasivosManager - No planilla model found\");\n            MessageToast.show(\"Error: No se encontraron datos para descargar\", { duration: 2000 });\n            return;\n        }\n        \n        const planillaData = oModel.getData();\n        console.log(\"PagosMasivosManager - Downloading planilla data:\", planillaData);\n        \n        if (!planillaData) {\n            console.error(\"PagosMasivosManager - No planilla data found\");\n            MessageToast.show(\"Error: No hay datos de planilla disponibles\", { duration: 2000 });\n            return;\n        }\n        \n        try {\n            // Create a JSON file with the planilla data\n            const jsonData = JSON.stringify(planillaData, null, 2);\n            console.log(\"PagosMasivosManager - JSON data created:\", jsonData.substring(0, 200) + \"...\");\n            \n            const blob = new Blob([jsonData], { type: 'application/json;charset=utf-8' });\n            console.log(\"PagosMasivosManager - Blob created, size:\", blob.size);\n            \n            const url = URL.createObjectURL(blob);\n            console.log(\"PagosMasivosManager - URL created:\", url);\n            \n            // Create a temporary link element to trigger download\n            const link = document.createElement('a');\n            link.href = url;\n            link.download = `planilla_${planillaData.Id || 'detalle'}_${new Date().toISOString().split('T')[0]}.json`;\n            link.style.display = 'none';\n            \n            console.log(\"PagosMasivosManager - Download filename:\", link.download);\n            \n            // Add to DOM, click, and remove\n            document.body.appendChild(link);\n            console.log(\"PagosMasivosManager - Link added to DOM\");\n            \n            link.click();\n            console.log(\"PagosMasivosManager - Link clicked\");\n            \n            // Small delay before cleanup\n            setTimeout(() => {\n                document.body.removeChild(link);\n                URL.revokeObjectURL(url);\n                console.log(\"PagosMasivosManager - Cleanup completed\");\n            }, 100);\n            \n            MessageToast.show(\"Archivo descargado exitosamente\", { duration: 2000 });\n            \n        } catch (error) {\n            console.error(\"PagosMasivosManager - Error during download:\", error);\n            MessageToast.show(\"Error al descargar el archivo\", { duration: 2000 });\n            \n            // Fallback: try to open in new window\n            try {\n                const jsonData = JSON.stringify(planillaData, null, 2);\n                const newWindow = window.open('', '_blank');\n                if (newWindow) {\n                    newWindow.document.write('<pre>' + jsonData + '</pre>');\n                    newWindow.document.title = `Planilla ${planillaData.Id || 'detalle'}`;\n                    console.log(\"PagosMasivosManager - Fallback: opened in new window\");\n                }\n            } catch (fallbackError) {\n                console.error(\"PagosMasivosManager - Fallback also failed:\", fallbackError);\n            }\n        }\n    }\n\n    public onListItemPress(oEvent: any): void {\n        console.log(\"PagosMasivosManager - onListItemPress triggered!\", oEvent);\n        \n        // Get the list item that was clicked\n        const oItem = oEvent.getParameter(\"listItem\");\n        if (!oItem) {\n            console.log(\"PagosMasivosManager - No listItem parameter found\");\n            return;\n        }\n        \n        console.log(\"PagosMasivosManager - List item:\", oItem);\n        \n        // Try to get the binding context from the list item\n        let oContext = oItem.getBindingContext(\"planillas\");\n        if (!oContext) {\n            console.log(\"PagosMasivosManager - Trying without model name...\");\n            oContext = oItem.getBindingContext();\n        }\n        \n        if (!oContext || !oContext.getObject) {\n            console.log(\"PagosMasivosManager - No context or getObject found\");\n            console.log(\"PagosMasivosManager - Context:\", oContext);\n            \n            // Try to get the data directly from the list\n            const list = this.getControlById(\"pagosMasivosPlanillasList\");\n            if (list) {\n                console.log(\"PagosMasivosManager - List found:\", list);\n                const items = list.getItems();\n                console.log(\"PagosMasivosManager - List items count:\", items.length);\n                \n                // Find the clicked item by comparing with the list item\n                for (let i = 0; i < items.length; i++) {\n                    if (items[i] === oItem) {\n                        console.log(\"PagosMasivosManager - Found clicked item at index:\", i);\n                        const model = list.getModel(\"planillas\");\n                        if (model) {\n                            const data = model.getData();\n                            const planillas = data?.PlanillasCollection || [];\n                            if (planillas[i]) {\n                                console.log(\"PagosMasivosManager - Found planilla data:\", planillas[i]);\n                                this.handlePlanillaSelection(planillas[i]);\n                                return;\n                            }\n                        }\n                        break;\n                    }\n                }\n                \n                console.log(\"PagosMasivosManager - Clicked item not found in list items\");\n            }\n            return;\n        }\n        \n        const oPlanilla = oContext.getObject();\n        console.log(\"PagosMasivosManager - Planilla data:\", oPlanilla);\n        \n        this.handlePlanillaSelection(oPlanilla);\n    }\n\n    private handlePlanillaSelection(oPlanilla: any): void {\n        if (oPlanilla && oPlanilla.DocEntry) {\n            const planillaId = oPlanilla.DocEntry;\n            console.log(\"PagosMasivosManager - Found planilla with ID:\", planillaId, \"from planilla:\", oPlanilla);\n            console.log(\"PagosMasivosManager - Planilla ID:\", planillaId);\n            \n            // Cargar datos de la planilla\n            this.loadPlanillaById(planillaId);\n            \n            // Navegar a la página de detalle usando routing\n            const oComponent = this.getController().getOwnerComponent() as any;\n            const oRouter = oComponent.getRouter();\n            oRouter.navTo(\"RoutePagosMasivosDetalle\", { planillaId: planillaId });\n        } else {\n            console.log(\"PagosMasivosManager - No valid planilla ID found\");\n        }\n    }\n\n    private loadPlanillaById(planillaId: string): void {\n        console.log(\"PagosMasivosManager - Loading planilla by ID:\", planillaId);\n        \n        // Cargar datos detallados desde el archivo planilla-object.json\n        const planillaDetailUrl = \"./model/mock/planilla-object.json\";\n        \n        try {\n            const oDetailModel = new JSONModel();\n            \n            // Load data synchronously first\n            oDetailModel.loadData(planillaDetailUrl, undefined, false);\n            \n            const oData = oDetailModel.getData();\n            console.log(\"PagosMasivosManager - Planilla detail data loaded:\", oData);\n            \n            const planillas = oData?.planillas || [];\n            console.log(\"PagosMasivosManager - Available planillas:\", planillas);\n            \n            // Buscar la planilla por ID (convert to number for comparison)\n            const planillaIdNum = parseInt(planillaId);\n            const planilla = planillas.find((item: any) => item.DocEntry === planillaIdNum);\n            \n            if (planilla) {\n                console.log(\"PagosMasivosManager - Planilla found in detail data:\", planilla);\n\n                \n                // Log all lines if they exist\n                if (planilla.VS_PMP1Collection && planilla.VS_PMP1Collection.length > 0) {\n                    console.log(\"PagosMasivosManager - Planilla Lines count:\", planilla.VS_PMP1Collection.length);\n                    console.log(\"PagosMasivosManager - Planilla Lines:\", planilla.VS_PMP1Collection);\n                    \n                    // Log each line individually\n                    planilla.VS_PMP1Collection.forEach((line: any, index: number) => {\n                        console.log(`PagosMasivosManager - Line ${index + 1}:`, {\n                            LineId: line.LineId,\n                            DocEntry: line.DocEntry,\n                            DocNum: line.DocNum,\n                            NumAtCard: line.NumAtCard,\n                            CardCode: line.CardCode,\n                            CardName: line.CardName,\n                            DocDate: line.DocDate,\n                            DocDueDate: line.DocDueDate,\n                            TaxDate: line.TaxDate,\n                            TaxCode: line.TaxCode,\n                            TaxAmount: line.TaxAmount,\n                            TaxAmountFC: line.TaxAmountFC,\n                            DocTotal: line.DocTotal,\n                            DocTotalFC: line.DocTotalFC,\n                            WithholdingTax: line.WithholdingTax\n                        });\n                    });\n                } else {\n                    console.log(\"PagosMasivosManager - No lines found for this planilla\");\n                }\n                \n                // Crear modelo para la planilla seleccionada\n                const oModelPlanilla = new JSONModel();\n                oModelPlanilla.setData(planilla);\n                \n                // Asignar el modelo a la vista\n                const oView = this.getController().getView();\n                if (oView) {\n                    oView.setModel(oModelPlanilla, \"planilla\");\n                    console.log(\"PagosMasivosManager - Planilla model assigned to view\");\n                    \n                    // Cargar también las series\n                    this.loadSeriesData();\n                }\n            } else {\n                console.log(\"PagosMasivosManager - Planilla not found in detail data, trying fallback\");\n                this.loadFallbackPlanillaData(planillaId);\n            }\n        } catch (error) {\n            console.error(\"PagosMasivosManager - Exception loading planilla detail data:\", error);\n            this.loadFallbackPlanillaData(planillaId);\n        }\n    }\n\n    private loadFallbackPlanillaData(planillaId: string): void {\n        console.log(\"PagosMasivosManager - Loading fallback planilla data for ID:\", planillaId);\n        \n        // Datos de respaldo para mostrar en caso de error\n        const fallbackData = {\n            \"DocEntry\": parseInt(planillaId),\n            \"DocNum\": parseInt(planillaId),\n            \"U_CUENTA\": \"1041101\",\n            \"U_IDBANCO\": \"BCP\",\n            \"U_NMBANCO\": \"BANCO DE CREDITO\",\n            \"U_CCBANCO\": \"1941985504094\",\n            \"U_MONEDA\": \"SOL\",\n            \"U_SERIE\": 24,\n            \"U_ESTADO\": \"E\",\n            \"U_FECHA\": \"2024-03-21T00:00:00Z\",\n            \"U_FECHAP\": \"2024-03-21T00:00:00Z\",\n            \"U_TC\": 3.701,\n            \"U_RETEN\": null,\n            \"U_FECHAV\": null,\n            \"U_IDSN\": null,\n            \"U_NMSN\": null,\n            \"U_GLOSA\": \"PG F/VARIAS\",\n            \"U_TOTAL\": 19516.06,\n            \"U_IDPAGO\": 1977,\n            \"U_SUBTOTAL\": 19516.06,\n            \"U_REF\": null,\n            \"U_NOPBAN\": \"09627515\",\n            \"U_IDSUC\": null,\n            \"U_NMSUC\": null,\n            \"U_FCAJA\": -1,\n            \"U_CONTA\": 0,\n            \"VS_PMP1Collection\": [\n                {\n                    \"DocEntry\": parseInt(planillaId),\n                    \"LineId\": 1,\n                    \"VisOrder\": 1,\n                    \"Object\": \"VS_OPMP\",\n                    \"LogInst\": null,\n                    \"U_CHECK\": \"Y\",\n                    \"U_IDPAGO\": 1971,\n                    \"U_TIPDOC\": \"Factura\",\n                    \"U_IDDOC\": 3617,\n                    \"U_LINDOC\": 0,\n                    \"U_OBJDOC\": \"18\",\n                    \"U_CUODOC\": \"1\",\n                    \"U_IDSN\": \"PL10081644867\",\n                    \"U_NMSN\": \"BUSTAMANTE DAVILA MARIA ELIZABETH\",\n                    \"U_RUC\": \"10081644867\",\n                    \"U_NUMDOC\": \"E001-78\",\n                    \"U_MONDOC\": \"SOL\",\n                    \"U_IMPORTE\": 288,\n                    \"U_SALDO\": 288,\n                    \"U_PAGONETO\": 288,\n                    \"U_PAGLOC\": 288,\n                    \"U_PAGEXT\": 0,\n                    \"U_RETLOC\": 0,\n                    \"U_RETEXT\": 0,\n                    \"U_FVENC\": \"2024-03-15T00:00:00Z\",\n                    \"U_FCONT\": \"2024-03-15T00:00:00Z\",\n                    \"U_FDOCU\": \"2024-03-15T00:00:00Z\",\n                    \"U_CCORRI\": \"19394614129025\",\n                    \"U_CTAINF\": \"BCP\",\n                    \"U_MONINF\": \"SOL\",\n                    \"U_RETCOD\": \"\",\n                    \"U_RETPOR\": 0,\n                    \"U_ESTADO\": \"1\",\n                    \"U_SL\": 288,\n                    \"U_SE\": 0,\n                    \"U_RL\": 0,\n                    \"U_RE\": 0,\n                    \"U_BL\": 0,\n                    \"U_BE\": 0,\n                    \"U_IL\": 288,\n                    \"U_REF2\": \"01E001-78\",\n                    \"U_PAGLOC0\": 0,\n                    \"U_PAGEXT0\": 0,\n                    \"U_RETLOC0\": 0,\n                    \"U_RETEXT0\": 0,\n                    \"U_MPBB\": \"2\"\n                }\n            ]\n        };\n        \n        const oModelPlanilla = new JSONModel();\n        oModelPlanilla.setData(fallbackData);\n        \n        const oView = this.getController().getView();\n        if (oView) {\n            oView.setModel(oModelPlanilla, \"planilla\");\n            console.log(\"PagosMasivosManager - Fallback planilla model assigned to view\");\n            \n            // Cargar también las series\n            this.loadSeriesData();\n        }\n    }\n\n    public loadSeriesData(): void {\n        console.log(\"PagosMasivosManager - Loading series data...\");\n        const seriesUrl = \"./model/mock/series-pago.json\";\n        \n        fetch(seriesUrl)\n            .then(response => {\n                console.log(\"PagosMasivosManager - Series response status:\", response.status);\n                return response.json();\n            })\n            .then(data => {\n                console.log(\"PagosMasivosManager - Series data received:\", data);\n                const oView = this.getController().getView();\n                if (oView) {\n                    const oModelSeries = new JSONModel();\n                    oModelSeries.setData(data);\n                    oView.setModel(oModelSeries, \"series\");\n                    console.log(\"PagosMasivosManager - Series model assigned to view\");\n                    console.log(\"PagosMasivosManager - Series model data:\", oModelSeries.getData());\n                } else {\n                    console.error(\"PagosMasivosManager - View not found when loading series\");\n                }\n            })\n            .catch(error => {\n                console.error(\"Error cargando series:\", error);\n            });\n    }\n\n    private navigateToDetailPage(): void {\n        console.log(\"PagosMasivosManager - Navigating to detail page\");\n        \n        const oComponent = this.getController().getOwnerComponent() as any;\n        const oRouter = oComponent.getRouter();\n        \n        // For new planillas, navigate without ID\n        oRouter.navTo(\"RoutePagosMasivosDetalle\", { planillaId: \"new\" });\n        console.log(\"PagosMasivosManager - Navigation to detail completed\");\n    }\n\n    private navigateBackToList(): void {\n        console.log(\"PagosMasivosManager - Navigating back to list\");\n        \n        const oComponent = this.getController().getOwnerComponent() as any;\n        const oRouter = oComponent.getRouter();\n        \n        oRouter.navTo(\"RoutePagosMasivos\");\n        console.log(\"PagosMasivosManager - Navigation back completed\");\n    }\n\n    private applyFilters(): void {\n        const aFilters: any[] = [];\n        \n        // Filtro de rango de fechas\n        const dateRangeFilter = this.getControlById(\"pagosMasivosDateRangeFilter\");\n        if (dateRangeFilter && dateRangeFilter.getValue()) {\n            const dateRangeValue = dateRangeFilter.getValue();\n            console.log(\"PagosMasivos - Filtro de rango de fechas:\", dateRangeFilter);\n            console.log(\"PagosMasivos - Valor del rango de fechas:\", dateRangeValue);\n            \n            // DateRangeSelection devuelve un string en formato \"startDate - endDate\"\n            if (dateRangeValue && typeof dateRangeValue === 'string' && dateRangeValue.includes(' - ')) {\n                const [startDateStr, endDateStr] = dateRangeValue.split(' - ');\n                if (startDateStr) {\n                    const startDate = new Date(startDateStr);\n                    aFilters.push({ path: \"DateOfSale\", operator: \"GE\", value: startDate });\n                }\n                if (endDateStr) {\n                    const endDate = new Date(endDateStr);\n                    aFilters.push({ path: \"DateOfSale\", operator: \"LE\", value: endDate });\n                }\n            }\n        }\n\n        // Filtro de estado\n        const statusFilter = this.getControlById(\"pagosMasivosStatusFilter\");\n        if (statusFilter && statusFilter.getSelectedKey() && statusFilter.getSelectedKey() !== \"\") {\n            aFilters.push({ path: \"U_ESTADO\", operator: \"EQ\", value: statusFilter.getSelectedKey() });\n        }\n\n        // Filtro de banco\n        const bancoFilter = this.getControlById(\"pagosMasivosBancoFilter\");\n        if (bancoFilter && bancoFilter.getSelectedKey() && bancoFilter.getSelectedKey() !== \"\") {\n            aFilters.push({ path: \"U_IDBANCO\", operator: \"EQ\", value: bancoFilter.getSelectedKey() });\n        }\n\n        // Aplicar filtros a datos originales\n        const originalData = this.oOriginalModel.getData();\n        let filteredData = originalData;\n\n        if (aFilters.length > 0) {\n            filteredData = this.filterData(originalData, aFilters);\n        }\n\n        this.oFilteredModel.setData(filteredData);\n    }\n\n    private filterData(data: any, filters: any[]): any {\n        if (!data || !data.PlanillasCollection) {\n            return data;\n        }\n\n        const filteredItems = data.PlanillasCollection.filter((item: any) => {\n            return filters.every(filter => {\n                const value = item[filter.path];\n                const filterValue = filter.value;\n                \n                switch (filter.operator) {\n                    case \"EQ\":\n                        return value === filterValue;\n                    case \"GE\":\n                        if (filter.path === \"DateOfSale\") {\n                            const itemDate = new Date(value);\n                            return itemDate >= filterValue;\n                        }\n                        return value >= filterValue;\n                    case \"LE\":\n                        if (filter.path === \"DateOfSale\") {\n                            const itemDate = new Date(value);\n                            return itemDate <= filterValue;\n                        }\n                        return value <= filterValue;\n                    default:\n                        return true;\n                }\n            });\n        });\n\n        return {\n            ...data,\n            PlanillasCollection: filteredItems\n        };\n    }\n\n    // Helper methods\n    private getControlById(controlId: string): any {\n        // This would need to be implemented to get controls from the view\n        // For now, we'll need to pass the controller reference\n        return null;\n    }\n\n    private getOwnerComponent(): UIComponent {\n        // This would need to be implemented to get the component\n        // For now, we'll need to pass the component reference\n        return null as any;\n    }\n\n    // Method to set controller reference for accessing controls\n    public setController(controller: any): void {\n        console.log(\"PagosMasivosManager - Setting controller reference:\", controller);\n        this.controller = controller;\n        this.getControlById = (controlId: string) => {\n            const control = controller.byId(controlId);\n            console.log(\"PagosMasivosManager - Getting control by ID:\", controlId, control);\n            return control;\n        };\n        this.getOwnerComponent = () => controller.getOwnerComponent();\n    }\n\n    // Method to get controller reference\n    public getController(): any {\n        return this.controller;\n    }\n\n    // Document Selection Methods\n    public onAddDocumentos(): void {\n        console.log(\"PagosMasivosManager - onAddDocumentos triggered\");\n        \n        // Check if we're in creation mode\n        const planillaModel = this.getController().getView().getModel(\"planilla\");\n        if (!planillaModel) {\n            console.error(\"PagosMasivosManager - Planilla model not found\");\n            return;\n        }\n        \n        const planillaData = planillaModel.getData();\n        if (!planillaData.isNewPlanilla) {\n            MessageToast.show(\"Solo se pueden agregar documentos en modo creación\", { duration: 3000 });\n            return;\n        }\n        \n        // Load available documents\n        this.loadAvailableDocuments();\n        \n        // Open the dialog\n        const dialog = this.getController().byId(\"documentSelectionDialog\");\n        if (dialog) {\n            dialog.open();\n        } else {\n            console.error(\"PagosMasivosManager - Document selection dialog not found\");\n        }\n    }\n\n    private loadAvailableDocuments(): void {\n        console.log(\"PagosMasivosManager - Loading available documents...\");\n        const documentsUrl = \"./model/mock/available-documents.json\";\n        \n        fetch(documentsUrl)\n            .then(response => {\n                console.log(\"PagosMasivosManager - Documents response status:\", response.status);\n                return response.json();\n            })\n            .then(data => {\n                console.log(\"PagosMasivosManager - Documents data received:\", data);\n                \n                // Get current planilla data to check for existing documents\n                const planillaModel = this.getController().getView().getModel(\"planilla\");\n                const currentLines = planillaModel ? planillaModel.getData().VS_PMP1Collection || [] : [];\n                \n                console.log(\"PagosMasivosManager - Current planilla lines:\", currentLines.length);\n                if (currentLines.length > 0) {\n                    console.log(\"PagosMasivosManager - Planilla lines details:\");\n                    currentLines.forEach((line: any, index: number) => {\n                        console.log(`  Line ${index}: U_NUMDOC=\"${line.U_NUMDOC}\", U_IDSN=\"${line.U_IDSN}\"`);\n                    });\n                }\n                console.log(\"PagosMasivosManager - Available documents:\", data.documents.length);\n                console.log(\"PagosMasivosManager - First few available documents:\");\n                data.documents.slice(0, 3).forEach((doc: any, index: number) => {\n                    console.log(`  Doc ${index}: DocNum=\"${doc.DocNum}\", CardCode=\"${doc.CardCode}\"`);\n                });\n                \n                // Add selected property and check if already in planilla for each document\n                data.documents.forEach((doc: any) => {\n                    doc.selected = false;\n                    \n                    // Always initialize to false first\n                    doc.alreadyInPlanilla = false;\n                    \n                    // Only check against existing lines if there are any\n                    if (currentLines.length > 0) {\n                        console.log(`PagosMasivosManager - Checking document ${doc.DocNum} (${doc.CardCode}) against ${currentLines.length} planilla lines`);\n                        \n                        const isAlreadyAdded = currentLines.some((line: any) => {\n                            const matches = line.U_NUMDOC === doc.DocNum && line.U_IDSN === doc.CardCode;\n                            console.log(`PagosMasivosManager - Comparing: \"${line.U_NUMDOC}\" === \"${doc.DocNum}\" && \"${line.U_IDSN}\" === \"${doc.CardCode}\" = ${matches}`);\n                            if (matches) {\n                                console.log(`PagosMasivosManager - Document ${doc.DocNum} (${doc.CardCode}) matches planilla line ${line.U_NUMDOC} (${line.U_IDSN})`);\n                            }\n                            return matches;\n                        });\n                        doc.alreadyInPlanilla = isAlreadyAdded;\n                    } else {\n                        console.log(`PagosMasivosManager - No planilla lines to check against for document ${doc.DocNum}`);\n                    }\n                    \n                    console.log(`PagosMasivosManager - Document ${doc.DocNum} (${doc.CardCode}) - alreadyInPlanilla: ${doc.alreadyInPlanilla}`);\n                });\n                \n                // Prepare model data\n                const modelData = {\n                    documents: data.documents,\n                    selectedTotal: 0,\n                    selectedCount: 0,\n                    existingCount: 0\n                };\n                \n                const oView = this.getController().getView();\n                if (oView) {\n                    const oModelDocuments = new JSONModel();\n                    oModelDocuments.setData(modelData);\n                    oView.setModel(oModelDocuments, \"availableDocuments\");\n                    console.log(\"PagosMasivosManager - Available documents model assigned to view\");\n                } else {\n                    console.error(\"PagosMasivosManager - View not found when loading documents\");\n                }\n            })\n            .catch(error => {\n                console.error(\"Error cargando documentos disponibles:\", error);\n                MessageToast.show(\"Error al cargar documentos disponibles\", { duration: 3000 });\n            });\n    }\n\n\n\n    public onDocumentSearch(oEvent: any): void {\n        const searchTerm = oEvent.getParameter(\"query\").toLowerCase();\n        console.log(\"PagosMasivosManager - Document search:\", searchTerm);\n        \n        const documentsModel = this.getController().getView().getModel(\"availableDocuments\");\n        if (!documentsModel) return;\n        \n        const data = documentsModel.getData();\n        const documents = data.documents;\n        \n        // Filter documents based on search term\n        const filteredDocuments = documents.filter((doc: any) => {\n            return doc.CardName.toLowerCase().includes(searchTerm) ||\n                   doc.DocNum.toLowerCase().includes(searchTerm) ||\n                   doc.CardCode.toLowerCase().includes(searchTerm);\n        });\n        \n        // Update the model with filtered data\n        documentsModel.setProperty(\"/documents\", filteredDocuments);\n    }\n\n\n\n    public onDocumentBankFilterChange(oEvent: any): void {\n        const selectedBank = oEvent.getParameter(\"selectedItem\").getKey();\n        console.log(\"PagosMasivosManager - Document bank filter:\", selectedBank);\n        \n        // Reload original data and apply filter\n        this.loadAvailableDocuments();\n        \n        if (selectedBank) {\n            const documentsModel = this.getController().getView().getModel(\"availableDocuments\");\n            if (!documentsModel) return;\n            \n            const data = documentsModel.getData();\n            const documents = data.documents;\n            \n            // Filter documents by bank\n            const filteredDocuments = documents.filter((doc: any) => {\n                return doc.BankCode === selectedBank;\n            });\n            \n            // Update the model with filtered data\n            documentsModel.setProperty(\"/documents\", filteredDocuments);\n        }\n    }\n\n\n\n    public onDocumentSelectionChange(oEvent: any): void {\n        console.log(\"PagosMasivosManager - Document selection changed\");\n        \n        const documentsModel = this.getController().getView().getModel(\"availableDocuments\");\n        if (!documentsModel) return;\n        \n        const data = documentsModel.getData();\n        const documents = data.documents;\n        \n        // Get current planilla data to check for existing documents\n        const planillaModel = this.getController().getView().getModel(\"planilla\");\n        const currentLines = planillaModel ? planillaModel.getData().VS_PMP1Collection || [] : [];\n        \n        // Get selected items from the table\n        const table = this.getController().byId(\"availableDocumentsTable\");\n        const selectedItems = table.getSelectedItems();\n        \n        // Update selected property for each document and check if it's already in planilla\n        documents.forEach((doc: any) => {\n            doc.selected = selectedItems.some((item: any) => {\n                const context = item.getBindingContext(\"availableDocuments\");\n                return context && context.getProperty(\"DocEntry\") === doc.DocEntry;\n            });\n            \n            // Always initialize to false first\n            doc.alreadyInPlanilla = false;\n            \n            // Only check against existing lines if there are any\n            if (currentLines.length > 0) {\n                const isAlreadyAdded = currentLines.some((line: any) => {\n                    const matches = line.U_NUMDOC === doc.DocNum && line.U_IDSN === doc.CardCode;\n                    if (matches) {\n                        console.log(`PagosMasivosManager - Selection change: Document ${doc.DocNum} (${doc.CardCode}) matches planilla line ${line.U_NUMDOC} (${line.U_IDSN})`);\n                    }\n                    return matches;\n                });\n                doc.alreadyInPlanilla = isAlreadyAdded;\n            }\n        });\n        \n        // Calculate selected total and count (excluding already existing documents)\n        const selectedDocuments = documents.filter((doc: any) => doc.selected && !doc.alreadyInPlanilla);\n        const selectedTotal = selectedDocuments.reduce((sum: number, doc: any) => sum + doc.Balance, 0);\n        const selectedCount = selectedDocuments.length;\n        \n        // Count documents that are selected but already in planilla\n        const selectedButExisting = documents.filter((doc: any) => doc.selected && doc.alreadyInPlanilla);\n        const existingCount = selectedButExisting.length;\n        \n        // Update the model\n        documentsModel.setProperty(\"/selectedTotal\", selectedTotal);\n        documentsModel.setProperty(\"/selectedCount\", selectedCount);\n        documentsModel.setProperty(\"/existingCount\", existingCount);\n        documentsModel.refresh(true);\n        \n        // Show warning if user selected documents that are already in planilla\n        if (existingCount > 0) {\n            console.log(`PagosMasivosManager - ${existingCount} selected document(s) already exist in planilla`);\n        }\n    }\n\n\n\n    public onDocumentDialogCancel(): void {\n        console.log(\"PagosMasivosManager - Document dialog cancelled\");\n        \n        const dialog = this.getController().byId(\"documentSelectionDialog\");\n        if (dialog) {\n            dialog.close();\n        }\n    }\n\n    public onDocumentDialogConfirm(): void {\n        console.log(\"PagosMasivosManager - Document dialog confirmed\");\n        \n        const documentsModel = this.getController().getView().getModel(\"availableDocuments\");\n        if (!documentsModel) return;\n        \n        const data = documentsModel.getData();\n        const selectedDocuments = data.documents.filter((doc: any) => doc.selected);\n        \n        if (selectedDocuments.length === 0) {\n            MessageToast.show(\"No hay documentos seleccionados\", { duration: 3000 });\n            return;\n        }\n        \n        // Filter out documents that are already in the planilla\n        const planillaModel = this.getController().getView().getModel(\"planilla\");\n        const currentLines = planillaModel ? planillaModel.getData().VS_PMP1Collection || [] : [];\n        \n        const validDocuments = selectedDocuments.filter((doc: any) => {\n            const isAlreadyInPlanilla = currentLines.some((line: any) => {\n                return line.U_NUMDOC === doc.DocNum && line.U_IDSN === doc.CardCode;\n            });\n            \n            if (isAlreadyInPlanilla) {\n                console.log(`PagosMasivosManager - Document ${doc.DocNum} already in planilla, skipping`);\n            }\n            \n            return !isAlreadyInPlanilla;\n        });\n        \n        if (validDocuments.length === 0) {\n            MessageToast.show(\"Todos los documentos seleccionados ya existen en la planilla\", { duration: 3000 });\n            return;\n        }\n        \n        if (validDocuments.length < selectedDocuments.length) {\n            const duplicateCount = selectedDocuments.length - validDocuments.length;\n            MessageToast.show(`${duplicateCount} documento(s) duplicado(s) fueron omitidos`, { duration: 3000 });\n        }\n        \n        // Add valid documents to the planilla\n        this.addDocumentsToPlanilla(validDocuments);\n        \n        // Close the dialog\n        const dialog = this.getController().byId(\"documentSelectionDialog\");\n        if (dialog) {\n            dialog.close();\n        }\n        \n        MessageToast.show(`${validDocuments.length} documento(s) agregado(s) a la planilla`, { duration: 3000 });\n    }\n\n    private addDocumentsToPlanilla(selectedDocuments: any[]): void {\n        console.log(\"PagosMasivosManager - Adding documents to planilla:\", selectedDocuments);\n        \n        const planillaModel = this.getController().getView().getModel(\"planilla\");\n        if (!planillaModel) return;\n        \n        const planillaData = planillaModel.getData();\n        const currentLines = planillaData.VS_PMP1Collection || [];\n        \n        // Convert documents to planilla lines (no need to check for duplicates as they're already filtered)\n        const newLines = selectedDocuments.map((doc: any, index: number) => {\n            const lineId = currentLines.length + index + 1;\n            return {\n                LineId: lineId,\n                DocEntry: doc.DocEntry,\n                DocNum: doc.DocNum,\n                NumAtCard: doc.DocNum,\n                CardCode: doc.CardCode,\n                CardName: doc.CardName,\n                DocDate: doc.DocDate,\n                DocDueDate: doc.DueDate,\n                TaxDate: doc.DocDate,\n                TaxCode: \"\",\n                TaxAmount: 0,\n                TaxAmountFC: 0,\n                DocTotal: doc.Total,\n                DocTotalFC: doc.Total,\n                WithholdingTax: 0,\n                // Planilla specific fields\n                U_NUMDOC: doc.DocNum,\n                U_IDSN: doc.CardCode,\n                U_NMSN: doc.CardName,\n                U_FDOCU: doc.DocDate,\n                U_FVENC: doc.DueDate,\n                U_IMPORTE: doc.Total,\n                U_SALDO: doc.Balance,\n                U_RETLOC: 0,\n                U_PAGLOC0: doc.Balance,\n                U_CTAINF: doc.BankCode,\n                U_CCORRI: doc.AccountCode,\n                U_MONINF: doc.Currency\n            };\n        });\n        \n        // Add new lines to existing lines\n        const updatedLines = [...currentLines, ...newLines];\n        planillaData.VS_PMP1Collection = updatedLines;\n        \n        // Recalculate totals\n        this.recalculatePlanillaTotals(planillaData);\n        \n        // Update the model\n        planillaModel.setData(planillaData);\n        planillaModel.refresh(true);\n        \n        console.log(\"PagosMasivosManager - Documents added to planilla. Total lines:\", updatedLines.length);\n        console.log(\"PagosMasivosManager - Documents added:\", selectedDocuments.length);\n    }\n\n    private recalculatePlanillaTotals(planillaData: any): void {\n        const lines = planillaData.VS_PMP1Collection || [];\n        \n        // Calculate totals\n        const total = lines.reduce((sum: number, line: any) => sum + (line.U_IMPORTE || 0), 0);\n        const reten = lines.reduce((sum: number, line: any) => sum + (line.U_RETLOC || 0), 0);\n        const subtotal = total - reten;\n        \n        // Update planilla totals\n        planillaData.U_TOTAL = total;\n        planillaData.U_RETEN = reten;\n        planillaData.U_SUBTOTAL = subtotal;\n        \n        console.log(\"PagosMasivosManager - Planilla totals recalculated:\", { total, reten, subtotal });\n    }\n\n}"],"mappings":"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","ignoreList":[],"sourceRoot":"controller/modules"}},{"offset":{"line":33,"column":0},"map":{"version":3,"file":"UserManager.js","names":["UserManager","constructor","this","oCurrentUser","loadAuthenticatedUser","authData","sessionStorage","getItem","localStorage","parsedAuthData","JSON","parse","isAuthenticated","userInfo","console","log","setDefaultUser","error","id","name","email","role","status","companies","getCurrentUser","checkAuthentication","sAuthData","oAuthData","logout","removeItem","__exports","__esModule"],"sources":["UserManager.ts"],"sourcesContent":["/**\r\n * UserManager - Handles user authentication and management\r\n */\r\nexport class UserManager {\r\n    private oCurrentUser: any;\r\n\r\n    constructor() {\r\n        this.oCurrentUser = null;\r\n    }\r\n\r\n    public loadAuthenticatedUser(): any {\r\n        // Obtener datos de autenticación del almacenamiento\r\n        const authData: string | null = sessionStorage.getItem(\"finanb1_auth\") || localStorage.getItem(\"finanb1_auth\");\r\n        \r\n        if (authData) {\r\n            try {\r\n                const parsedAuthData = JSON.parse(authData);\r\n                if (parsedAuthData.isAuthenticated && parsedAuthData.userInfo) {\r\n                    this.oCurrentUser = parsedAuthData.userInfo;\r\n                    console.log(\"Usuario autenticado cargado:\", this.oCurrentUser);\r\n                } else {\r\n                    this.setDefaultUser();\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error parsing auth data:\", error);\r\n                this.setDefaultUser();\r\n            }\r\n        } else {\r\n            this.setDefaultUser();\r\n        }\r\n\r\n        return this.oCurrentUser;\r\n    }\r\n\r\n    private setDefaultUser(): void {\r\n        // Establecer usuario por defecto si no hay datos de autenticación\r\n        this.oCurrentUser = {\r\n            id: 1,\r\n            name: \"Demo User\",\r\n            email: \"demo@company.com\",\r\n            role: \"admin\",\r\n            status: \"active\",\r\n            companies: [{ id: 1, name: \"Demo Company\" }]\r\n        };\r\n        console.log(\"Usando usuario por defecto:\", this.oCurrentUser);\r\n    }\r\n\r\n    public getCurrentUser(): any {\r\n        return this.oCurrentUser;\r\n    }\r\n\r\n    public checkAuthentication(): boolean {\r\n        const sAuthData = sessionStorage.getItem(\"com.vs.extension.finanb1_auth\") || localStorage.getItem(\"com.vs.extension.finanb1_auth\");\r\n        if (!sAuthData) return false;\r\n        const oAuthData = JSON.parse(sAuthData);\r\n        return oAuthData && oAuthData.isAuthenticated;\r\n    }\r\n\r\n    public logout(): void {\r\n        sessionStorage.removeItem(\"finanb1_auth\");\r\n        localStorage.removeItem(\"finanb1_auth\");\r\n        this.oCurrentUser = null;\r\n    }\r\n} "],"mappings":"AAAA,yCAGO,MAAMA,EAGTC,cACIC,KAAKC,aAAe,IACxB,CAEOC,wBAEH,MAAMC,EAA0BC,eAAeC,QAAQ,iBAAmBC,aAAaD,QAAQ,gBAE/F,GAAIF,EAAU,CACV,IACI,MAAMI,EAAiBC,KAAKC,MAAMN,GAClC,GAAII,EAAeG,iBAAmBH,EAAeI,SAAU,CAC3DX,KAAKC,aAAeM,EAAeI,SACnCC,QAAQC,IAAI,+BAAgCb,KAAKC,aACrD,KAAO,CACHD,KAAKc,gBACT,CACJ,CAAE,MAAOC,GACLH,QAAQG,MAAM,2BAA4BA,GAC1Cf,KAAKc,gBACT,CACJ,KAAO,CACHd,KAAKc,gBACT,CAEA,OAAOd,KAAKC,YAChB,CAEQa,iBAEJd,KAAKC,aAAe,CAChBe,GAAI,EACJC,KAAM,YACNC,MAAO,mBACPC,KAAM,QACNC,OAAQ,SACRC,UAAW,CAAC,CAAEL,GAAI,EAAGC,KAAM,kBAE/BL,QAAQC,IAAI,8BAA+Bb,KAAKC,aACpD,CAEOqB,iBACH,OAAOtB,KAAKC,YAChB,CAEOsB,sBACH,MAAMC,EAAYpB,eAAeC,QAAQ,kCAAoCC,aAAaD,QAAQ,iCAClG,IAAKmB,EAAW,OAAO,MACvB,MAAMC,EAAYjB,KAAKC,MAAMe,GAC7B,OAAOC,GAAaA,EAAUf,eAClC,CAEOgB,SACHtB,eAAeuB,WAAW,gBAC1BrB,aAAaqB,WAAW,gBACxB3B,KAAKC,aAAe,IACxB,EACH,IAAA2B,EAAA,CAAAC,WAAA,MAAAD,EAAA9B,cAAA,OAAA8B,CAAA","ignoreList":[],"sourceRoot":"controller/modules"}},{"offset":{"line":36,"column":0},"map":{"version":3,"file":"JSONFilterBarDelegate.js","names":["JSONPropertyInfo","key","dataType","label","maxConditions","JSONFilterBarDelegate","Object","assign","FilterBarDelegate","fetchProperties","async","_createFilterField","sId","oProperty","oFilterBar","sPropertyName","oFilterField","FilterField","conditions","propertyKey","required","delegate","name","payload","addItem","find","oPI","getId","existingElement","Element","getElementById","Error","removeItem","destroy"],"sources":["JSONFilterBarDelegate.ts"],"sourcesContent":["/* eslint-disable require-await */\r\nimport Element from \"sap/ui/core/Element\";\r\nimport FilterBarDelegate from \"sap/ui/mdc/FilterBarDelegate\";\r\nimport FilterField from \"sap/ui/mdc/FilterField\";\r\n\r\n// Define the JSONPropertyInfo interface and mock data\r\ninterface IPropertyInfo {\r\n    key: string;\r\n    dataType: string;\r\n    required?: boolean;\r\n    label: string;\r\n    maxConditions?: number;\r\n}\r\n\r\n// Mock JSONPropertyInfo data\r\nconst JSONPropertyInfo: IPropertyInfo[] = [\r\n    {\r\n        key: \"name\",\r\n        dataType: \"sap.ui.model.type.String\",\r\n        label: \"Name\",\r\n        maxConditions: 1\r\n    },\r\n    {\r\n        key: \"height\",\r\n        dataType: \"sap.ui.model.type.Integer\",\r\n        label: \"Height\",\r\n        maxConditions: 1\r\n    },\r\n    {\r\n        key: \"prominence\",\r\n        dataType: \"sap.ui.model.type.Float\",\r\n        label: \"Prominence\",\r\n        maxConditions: -1\r\n    },\r\n    {\r\n        key: \"parent_mountain\",\r\n        dataType: \"sap.ui.model.type.Boolean\",\r\n        label: \"Has parent mountain\",\r\n        maxConditions: 1\r\n    },\r\n    {\r\n        key: \"first_ascent\",\r\n        dataType: \"sap.ui.model.odata.type.Date\",\r\n        label: \"First Ascent\",\r\n        maxConditions: 1\r\n    },\r\n    {\r\n        key: \"rank\",\r\n        dataType: \"sap.ui.model.type.Integer\",\r\n        label: \"Rank\",\r\n        maxConditions: 1\r\n    }\r\n];\r\n\r\ninterface IFilterBar {\r\n    getId(): string;\r\n}\r\n\r\ninterface IFilterField {\r\n    destroy(): void;\r\n}\r\n\r\nconst JSONFilterBarDelegate = Object.assign({}, FilterBarDelegate);\r\n\r\nJSONFilterBarDelegate.fetchProperties = async (): Promise<IPropertyInfo[]> => JSONPropertyInfo;\r\n\r\nconst _createFilterField = async (sId: string, oProperty: IPropertyInfo, oFilterBar: IFilterBar): Promise<FilterField> => {\r\n    const sPropertyName = oProperty.key;\r\n    const oFilterField = new FilterField(sId, {\r\n        dataType: oProperty.dataType,\r\n        conditions: \"{$filters>/conditions/\" + sPropertyName + '}' as any,\r\n        propertyKey: sPropertyName,\r\n        required: oProperty.required,\r\n        label: oProperty.label,\r\n        maxConditions: oProperty.maxConditions,\r\n        delegate: {name: \"sap/ui/mdc/field/FieldBaseDelegate\", payload: {}}\r\n    });\r\n    return oFilterField;\r\n};\r\n\r\nJSONFilterBarDelegate.addItem = async (oFilterBar: IFilterBar, sPropertyName: string): Promise<FilterField> => {\r\n    const oProperty = JSONPropertyInfo.find((oPI: IPropertyInfo) => oPI.key === sPropertyName);\r\n    const sId = oFilterBar.getId() + \"--filter--\" + sPropertyName;\r\n    const existingElement = Element.getElementById(sId);\r\n    if (existingElement && existingElement instanceof FilterField) {\r\n        return existingElement;\r\n    }\r\n    if (!oProperty) {\r\n        throw new Error(`Property ${sPropertyName} not found in JSONPropertyInfo`);\r\n    }\r\n    return await _createFilterField(sId, oProperty, oFilterBar);\r\n};\r\n\r\nJSONFilterBarDelegate.removeItem = async (oFilterBar: IFilterBar, oFilterField: IFilterField): Promise<boolean> => {\r\n    oFilterField.destroy();\r\n    return true; // allow default handling\r\n};\r\n\r\nexport default JSONFilterBarDelegate; "],"mappings":"AAAA,2HAeA,MAAMA,EAAoC,CACtC,CACIC,IAAK,OACLC,SAAU,2BACVC,MAAO,OACPC,cAAe,GAEnB,CACIH,IAAK,SACLC,SAAU,4BACVC,MAAO,SACPC,cAAe,GAEnB,CACIH,IAAK,aACLC,SAAU,0BACVC,MAAO,aACPC,eAAgB,GAEpB,CACIH,IAAK,kBACLC,SAAU,4BACVC,MAAO,sBACPC,cAAe,GAEnB,CACIH,IAAK,eACLC,SAAU,+BACVC,MAAO,eACPC,cAAe,GAEnB,CACIH,IAAK,OACLC,SAAU,4BACVC,MAAO,OACPC,cAAe,IAYvB,MAAMC,EAAwBC,OAAOC,OAAO,CAAC,EAAGC,GAEhDH,EAAsBI,gBAAkBC,SAAsCV,EAE9E,MAAMW,EAAqBD,MAAOE,EAAaC,EAA0BC,KACrE,MAAMC,EAAgBF,EAAUZ,IAChC,MAAMe,EAAe,IAAIC,EAAYL,EAAK,CACtCV,SAAUW,EAAUX,SACpBgB,WAAY,yBAA2BH,EAAgB,IACvDI,YAAaJ,EACbK,SAAUP,EAAUO,SACpBjB,MAAOU,EAAUV,MACjBC,cAAeS,EAAUT,cACzBiB,SAAU,CAACC,KAAM,qCAAsCC,QAAS,CAAC,KAErE,OAAOP,GAGXX,EAAsBmB,QAAUd,MAAOI,EAAwBC,KAC3D,MAAMF,EAAYb,EAAiByB,KAAMC,GAAuBA,EAAIzB,MAAQc,GAC5E,MAAMH,EAAME,EAAWa,QAAU,aAAeZ,EAChD,MAAMa,EAAkBC,EAAQC,eAAelB,GAC/C,GAAIgB,GAAmBA,aAA2BX,EAAa,CAC3D,OAAOW,CACX,CACA,IAAKf,EAAW,CACZ,MAAM,IAAIkB,MAAM,YAAYhB,kCAChC,CACA,aAAaJ,EAAmBC,EAAKC,EAAWC,IAGpDT,EAAsB2B,WAAatB,MAAOI,EAAwBE,KAC9DA,EAAaiB,UACb,OAAO,MACT,OAEa5B,CAAqB","ignoreList":[],"sourceRoot":"delegate"}},{"offset":{"line":41,"column":0},"map":{"version":3,"file":"formatter.js","names":["formatter","status","sStatus","estadoText","date","sDate","Date","toLocaleDateString","year","month","day","error","odataDate","startsWith","endsWith","timestamp","parseInt","substring","length","currency","fAmount","undefined","toLocaleString","minimumFractionDigits","maximumFractionDigits","negativeCurrency","isEditable","isDocumentSelectable","doc","currentLines","some","line","U_NUMDOC","DocNum","U_IDSN","CardCode","isNewPlanilla","isNew"],"sources":["formatter.ts"],"sourcesContent":["const formatter = {\r\n    status: (sStatus: string): string => {\r\n        switch (sStatus) {\r\n            case \"E\":\r\n                return \"Success\";\r\n            case \"C\":\r\n                return \"Warning\";\r\n            case \"A\":\r\n                return \"Error\";\r\n\r\n            default:\r\n                return \"None\";\r\n        }\r\n    },\r\n    \r\n    estadoText: (sStatus: string): string => {\r\n        switch (sStatus) {\r\n            case \"E\":\r\n                return \"Ejecutada\";\r\n            case \"C\":\r\n                return \"Creada\";\r\n            case \"A\":\r\n                return \"Anulada\";\r\n            default:\r\n                return sStatus;\r\n        }\r\n    },\r\n    \r\n    date: (sDate: string): string => {\r\n        if (!sDate) return \"\";\r\n        \r\n        try {\r\n            const date = new Date(sDate);\r\n            return date.toLocaleDateString('es-ES', {\r\n                year: 'numeric',\r\n                month: '2-digit',\r\n                day: '2-digit'\r\n            });\r\n        } catch (error) {\r\n            return sDate;\r\n        }\r\n    },\r\n    \r\n    odataDate: (sDate: string): string => {\r\n        if (!sDate) return \"\";\r\n        \r\n        try {\r\n            // Handle OData date format: /Date(timestamp)/\r\n            if (sDate.startsWith('/Date(') && sDate.endsWith(')/')) {\r\n                const timestamp = parseInt(sDate.substring(6, sDate.length - 2));\r\n                const date = new Date(timestamp);\r\n                return date.toLocaleDateString('es-ES', {\r\n                    year: 'numeric',\r\n                    month: '2-digit',\r\n                    day: '2-digit'\r\n                });\r\n            } else {\r\n                // Handle regular date format\r\n                const date = new Date(sDate);\r\n                return date.toLocaleDateString('es-ES', {\r\n                    year: 'numeric',\r\n                    month: '2-digit',\r\n                    day: '2-digit'\r\n                });\r\n            }\r\n        } catch (error) {\r\n            return sDate;\r\n        }\r\n    },\r\n    \r\n    currency: (fAmount: number): string => {\r\n        if (fAmount === null || fAmount === undefined || fAmount === 0) return \"0.00\";\r\n        \r\n        return fAmount.toLocaleString('es-ES', {\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2\r\n        });\r\n    },\r\n    \r\n    negativeCurrency: (fAmount: number): string => {\r\n        if (fAmount === null || fAmount === undefined || fAmount === 0) return \"0.00\";\r\n        \r\n        return (-fAmount).toLocaleString('es-ES', {\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2\r\n        });\r\n    },\r\n    \r\n    isEditable: (sStatus: string): boolean => {\r\n        return sStatus === \"C\"; // Only editable when status is \"Creada\"\r\n    },\r\n    \r\n    isDocumentSelectable: (doc: any, currentLines: any[]): boolean => {\r\n        if (!doc || !currentLines) return true;\r\n        \r\n        // Check if document already exists in current lines\r\n        return !currentLines.some((line: any) => {\r\n            return line.U_NUMDOC === doc.DocNum && line.U_IDSN === doc.CardCode;\r\n        });\r\n    },\r\n    \r\n    isNewPlanilla: (isNew: boolean): boolean => {\r\n        return isNew === true;\r\n    }\r\n};\r\n\r\nexport default formatter; "],"mappings":"AAAA,yCAAA,MAAMA,EAAY,CACdC,OAASC,IACL,OAAQA,GACJ,IAAK,IACD,MAAO,UACX,IAAK,IACD,MAAO,UACX,IAAK,IACD,MAAO,QAEX,QACI,MAAO,SAInBC,WAAaD,IACT,OAAQA,GACJ,IAAK,IACD,MAAO,YACX,IAAK,IACD,MAAO,SACX,IAAK,IACD,MAAO,UACX,QACI,OAAOA,IAInBE,KAAOC,IACH,IAAKA,EAAO,MAAO,GAEnB,IACI,MAAMD,EAAO,IAAIE,KAAKD,GACtB,OAAOD,EAAKG,mBAAmB,QAAS,CACpCC,KAAM,UACNC,MAAO,UACPC,IAAK,WAEb,CAAE,MAAOC,GACL,OAAON,CACX,GAGJO,UAAYP,IACR,IAAKA,EAAO,MAAO,GAEnB,IAEI,GAAIA,EAAMQ,WAAW,WAAaR,EAAMS,SAAS,MAAO,CACpD,MAAMC,EAAYC,SAASX,EAAMY,UAAU,EAAGZ,EAAMa,OAAS,IAC7D,MAAMd,EAAO,IAAIE,KAAKS,GACtB,OAAOX,EAAKG,mBAAmB,QAAS,CACpCC,KAAM,UACNC,MAAO,UACPC,IAAK,WAEb,KAAO,CAEH,MAAMN,EAAO,IAAIE,KAAKD,GACtB,OAAOD,EAAKG,mBAAmB,QAAS,CACpCC,KAAM,UACNC,MAAO,UACPC,IAAK,WAEb,CACJ,CAAE,MAAOC,GACL,OAAON,CACX,GAGJc,SAAWC,IACP,GAAIA,IAAY,MAAQA,IAAYC,WAAaD,IAAY,EAAG,MAAO,OAEvE,OAAOA,EAAQE,eAAe,QAAS,CACnCC,sBAAuB,EACvBC,sBAAuB,KAI/BC,iBAAmBL,IACf,GAAIA,IAAY,MAAQA,IAAYC,WAAaD,IAAY,EAAG,MAAO,OAEvE,QAASA,GAASE,eAAe,QAAS,CACtCC,sBAAuB,EACvBC,sBAAuB,KAI/BE,WAAaxB,GACFA,IAAY,IAGvByB,qBAAsBA,CAACC,EAAUC,KAC7B,IAAKD,IAAQC,EAAc,OAAO,KAGlC,OAAQA,EAAaC,KAAMC,GAChBA,EAAKC,WAAaJ,EAAIK,QAAUF,EAAKG,SAAWN,EAAIO,WAInEC,cAAgBC,GACLA,IAAU,MAEvB,OAEarC,CAAS","ignoreList":[],"sourceRoot":"model"}},{"offset":{"line":44,"column":0},"map":{"version":3,"file":"JSONPropertyInfo.js","names":["sap","ui","define","aPropertyInfos","key","label","visible","path","dataType","formatOptions","emptyString","constraints","minimum","style","V4","maxConditions"],"sources":["JSONPropertyInfo-dbg.js"],"mappings":"AAAAA,IAAIC,GAAGC,OAAO,GACX,WACF,aAeA,MAAMC,EAAiB,CAAC,CACvBC,IAAK,OACLC,MAAO,OACPC,QAAS,KACTC,KAAM,OACNC,SAAU,4BACVC,cAAc,CAACC,YAAa,GAC5BC,YAAY,CAACC,QAAS,IACrB,CACDR,IAAK,OACLC,MAAO,OACPC,QAAS,KACTC,KAAM,OACNC,SAAU,4BACT,CACDJ,IAAK,SACLC,MAAO,SACPC,QAAS,KACTC,KAAM,SACNC,SAAU,6BACT,CACDJ,IAAK,aACLC,MAAO,aACPC,QAAS,KACTC,KAAM,aACNC,SAAU,2BACT,CACDJ,IAAK,QACLC,MAAO,QACPC,QAAS,KACTC,KAAM,QACNC,SAAU,4BACT,CACDJ,IAAK,cACLC,MAAO,cACPC,QAAS,KACTC,KAAM,cACNC,SAAU,4BACT,CACDJ,IAAK,kBACLC,MAAO,kBACPC,QAAS,KACTC,KAAM,kBACNC,SAAU,6BACT,CACDJ,IAAK,eACLC,MAAO,eACPC,QAAS,KACTC,KAAM,eACNC,SAAU,+BACVC,cAAc,CACbI,MAAO,QAERF,YAAa,CACZG,GAAI,OAEJ,CACDV,IAAK,YACLC,MAAO,YACPC,QAAS,KACTC,KAAM,YACNC,SAAU,4BACT,CACDJ,IAAK,UACLC,MAAO,SACPC,QAAS,KACTS,cAAe,EACfP,SAAU,6BAGX,OAAOL,CACR,EAAiB","ignoreList":[],"sourceRoot":"model/metadata"}},{"offset":{"line":47,"column":0},"map":{"version":3,"file":"odata-service.js","names":["sap","ui","define","BaseObject","extend","constructor","call","this","_data","_loadMockData","DocEntry","DocNum","CardCode","CardName","DocType","DocDate","DueDate","Currency","Total","Balance","BankCode","BankName","AccountCode","AccountName","getAvailableDocuments","getAvailableDocumentsCount","length"],"sources":["odata-service-dbg.js"],"mappings":"AACAA,IAAIC,GAAGC,OAAO,CACV,sBACD,SAAUC,GACT,aAEA,OAAOA,EAAWC,OAAO,mDAAoD,CAEzEC,YAAa,WACTF,EAAWG,KAAKC,MAChBA,KAAKC,MAAQD,KAAKE,eACtB,EAEAA,cAAe,WACX,MAAO,CACH,CACIC,SAAY,KACZC,OAAU,WACVC,SAAY,OACZC,SAAY,+BACZC,QAAW,UACXC,QAAW,wBACXC,QAAW,wBACXC,SAAY,MACZC,MAAS,KACTC,QAAW,KACXC,SAAY,MACZC,SAAY,mBACZC,YAAe,UACfC,YAAe,wBAEnB,CACIb,SAAY,KACZC,OAAU,WACVC,SAAY,OACZC,SAAY,6BACZC,QAAW,UACXC,QAAW,wBACXC,QAAW,wBACXC,SAAY,MACZC,MAAS,OACTC,QAAW,OACXC,SAAY,MACZC,SAAY,mBACZC,YAAe,UACfC,YAAe,wBAEnB,CACIb,SAAY,KACZC,OAAU,WACVC,SAAY,OACZC,SAAY,4BACZC,QAAW,UACXC,QAAW,wBACXC,QAAW,wBACXC,SAAY,MACZC,MAAS,OACTC,QAAW,OACXC,SAAY,MACZC,SAAY,mBACZC,YAAe,UACfC,YAAe,wBAEnB,CACIb,SAAY,KACZC,OAAU,WACVC,SAAY,OACZC,SAAY,iCACZC,QAAW,UACXC,QAAW,wBACXC,QAAW,wBACXC,SAAY,MACZC,MAAS,KACTC,QAAW,KACXC,SAAY,MACZC,SAAY,mBACZC,YAAe,UACfC,YAAe,wBAEnB,CACIb,SAAY,KACZC,OAAU,WACVC,SAAY,OACZC,SAAY,+BACZC,QAAW,UACXC,QAAW,wBACXC,QAAW,wBACXC,SAAY,MACZC,MAAS,QACTC,QAAW,QACXC,SAAY,MACZC,SAAY,mBACZC,YAAe,UACfC,YAAe,wBAG3B,EAEAC,sBAAuB,WACnB,OAAOjB,KAAKC,KAChB,EAEAiB,2BAA4B,WACxB,OAAOlB,KAAKC,MAAMkB,MACtB,GAER","ignoreList":[],"sourceRoot":"model/mock"}},{"offset":{"line":50,"column":0},"map":{"version":3,"file":"models.js","names":["createDeviceModel","model","JSONModel","Device","setDefaultBindingMode","__exports","__esModule"],"sources":["models.ts"],"sourcesContent":["import JSONModel from \"sap/ui/model/json/JSONModel\";\nimport Device from \"sap/ui/Device\";\n\nexport function createDeviceModel () {\n    const model = new JSONModel(Device);\n    model.setDefaultBindingMode(\"OneWay\");\n    return model;\n}"],"mappings":"AAAA,yFAGO,SAASA,IACZ,MAAMC,EAAQ,IAAIC,EAAUC,GAC5BF,EAAMG,sBAAsB,UAC5B,OAAOH,CACX,CAAC,IAAAI,EAAA,CAAAC,WAAA,MAAAD,EAAAL,oBAAA,OAAAK,CAAA","ignoreList":[],"sourceRoot":"model"}}]}