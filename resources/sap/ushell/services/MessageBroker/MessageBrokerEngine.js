// Copyright (c) 2009-2025 SAP SE, All Rights Reserved
sap.ui.define(["sap/base/Log","sap/base/util/deepExtend"],(e,s)=>{"use strict";let n=true;const t={};const i={};const r={};const c={};t[window.location.origin]=true;function a(){this.setEnabled=function(e){n=e};this.processPostMessage=function(s){if(!n){return Promise.reject()}const t=s.oMessageData;const i=t.body;const r=s.oMessage;const c=r.origin;const a=r.source;i.requestId=t.request_id;if(!a){const s="Missing iframe object in PostMessage request";e.error(s,null,"sap.ushell.services.MessageBroker");return Promise.reject(s)}return this._handlePostMessageRequest(i,a,c)};this.connect=function(s){let t;if(!n){return Promise.reject()}if(typeof s!=="string"||!s.length){t="Missing required parameter client id"}else if(r[s]){t="Client is already connected"}else{r[s]=true;return Promise.resolve()}e.error(t,null,"sap.ushell.services.MessageBroker");return Promise.reject(t)};this.disconnect=function(s){let t;if(!n){return Promise.reject()}if(typeof s!=="string"||!s.length){t="Missing required parameter client id"}else if(!r[s]){t="Client is already disconnected"}else{for(const e in i){const n=i[e];for(const e in n){const t=n[e];if(t.clientId===s){n.splice(e,1);break}}}if(c[s]&&c[s].channels.length){this._emitEvent("clientUnsubscribed",s,c[s].channels);delete c[s]}delete r[s];return Promise.resolve()}e.error(t,null,"sap.ushell.services.MessageBroker");return Promise.reject(t)};this.subscribe=function(s,t,a,o,l,u){let d;const h="clientSubscribed";let g=[];let f=false;if(!n){return Promise.reject()}if(typeof s!=="string"||!s.length||!t.length||typeof l!=="object"&&(typeof a!=="function"||typeof o!=="function")){d="Missing required parameter(s)"}else if(!r[s]){d="Client is not connected"}else{for(const e in t){const n=t[e];const r={clientId:s,subscribedChannels:t,messageCallback:a,clientConnectionCallback:o,iframe:l||{},origin:u||"",isUI5:!l};if(!i[n.channelId]){i[n.channelId]=[]}const d=i[n.channelId].find(e=>e.clientId===s);if(!d){i[n.channelId].push(r)}if(c[s]){const e=c[s].channels.find(e=>e.channelId===n.channelId);if(!e){c[s].channels.push(n)}}}if(!c[s]){f=true;const e={clientId:s,channels:t};c[s]=e;g=Object.values(c).filter(e=>e.clientId!==s)}if(Object.keys(c).length>1){this._emitEvent(h,s,t)}if(f){setTimeout(()=>{if(g.length){g.forEach(e=>{if(!l){o(h,e.clientId,e.channels)}else{const s={clientId:e.clientId,channels:e.channels,channelId:"sap.ushell.MessageBroker",messageName:h};sap.ui.require(["sap/ushell/appIntegration/PostMessageManager"],e=>{const n=this._buildPostMessageObject("event",s);this._sendPostMessage(e,n,l,u)})}})}},1e3)}return Promise.resolve()}e.error(d,null,"sap.ushell.services.MessageBroker");return Promise.reject(d)};this.unsubscribe=function(s,t){let a;if(!n){return Promise.reject()}if(typeof s!=="string"||!s.length||!Array.isArray(t)||!t.length){a="Missing required parameter(s)";e.error(a,null,"sap.ushell.services.MessageBroker");return Promise.reject(a)}if(!r[s]){a="Client is not connected";e.error(a,null,"sap.ushell.services.MessageBroker");return Promise.reject(a)}for(const n in t){const r=t[n];if(i[r.channelId]){const e=i[r.channelId];for(const n in e){const t=e[n];if(t.clientId===s){const t=c[s].channels;c[s].channels=t.filter(e=>e.channelId!==r.channelId);e.splice(n,1);break}}}else{const s=`Unknown channel Id: ${r.channelId}`;e.warning(s,null,"sap.ushell.services.MessageBroker")}}this._emitEvent("clientUnsubscribed",s,t);return Promise.resolve()};this.publish=function(s,t,c,a,o,l){let u;let d=[];if(!n){return Promise.reject()}if(!r[t]){u="Client is not connected";e.error(u,null,"sap.ushell.services.MessageBroker");return Promise.reject(u)}if(!i[s]){u=`Unknown channel Id: ${s}`;e.error(u,null,"sap.ushell.services.MessageBroker");return Promise.reject(u)}const h=i[s].find(e=>e.clientId===t);if(!h){u="Client is not subscribed to the provided channel";e.error(u,null,"sap.ushell.services.MessageBroker");return Promise.reject(u)}for(const e in o){const n=o[e];if(n==="*"){d=i[s].concat();break}else{const e=i[s].find(e=>e.clientId===n);if(e){d.push(this._deepCopy(e))}}}if(d.length){this._sendMessage(d,s,c,a,t,l);return Promise.resolve()}u="Target client(s) not found in the provided channel";e.error(u,null,"sap.ushell.services.MessageBroker");return Promise.reject(u)};this.addAcceptedOrigin=function(s){if(!n){return}if(typeof s==="string"&&s.length>0){t[s]=true;if(s.startsWith("https:")&&s.endsWith(":443")){t[s.substring(0,s.length-4)]=true}}else{e.warning("Missing required parameter sOrigin",null,"sap.ushell.services.MessageBroker")}};this.removeAcceptedOrigin=function(e){if(!n){return}delete t[e]};this.getAcceptedOrigins=function(){if(!n){return}return Object.keys(t)};this.getSubscribedClients=function(){if(!n){return}return this._deepCopy(i)};this._emitEvent=function(e,s,n){const t={};for(const r in i){const c=i[r];for(const i in c){const r=c[i];if(r.clientId!==s&&!t[r.clientId]){const i={clientId:s,channels:n};if(r.isUI5!==false){r.clientConnectionCallback(e,s,n)}else{i.channelId="sap.ushell.MessageBroker";i.messageName=e;sap.ui.require(["sap/ushell/appIntegration/PostMessageManager"],e=>{const s=this._buildPostMessageObject("event",i);this._sendPostMessage(e,s,r.iframe,r.origin)})}t[r.clientId]=true}}}};this._sendMessage=function(e,s,n,t,i,r){for(const n in e){const c=e[n];if(c.clientId!==i){if(c.isUI5!==false){c.messageCallback(i,s,t,r)}else{const e={clientId:i,channelId:s,messageName:t,data:r};sap.ui.require(["sap/ushell/appIntegration/PostMessageManager"],s=>{const n=this._buildPostMessageObject("request",e);this._sendPostMessage(s,n,c.iframe,c.origin)})}}}};this._callApi=function(e,s){return this[e].apply(this,s)};this._handlePostMessageRequest=function(e,s,n){return new Promise((t,i)=>{const r=e.clientId;const c=e.channelId;const a=e.requestId;let o=e.messageName;const l=e.subscribedChannels;const u=e.targetClientIds;const d=e.data;const h={connect:[r],disconnect:[r],subscribe:[r,l,null,null,s,n],unsubscribe:[r,l],publish:[c,r,a,o,u,d]};const g={channelId:c,clientId:r,messageName:o,requestId:a};o=h[o]?o:"publish";this._callApi(o,h[o]).then(()=>{if(o!=="publish"){sap.ui.require(["sap/ushell/appIntegration/PostMessageManager"],e=>{const t=this._buildPostMessageObject("response",g);t.messageBody.status="accepted";this._sendPostMessage(e,t,s,n)})}t({_noresponse_:true})}).catch(e=>{i(e)})})};this._buildPostMessageObjectFallback=function(e,s,n){const t="sap.ushell.services.MessageBroker";if(s==="response"){const s={channelId:n.channelId,clientId:n.clientId,correlationMessageId:n.requestId,messageName:n.messageName};const i=e.createPostMessageResponse(t,n.requestId,s,true);return i}if(s==="event"){const s={channelId:n.channelId,clientId:n.clientId,messageName:n.messageName,channels:n.channels};const i=e.createPostMessageRequest(t,s);return i}if(s==="request"){const s={channelId:n.channelId,clientId:n.clientId,messageName:n.messageName,data:n.data};const i=e.createPostMessageRequest(t,s);return i}return e.createPostMessageRequest(t)};this._buildPostMessageObject=function(e,s){const n="sap.ushell.services.MessageBroker";if(e==="response"){const e={channelId:s.channelId,clientId:s.clientId,correlationMessageId:s.requestId,messageName:s.messageName};const t={isRequest:false,requestId:s.requestId,isSuccess:true,serviceRequest:n,messageBody:e};return t}if(e==="event"){const e={channelId:s.channelId,clientId:s.clientId,messageName:s.messageName,channels:s.channels};const t={isRequest:true,serviceRequest:n,messageBody:e};return t}if(e==="request"){const e={channelId:s.channelId,clientId:s.clientId,messageName:s.messageName,data:s.data};const t={isRequest:true,serviceRequest:n,messageBody:e};return t}const t={isRequest:true,serviceRequest:n};return t};this._sendPostMessage=function(e,s,n,t){if(s.isRequest){e.sendRequest(s.serviceRequest,s.messageBody,n,t,false)}else{e.sendResponse(s.requestId,s.serviceRequest,s.messageBody,s.isSuccess,n,t)}};this._buildFunctionName=function(e,s){s=s.charAt(0).toUpperCase()+s.substring(1);return e+s};this._deepCopy=function(e){return s(e)}}return new a},false);
//# sourceMappingURL=MessageBrokerEngine.js.map