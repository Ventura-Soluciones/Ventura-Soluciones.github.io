// Copyright (c) 2009-2025 SAP SE, All Rights Reserved
sap.ui.define(["sap/base/Log","sap/base/util/Deferred","sap/base/util/isPlainObject","sap/base/util/ObjectPath","sap/base/util/uid"],(e,s,t,i,r)=>{"use strict";const n={provideApplicationContext:false,allowInactive:false};const a={activeOnly:false,ignoreCapabilities:false};const o=Symbol("DoNotReply");const l=e.getLogger("sap.ushell.appIntegration.PostMessageManager");class d{#e=()=>{throw new Error("PostMessageManager is not initialized")};#s=()=>{throw new Error("PostMessageManager is not initialized")};#t=()=>{throw new Error("PostMessageManager is not initialized")};#i=false;#r=false;#n=[];#a=[];#o={};#l={};#d=true;#c=[];init(e={}){if(this.#i){throw new Error("PostMessageManager is already initialized.")}const s=i.get("sap-ushell-config.services.PostMessage.config")||{};if(s.enabled===false){this.#r=true;this.#i=true;l.warning("PostMessageAPI is disabled by configuration.");return}const t=e.getCurrentApplication||function(){};this.#s=t;const r=e.getAllApplications||function(){return[]};this.#t=r;if(e.skipReplay){this.#d=false}this.#e=this.#u.bind(this);addEventListener("message",this.#e);this.#i=true}async#u(e){let s;try{if(typeof e.data==="string"){s=JSON.parse(e.data)}else if(t(e.data)){s=e.data}else{throw new Error("Invalid message format")}s.body=s.body||{}}catch{l.debug("Received Post Message with invalid JSON. Ignoring the message.",e.data);return}const i=this.#g(e,s);e=i.oEvent;s=i.oMessage;if(!s.service){l.debug("Received Post Message without a service name. Ignoring the message.");return}const r=e.source;const n=e.origin;l.debug(`Received postMessage ${s.service} (${s.request_id}) from iframe with domain '${n}'`,JSON.stringify(s,null,2));if(!["response","request"].includes(s.type)){l.warning(`Received Post Message with an invalid type: '${s.type}'. Ignoring the message.`);return}if(s.type==="response"){const t=this.#p(e);if(t){l.debug(`Response for ${s.service} (${s.request_id}) was handled by a response handler.`)}return}let a;let d=true;try{const t=await this.#f(s,r,n,e);l.debug(`Service request for ${s.service} (${s.request_id}) was handled successfully.`);if(t===o){l.debug(`Service request for ${s.service} (${s.request_id}) was handled successfully, but no response is needed.`);return}if(t&&typeof t==="object"&&Object.hasOwn(t,"_noresponse_")){l.debug(`Service request for ${s.service} (${s.request_id}) was handled successfully, but no response is needed.`);return}a={result:t}}catch(e){d=false;l.error(`Service request for ${s.service} (${s.request_id}) failed.`,e);let t;let i=e;if(e instanceof Error){i=e.message;t=e.stack}a={message:i,stack:t}}return this.sendResponse(s.request_id,s.service,a,d,r,n)}#g(e,s){let t;this.#n.forEach(i=>{if(t){return}t=i(e,s)});return{oEvent:t||e,oMessage:s}}#p(e){let s=false;this.#a.forEach(t=>{if(s){return}s=t(e)});return s}async#f(e,s,t,i){const r=e.service;const n=this.#h(r);if(!n){if(this.#d){this.#c.push(i);return o}await this.sendResponse(e.request_id,r,{code:-1,message:`Unknown service name: '${r}'`},false,s,t);return o}const a=this.#b(r);if(typeof a?.isValidRequest==="function"){const e=await a.isValidRequest(i);if(!e){throw new Error(`Invalid request for service ${r}.`)}}if(a.provideApplicationContext){const t=this.#v(s);if(!t){throw new Error("Cannot find the related application for the service request.")}if(!t.getActive()&&!a?.allowInactive){throw new Error("Received Post Message from an inactive application.")}if(!t.isTrustedPostMessageSource(i)){throw new Error("Received Post Message from an untrusted source.")}l.debug(`Handling service request for ${r} (${e.request_id}) with application context ${t.getId()}.`);return n(e.body,t,i)}l.debug(`Handling service request for ${r} (${e.request_id}) without application context.`);return n(e.body,i)}#h(e){return this.#o[e]?.handler}#b(e){return this.#o[e]?.options}#v(e){let s;this.#t().forEach(t=>{if(s||!t.isA("sap.ushell.appIntegration.IframeApplicationContainer")){return}const i=t.getPostMessageTarget();if(i===e){s=t}});if(s){return s}l.error("Cannot find the related application for the service request; using the current application as fallback. This fallback will be removed in future");const t=this.#s();if(t&&t.isA("sap.ushell.appIntegration.IframeApplicationContainer")){return t}}addEventPreprocessor(e){this.#n.push(e)}setRequestHandler(e,s,t={}){if(this.#o[e]){l.error(`Request handler for service ${e} is already defined. Overwriting the existing handler.`)}this.#o[e]={handler:s,options:{...n,...t}}}async sendRequest(e,s,t,i,n){if(this.#r){throw new Error("PostMessageAPI is disabled by configuration.")}if(!this.#i){throw new Error("PostMessageManager is not initialized.")}const a=r();const o={type:"request",request_id:a,service:e,body:s||{}};return this.#w(o,t,i,n)}async sendResponse(e,s,t,i,r,n){if(this.#r){throw new Error("PostMessageAPI is disabled by configuration.")}if(!this.#i){throw new Error("PostMessageManager is not initialized.")}const a={type:"response",request_id:e,service:s,status:i?"success":"error",body:t||{}};return this.#w(a,r,n,false)}async#w(e,s,t,i){if(!s){throw new Error("No content window provided.")}const r=e.request_id;let n=Promise.resolve();if(i){l.debug(`Waiting for response on ${e.service} (${e.request_id}) from iframe with domain '${t}'`);n=this.#M(r,s)}const a=JSON.stringify(e);l.debug(`Sending post message on ${e.service} (${e.request_id}) to iframe with domain '${t}'`,JSON.stringify(e,null,2));s.postMessage(a,t);return n}#M(e,t){const i=new s;const r=this.#P.bind(null,i,e,t);this.#a.push(r);return i.promise}#P(e,s,t,i){const r=typeof window.QUnit==="object";if(!r&&t!==i.source){return false}let n;try{n=JSON.parse(i.data)}catch{return false}if(n?.request_id!==s){return false}l.debug(`Received response for ${n.service} (${n.request_id}) from iframe with domain '${i.origin}'`);if(n.status==="success"){e.resolve(n.body)}else{let s;if(n.body?.message){s=new Error(n.body.message)}else{s=new Error("Unknown error")}if(n.body?.stack){s.stack=n.body.stack}e.reject(s)}return true}async sendRequestToAllApplications(e,s,t){if(this.#r){throw new Error("PostMessageAPI is disabled by configuration.")}if(!this.#i){throw new Error("PostMessageManager is not initialized.")}const i=this.#y(e);const r=[];if(i.activeOnly){r.push(this.#s())}else{this.#t().forEach(e=>{r.push(e)})}const n=r.filter(s=>{if(!s){return false}if(!s.isA("sap.ushell.appIntegration.IframeApplicationContainer")){return false}if(i.ignoreCapabilities||s.supportsCapabilities([e])){return true}if(typeof i?.isValidRequestTarget==="function"){const e=i.isValidRequestTarget(s);return e}return false});const a=n.map(i=>this.sendRequest(e,s,i.getPostMessageTarget(),i.getPostMessageTargetOrigin(),t));return Promise.all(a)}#y(e){return this.#l[e]||a}setDistributionPolicy(e,s={}){if(this.#l[e]){l.error(`Distribution policy for service ${e} is already defined. Overwriting the existing policy.`)}this.#l[e]={...a,...s}}replayStoredMessages(){this.#d=false;this.#c.forEach(e=>{this.#u(e)});this.#c=[]}reset(){removeEventListener("message",this.#e);this.#e=()=>{throw new Error("PostMessageManager is not initialized")};this.#s=()=>{throw new Error("PostMessageManager is not initialized")};this.#t=()=>{throw new Error("PostMessageManager is not initialized")};this.#i=false;this.#r=false;this.#n=[];this.#o={};this.#a=[];this.#l={};this.#d=true;this.#c=[]}}return new d});
//# sourceMappingURL=PostMessageManager.js.map