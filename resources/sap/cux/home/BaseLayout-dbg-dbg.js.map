{"version":3,"file":"BaseLayout-dbg-dbg.js","names":["sap","ui","define","Log","deepEqual","sap_m_library","Page","UI5Element","Lib","HashChanger","__BaseLayoutRenderer","__BasePanel","___library","___utils_Device","_interopRequireDefault","obj","__esModule","default","PageBackgroundDesign","BaseLayoutRenderer","BasePanel","OrientationType","DeviceType","calculateDeviceType","BaseLayout","extend","renderer","metadata","library","properties","enableSettings","type","group","visibility","enableFullScreen","expanded","defaultValue","settingsDialogPersisted","showHeader","showFooter","busy","backgroundDesign","Transparent","persContainerId","defaultAggregation","aggregations","items","singularName","multiple","settingsDialog","keyUserSettingsDialog","contentAdditionDialog","fullScreenContainer","events","onCollapse","constructor","_constructor","id","settings","Page.prototype.constructor.call","init","_init","Page.prototype.init.call","_settingsPanels","_elementConfigs","Map","_i18nBundle","getResourceBundleFor","_slideDurationInSeconds","_fullScreenContainer","getId","setAggregation","onBeforeRendering","_onBeforeRendering","event","Page.prototype.onBeforeRendering.call","_toggleHeaderVisibility","getProperty","selectedKey","getAggregation","openSettingsDialog","setProperty","document","body","style","getCustomHeader","getHeaderContent","length","onAfterRendering","_onAfterRendering","_layoutLoaded","setTimeout","_hashChanger","_loadFullScreenFromHash","getHash","appIntent","split","window","addEventListener","currentHash","location","hash","substring","includes","getContent","_getContent","getItems","_getURLParams","queryString","indexOf","URLSearchParams","hashChanged","arguments","undefined","URLParams","expandedElementName","get","expandedElement","isTargetContainerVisible","targetContainer","getVisible","isPhone","Mobile","_currentExpandedElement","fullScreenName","_toggleFullScreenForElement","has","getElementById","classList","add","updatedHash","_removeURLParam","replaceHash","toggleFullScreen","sourceElements","values","next","value","_openSettingsDialog","context","open","openContentAdditionDialog","_openContentAdditionDialog","setSettingsDialog","_setSettingsDialog","settingsPanels","getPanels","forEach","settingsPanel","_addSettingsPanel","override","push","_getSettingsPanels","_extractElementConfig","element","sourceElement","isPanelElement","getParent","isPanelInSideBySideLayout","SideBySide","Set","index","indexOfItem","key","getKey","registerFullScreenElement","_registerFullScreenElement","elementConfig","set","deregisterFullScreenElement","_deregisterFullScreenElement","delete","updateFullScreenElement","_updateFullScreenElement","updatedConfig","newConfiguration","_addURLParam","toString","_toggleFullScreen","allowToggle","_checkToggleRequirements","panelIndex","indexOfAggregation","isContainerInSideBySideLayout","_detachResizeHandler","_placeClonedElement","toggle","_toggleFullScreenButtonText","_previousExpandedElement","isTargetContainerDifferent","_adjustPreviousExpandedElementIfRequired","_modifyContainer","setHash","_focusFullScreenButton","fireEvent","_domSnapshot","remove","insertItem","_toggleInnerPanelVisibility","_resetScrollPosition","_attachResizeHandler","warning","_getFullScreenContainer","removeAllContent","_sourceElementClone","addContent","currentFullScreenName","firstSourceElement","_scrollPosition","getAssociation","focus","sectionRef","_getSectionRef","scrollTop","indexOfVisiblePanel","_getInnerControl","panel","toggleStyleClass","control","isPanel","isA","parentContainer","updateText","fullScreenButton","_getFullScreenButton","getText","fullScreenMenuItem","_getFullScreenMenuItem","_updateContainerHeader","sectionIndex","getDomRef","childNodes","targetElement","cloneNode","isSideBySideLayout","sourceElementDomRef","targetDomRef","innerHTML","append","_getCurrentExpandedElementName","_getCurrentExpandedElement","isExpandInHash"],"sources":["BaseLayout.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport { Event } from \"jquery\";\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport Log from \"sap/base/Log\";\nimport deepEqual from \"sap/base/util/deepEqual\";\nimport Button from \"sap/m/Button\";\nimport FlexBox from \"sap/m/FlexBox\";\nimport { PageBackgroundDesign } from \"sap/m/library\";\nimport Page from \"sap/m/Page\";\nimport Control from \"sap/ui/core/Control\";\nimport UI5Element, { MetadataOptions } from \"sap/ui/core/Element\";\nimport Lib from \"sap/ui/core/Lib\";\nimport HashChanger from \"sap/ui/core/routing/HashChanger\";\nimport BaseContainer from \"./BaseContainer\";\nimport { $BaseLayoutSettings } from \"./BaseLayout\";\nimport BaseLayoutRenderer from \"./BaseLayoutRenderer\";\nimport BasePanel from \"./BasePanel\";\nimport BaseSettingsDialog from \"./BaseSettingsDialog\";\nimport BaseSettingsPanel from \"./BaseSettingsPanel\";\nimport ContentAdditionDialog from \"./ContentAdditionDialog\";\nimport { OrientationType } from \"./library\";\nimport MenuItem from \"./MenuItem\";\nimport { DeviceType, calculateDeviceType } from \"./utils/Device\";\n\ninterface FullScreenElementConfig {\n\tkey?: string;\n\tindex: number;\n\tfullScreenName?: string;\n\tsourceElements: Set<BaseContainer | BasePanel>;\n\ttargetContainer: BaseContainer;\n}\n\n/**\n *\n * Abstract base class for My Home layout.\n *\n * @extends Page\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @internal\n * @experimental Since 1.121\n * @abstract\n * @public\n *\n * @alias sap.cux.home.BaseLayout\n */\nexport default abstract class BaseLayout extends Page {\n\tprotected _i18nBundle!: ResourceBundle;\n\tprivate _settingsPanels!: BaseSettingsPanel[];\n\tprivate _domSnapshot!: Node;\n\tprivate _sourceElementClone!: Node | Element;\n\tprivate _scrollPosition!: number;\n\tprivate _fullScreenContainer!: Page;\n\tprivate _slideDurationInSeconds!: number;\n\tprivate _layoutLoaded!: boolean;\n\tprivate _hashChanger!: HashChanger;\n\tprivate _currentExpandedElement!: FullScreenElementConfig | undefined;\n\tprivate _previousExpandedElement!: FullScreenElementConfig | undefined;\n\tprivate _elementConfigs!: Map<string, FullScreenElementConfig>;\n\n\tconstructor(id?: string | $BaseLayoutSettings);\n\tconstructor(id?: string, settings?: $BaseLayoutSettings);\n\t/**\n\t * Constructor for a new Base Layout.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $BaseLayoutSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * Indicates whether home settings are enabled for this control.\n\t\t\t */\n\t\t\tenableSettings: { type: \"boolean\", group: \"Misc\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether full screen is enabled for this control.\n\t\t\t */\n\t\t\tenableFullScreen: { type: \"boolean\", group: \"Misc\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether the layout is expanded.\n\t\t\t */\n\t\t\texpanded: { type: \"boolean\", group: \"Misc\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether the settings dialog state is persisted for this control.\n\t\t\t */\n\t\t\tsettingsDialogPersisted: { type: \"boolean\", group: \"Misc\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Whether the layout shall have a header.\n\t\t\t */\n\t\t\tshowHeader: { type: \"boolean\", group: \"Appearance\", defaultValue: true, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Whether this layout shall have a footer.\n\t\t\t */\n\t\t\tshowFooter: { type: \"boolean\", group: \"Appearance\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Whether the layout is currently in busy state.\n\t\t\t */\n\t\t\tbusy: { type: \"boolean\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * This property is used to set the background color of a page.\n\t\t\t */\n\t\t\tbackgroundDesign: {\n\t\t\t\ttype: \"sap.m.PageBackgroundDesign\",\n\t\t\t\tgroup: \"Appearance\",\n\t\t\t\tdefaultValue: PageBackgroundDesign.Transparent,\n\t\t\t\tvisibility: \"hidden\"\n\t\t\t},\n\t\t\t/**\n\t\t\t * Container ID for Ushell Personalisation.\n\t\t\t * This property holds the ID of the personalization container.\n\t\t\t * It is used to store and retrieve personalized settings for the control.\n\t\t\t *\n\t\t\t * @type {string}\n\t\t\t * @public\n\t\t\t */\n\t\t\tpersContainerId: { type: \"string\", defaultValue: \"\", visibility: \"public\" }\n\t\t},\n\t\tdefaultAggregation: \"items\",\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * The items aggregation which should be of type BaseContainer\n\t\t\t */\n\t\t\titems: { type: \"sap.cux.home.BaseContainer\", singularName: \"item\", multiple: true },\n\t\t\t/**\n\t\t\t * The settings dialog aggregation which controls settings for my home controls.\n\t\t\t * It should be of type BaseSettingsDialog.\n\t\t\t * If Not provided, a default settings dialog will be created from sap.cux.home.SettingsDialog.\n\t\t\t * In case of only custom settings panels, the settings dialog should be created and set manually from sap.cux.home.SettingsDialog.\n\t\t\t */\n\t\t\tsettingsDialog: {\n\t\t\t\ttype: \"sap.cux.home.BaseSettingsDialog\",\n\t\t\t\tsingularName: \"settingsDialog\",\n\t\t\t\tmultiple: false\n\t\t\t},\n\t\t\t/**\n\t\t\t * The Key User Settings dialog aggregation which controls key user settings for my home.\n\t\t\t * It should be of type BaseSettingsDialog.\n\t\t\t * If Not provided, a default settings dialog will be created from sap.cux.home.KeyUserSettingsDialog.\n\t\t\t * In case of only custom settings panels, the settings dialog should be created and set manually from sap.cux.home.KeyUserSettingsDialog.\n\t\t\t */\n\t\t\tkeyUserSettingsDialog: {\n\t\t\t\ttype: \"sap.cux.home.BaseSettingsDialog\",\n\t\t\t\tsingularName: \"keyUserSettingsDialog\",\n\t\t\t\tmultiple: false\n\t\t\t},\n\t\t\t/**\n\t\t\t * The content addition dialog aggregation which controls content addition for MyHome.\n\t\t\t */\n\t\t\tcontentAdditionDialog: {\n\t\t\t\ttype: \"sap.cux.home.BaseSettingsDialog\",\n\t\t\t\tsingularName: \"contentAdditionDialog\",\n\t\t\t\tmultiple: false,\n\t\t\t\tvisibility: \"hidden\"\n\t\t\t},\n\t\t\t/**\n\t\t\t * The full screen container to display registered full-screen elements\n\t\t\t */\n\t\t\tfullScreenContainer: { type: \"sap.m.Page\", singularName: \"fullScreenContainer\", multiple: false, visibility: \"hidden\" }\n\t\t},\n\t\tevents: {\n\t\t\t/**\n\t\t\t * Event is fired after the layout is collapsed.\n\t\t\t */\n\t\t\tonCollapse: {}\n\t\t}\n\t};\n\n\tstatic renderer: typeof BaseLayoutRenderer = BaseLayoutRenderer;\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\t\tthis._settingsPanels = [];\n\t\tthis._elementConfigs = new Map();\n\t\tthis._i18nBundle = Lib.getResourceBundleFor(\"sap.cux.home.i18n\") as ResourceBundle;\n\n\t\t//setup full-screen container\n\t\tthis._slideDurationInSeconds = 1;\n\t\tthis._fullScreenContainer = new Page(`${this.getId()}-fullScreen-container`, {\n\t\t\tbackgroundDesign: \"Transparent\",\n\t\t\tshowHeader: false\n\t\t});\n\t\tthis.setAggregation(\"fullScreenContainer\", this._fullScreenContainer);\n\t}\n\n\t/**\n\t * onBeforeRendering lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic onBeforeRendering(event: Event): void {\n\t\tsuper.onBeforeRendering(event);\n\n\t\tthis._toggleHeaderVisibility();\n\n\t\t//open settings dialog if persisted\n\t\tif (this.getProperty(\"settingsDialogPersisted\")) {\n\t\t\tconst selectedKey = (this.getAggregation(\"settingsDialog\") as BaseSettingsDialog)?.getProperty(\"selectedKey\") as string;\n\t\t\tthis.openSettingsDialog(selectedKey);\n\n\t\t\t//reset property\n\t\t\tthis.setProperty(\"settingsDialogPersisted\", false, true);\n\t\t}\n\n\t\t//update full-screen slide animation duration, if enabled\n\t\tif (this.getProperty(\"enableFullScreen\")) {\n\t\t\tdocument.body.style.setProperty(\"--sapUiSlideDuration\", `${this._slideDurationInSeconds}s`);\n\t\t}\n\t}\n\n\t/**\n\t * Toggles the visibility of the header based on the presence of a custom header or header content.\n\t * @private\n\t */\n\tprivate _toggleHeaderVisibility(): void {\n\t\tconst showHeader = this.getCustomHeader() != null || this.getHeaderContent().length > 0;\n\t\tthis.setProperty(\"showHeader\", showHeader, true);\n\t}\n\n\t/**\n\t * onAfterRendering lifecycle method.\n\t *\n\t * @private\n\t */\n\tpublic onAfterRendering(): void {\n\t\t//expand element on load if expanded through URL param\n\t\tif (this.getProperty(\"enableFullScreen\")) {\n\t\t\tif (!this._layoutLoaded) {\n\t\t\t\tthis._layoutLoaded = true;\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis._hashChanger = new HashChanger();\n\t\t\t\t\tthis._loadFullScreenFromHash(this._hashChanger.getHash() || \"\");\n\t\t\t\t\tconst [appIntent] = this._hashChanger.getHash().split(\"?\");\n\n\t\t\t\t\t//attach hash change event for toggling full screen\n\t\t\t\t\twindow.addEventListener?.(\"hashchange\", () => {\n\t\t\t\t\t\tconst currentHash = window.location.hash.substring(1);\n\t\t\t\t\t\t//toggle full screen only if hash is changed from within the app\n\t\t\t\t\t\tif (currentHash.includes?.(appIntent)) {\n\t\t\t\t\t\t\tthis._loadFullScreenFromHash(currentHash, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the content of the BaseLayout.\n\t * Overridden to return the items aggregation during inner page rendering.\n\t *\n\t * @private\n\t * @override\n\t * @returns An array of Control objects representing the content.\n\t */\n\tpublic getContent(): Control[] {\n\t\treturn this.getItems();\n\t}\n\n\t/**\n\t * Extracts URL search parameters from a given hash string.\n\t *\n\t * @private\n\t * @param {string} hash - The hash string containing the URL parameters.\n\t * @returns {URLSearchParams} An instance of URLSearchParams containing the parsed parameters.\n\t */\n\tprivate _getURLParams(hash: string): URLSearchParams {\n\t\tconst queryString = hash?.includes(\"?\") ? hash.substring(hash.indexOf(\"?\") + 1) : \"\";\n\t\treturn new URLSearchParams(queryString);\n\t}\n\n\t/**\n\t * Loads full screen mode from URL hash if enabled.\n\t *\n\t * @private\n\t * @param {string} hash - The URL hash string.\n\t * @param {boolean} [hashChanged=false] - Indicates if the hash has changed.\n\t */\n\tprivate _loadFullScreenFromHash(hash: string, hashChanged: boolean = false): void {\n\t\tconst enableFullScreen = this.getProperty(\"enableFullScreen\") as boolean;\n\t\tconst URLParams = this._getURLParams(hash);\n\t\tconst expandedElementName = URLParams.get(\"expanded\") || \"\";\n\t\tconst expandedElement = this._elementConfigs.get(expandedElementName);\n\t\tconst isTargetContainerVisible = expandedElement?.targetContainer.getVisible() || false;\n\t\tconst isPhone = calculateDeviceType() === DeviceType.Mobile;\n\n\t\tif (enableFullScreen && expandedElement && !isPhone && isTargetContainerVisible) {\n\t\t\tif (this._currentExpandedElement && this._currentExpandedElement.fullScreenName !== expandedElementName) {\n\t\t\t\t//expand element and prevent slide if hash element is found and another element is currently expanded\n\t\t\t\tthis._toggleFullScreenForElement(expandedElement, hashChanged);\n\t\t\t} else if (!this._currentExpandedElement) {\n\t\t\t\t//expand element if hash element is found and no element is currently expanded\n\t\t\t\tthis._toggleFullScreenForElement(expandedElement);\n\t\t\t} else if (URLParams.has(\"expanded\")) {\n\t\t\t\t//retain the slide transition in case of hash switch\n\t\t\t\tdocument.getElementById(`${this.getId()}-layout-container`)?.classList.add(\"slide\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._currentExpandedElement) {\n\t\t\t\t//collapse expanded element if hash element not found\n\t\t\t\tthis._toggleFullScreenForElement(this._currentExpandedElement);\n\t\t\t} else {\n\t\t\t\t//reset hash if no expanded element found\n\t\t\t\tif (URLParams.has(\"expanded\")) {\n\t\t\t\t\tconst updatedHash = this._removeURLParam(hash, \"expanded\");\n\t\t\t\t\tthis._hashChanger?.replaceHash(updatedHash, \"Backwards\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Toggles full screen mode for the specified element.\n\t *\n\t * @private\n\t * @param {FullScreenElementConfig} expandedElement - The configuration of the element to be expanded.\n\t * @param {boolean} [hashChanged=false] - Indicates if the hash has changed, affecting the toggle behavior.\n\t */\n\tprivate _toggleFullScreenForElement(expandedElement: FullScreenElementConfig, hashChanged: boolean = false): void {\n\t\tsetTimeout(() => this.toggleFullScreen(expandedElement.sourceElements.values().next().value!, hashChanged));\n\t}\n\n\t/**\n\t * Opens the settings dialog and navigate to the panel\n\t * specified by the selected key.\n\t *\n\t * @private\n\t * @param {string} selectedKey The key of the panel to navigate to\n\t */\n\tpublic openSettingsDialog(selectedKey: string = \"\", context: object = {}): void {\n\t\tconst settingsDialog = this.getAggregation(\"settingsDialog\") as BaseSettingsDialog;\n\t\tsettingsDialog?.setProperty(\"selectedKey\", selectedKey);\n\t\tsettingsDialog?.setProperty(\"context\", context);\n\t\tsettingsDialog?.open();\n\t}\n\n\t/**\n\t * Opens the content addition dialog and opens the selected panel.\n\t *\n\t * @param {string} [selectedKey=\"\"] - The key to be set for the content addition dialog. Defaults to an empty string.\n\t */\n\tpublic openContentAdditionDialog(selectedKey: string = \"\"): void {\n\t\tconst contentAdditionDialog = this.getAggregation(\"contentAdditionDialog\") as ContentAdditionDialog;\n\t\tcontentAdditionDialog?.setProperty(\"selectedKey\", selectedKey);\n\t\tcontentAdditionDialog?.open();\n\t}\n\n\t/**\n\t * Sets SettingsDialog aggregation.\n\t * Overridden to update cached settings panels.\n\t *\n\t * @public\n\t * @override\n\t * @returns {BaseSettingsDialog} the dialog for chaining\n\t */\n\tpublic setSettingsDialog(settingsDialog: BaseSettingsDialog): this {\n\t\tconst enableSettings = this.getProperty(\"enableSettings\") as boolean;\n\t\tif (enableSettings) {\n\t\t\tconst settingsPanels = settingsDialog?.getPanels();\n\t\t\tsettingsPanels?.forEach((settingsPanel: BaseSettingsPanel) => {\n\t\t\t\tthis._addSettingsPanel(settingsPanel);\n\t\t\t});\n\t\t}\n\t\tthis.setAggregation(\"settingsDialog\", settingsDialog);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a settings panel to the list of settings panels associated\n\t * with the layout's settings dialog.\n\t *\n\t * @param {BaseSettingsPanel} settingsPanel - The settings panel to be added.\n\t * @private\n\t */\n\tpublic _addSettingsPanel(settingsPanel: BaseSettingsPanel | BaseSettingsPanel[] | undefined, override?: boolean): void {\n\t\tif (settingsPanel) {\n\t\t\tif (override) {\n\t\t\t\tthis._settingsPanels = settingsPanel as BaseSettingsPanel[];\n\t\t\t} else {\n\t\t\t\tthis._settingsPanels.push(settingsPanel as BaseSettingsPanel);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adds a settings panel to the list of settings panels associated\n\t * with the layout's settings dialog.\n\t *\n\t * @param {BaseSettingsPanel} settingsPanel - The settings panel to be added.\n\t * @private\n\t */\n\tpublic _getSettingsPanels(): BaseSettingsPanel[] {\n\t\treturn this._settingsPanels;\n\t}\n\n\t/**\n\t * Extracts the configuration necessary for handling full-screen functionality of an element.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element for which to extract the full-screen configuration.\n\t * @returns {FullScreenElementConfig} Full screen element configuration.\n\t */\n\tprivate _extractElementConfig(element: BaseContainer | BasePanel): FullScreenElementConfig {\n\t\tconst sourceElement = element;\n\t\tconst isPanelElement = sourceElement instanceof BasePanel;\n\t\tconst targetContainer = isPanelElement ? (sourceElement.getParent() as BaseContainer) : sourceElement;\n\t\tconst isPanelInSideBySideLayout = isPanelElement && targetContainer.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst fullScreenName = (isPanelInSideBySideLayout ? targetContainer : sourceElement).getProperty(\"fullScreenName\") as string;\n\t\tconst sourceElements = new Set<BaseContainer | BasePanel>().add(sourceElement);\n\n\t\treturn {\n\t\t\tfullScreenName,\n\t\t\tsourceElements,\n\t\t\ttargetContainer,\n\t\t\tindex: this.indexOfItem(targetContainer),\n\t\t\tkey: isPanelElement ? sourceElement.getKey() : \"\"\n\t\t};\n\t}\n\n\t/**\n\t * Configures an element for full-screen functionality by extracting and storing its configuration.\n\t * Only stores the configuration if a full-screen name is provided and layout is not currently expanded.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element to configure for full-screen.\n\t */\n\tpublic registerFullScreenElement(element: BaseContainer | BasePanel): void {\n\t\tconst elementConfig = this._extractElementConfig(element);\n\t\tconst { fullScreenName } = elementConfig;\n\n\t\tif (fullScreenName && !this.getProperty(\"expanded\")) {\n\t\t\tif (this._elementConfigs.get(fullScreenName)) {\n\t\t\t\tconst sourceElements = (\n\t\t\t\t\tthis._elementConfigs.get(fullScreenName)?.sourceElements || new Set<BaseContainer | BasePanel>()\n\t\t\t\t).add(element);\n\t\t\t\tthis._elementConfigs.set(fullScreenName, { ...elementConfig, sourceElements } as FullScreenElementConfig);\n\t\t\t} else {\n\t\t\t\tthis._elementConfigs.set(fullScreenName, elementConfig);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes an element's full-screen configuration based on its full-screen name.\n\t * Only removes the configuration if a full-screen name is provided and layout is not currently expanded.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element to remove from full-screen configuration.\n\t */\n\tpublic deregisterFullScreenElement(element: BaseContainer | BasePanel): void {\n\t\tconst { fullScreenName } = this._extractElementConfig(element);\n\t\tif (fullScreenName && !this.getProperty(\"expanded\")) {\n\t\t\tthis._elementConfigs.delete(fullScreenName);\n\t\t}\n\t}\n\n\t/**\n\t * Updates the full screen configuration for the specified element.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element for which the full screen configuration is to be updated.\n\t * @param {Partial<FullScreenElementConfig>} [updatedConfig] - An optional partial configuration to update the element's full screen configuration.\n\t *\n\t * @returns {void}\n\t */\n\tpublic updateFullScreenElement(element: BaseContainer | BasePanel, updatedConfig?: Partial<FullScreenElementConfig>): void {\n\t\tconst elementConfig = this._extractElementConfig(element);\n\t\tconst { fullScreenName } = elementConfig;\n\n\t\tif (fullScreenName && !this.getProperty(\"expanded\")) {\n\t\t\tconst newConfiguration = { ...this._elementConfigs.get(fullScreenName), ...updatedConfig } as FullScreenElementConfig;\n\t\t\tthis._elementConfigs.set(fullScreenName, newConfiguration);\n\t\t}\n\t}\n\n\t/**\n\t * Adds or updates a URL parameter in the given hash string.\n\t *\n\t * @private\n\t * @param {string} hash - The original hash string.\n\t * @param {string} key - The parameter key to add or update.\n\t * @param {string} value - The value for the parameter.\n\t * @returns {string} The updated hash string with the new or updated parameter.\n\t */\n\tprivate _addURLParam(hash: string, key: string, value: string): string {\n\t\tconst URLParams = this._getURLParams(hash);\n\t\tURLParams.set(key, value);\n\t\treturn `${hash.split(\"?\")[0]}?${URLParams.toString()}`;\n\t}\n\n\t/**\n\t * Removes a specified parameter from the URL hash string.\n\t *\n\t * @private\n\t * @param {string} hash - The original hash string.\n\t * @param {string} key - The parameter key to remove.\n\t * @returns {string} The updated hash string without the specified parameter.\n\t */\n\tprivate _removeURLParam(hash: string, key: string): string {\n\t\tconst URLParams = this._getURLParams(hash);\n\t\tURLParams.delete(key);\n\t\treturn URLParams.toString() ? `${hash.split(\"?\")[0]}?${URLParams.toString()}` : hash.split(\"?\")[0];\n\t}\n\n\t/**\n\t * Toggles the full-screen state of a given element, handling layout adjustments, visibility, and scroll position.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element to toggle full-screen state for.\n\t * @param {boolean} [hashChanged=false] - Indicates if the hash has changed.\n\t */\n\tpublic toggleFullScreen(element: BaseContainer | BasePanel, hashChanged: boolean = false): void {\n\t\tconst isPanelInSideBySideLayout =\n\t\t\telement instanceof BasePanel && element.getParent()?.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst fullScreenName = (isPanelInSideBySideLayout ? element.getParent() : element)?.getProperty(\"fullScreenName\") as string;\n\t\tconst elementConfig = this._elementConfigs.get(fullScreenName);\n\t\tconst allowToggle = hashChanged || this._checkToggleRequirements(elementConfig as FullScreenElementConfig);\n\n\t\tif (elementConfig && allowToggle) {\n\t\t\tconst { targetContainer } = elementConfig;\n\t\t\tconst currentHash = this._hashChanger?.getHash() || \"\";\n\t\t\tconst panelIndex = targetContainer.indexOfAggregation(\"content\", element);\n\t\t\tconst isContainerInSideBySideLayout = targetContainer.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\t\tlet expanded = this.getProperty(\"expanded\") as boolean;\n\t\t\t// detach resize handler\n\t\t\ttargetContainer._detachResizeHandler();\n\t\t\tif (!hashChanged) {\n\t\t\t\t//update expanded state\n\t\t\t\tthis.setProperty(\"expanded\", !this.getProperty(\"expanded\"), true);\n\t\t\t\texpanded = this.getProperty(\"expanded\") as boolean;\n\n\t\t\t\t//place cloned element in full screen container\n\t\t\t\tthis._placeClonedElement(targetContainer, expanded, panelIndex);\n\n\t\t\t\t//perform slide transition\n\t\t\t\tdocument.getElementById(`${this.getId()}-layout-container`)?.classList.toggle(\"slide\", expanded);\n\t\t\t}\n\n\t\t\t//toggle full-screen button text for the element\n\t\t\tthis._toggleFullScreenButtonText(element, expanded);\n\n\t\t\t// store the current and previous expanded element\n\t\t\tif (expanded) {\n\t\t\t\tthis._previousExpandedElement = this._currentExpandedElement;\n\t\t\t\tthis._currentExpandedElement = elementConfig;\n\t\t\t} else {\n\t\t\t\tdelete this._currentExpandedElement;\n\t\t\t}\n\n\t\t\t//add or remove actual element at the end of slide transition\n\t\t\tsetTimeout(\n\t\t\t\t() => {\n\t\t\t\t\tif (expanded) {\n\t\t\t\t\t\t// in case of horizontal or vertical layout, set expanded element's key as selected key\n\t\t\t\t\t\tif (!isContainerInSideBySideLayout) {\n\t\t\t\t\t\t\ttargetContainer.setProperty(\"selectedKey\", element.getProperty(\"key\"));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//adjust currently expanded element if present\n\t\t\t\t\t\tconst isTargetContainerDifferent = !deepEqual(this._previousExpandedElement?.targetContainer, targetContainer);\n\t\t\t\t\t\tthis._adjustPreviousExpandedElementIfRequired(isTargetContainerDifferent);\n\n\t\t\t\t\t\tthis._modifyContainer(targetContainer, panelIndex);\n\n\t\t\t\t\t\t//adjust hash\n\t\t\t\t\t\tthis._currentExpandedElement = elementConfig;\n\t\t\t\t\t\tconst updatedHash = this._addURLParam(currentHash, \"expanded\", fullScreenName);\n\t\t\t\t\t\tthis._hashChanger?.setHash(updatedHash);\n\n\t\t\t\t\t\tthis._focusFullScreenButton(element);\n\t\t\t\t\t\t//fire onExpand event\n\t\t\t\t\t\telement.fireEvent(\"onExpand\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//delete stored dom snapshot\n\t\t\t\t\t\t(this._domSnapshot as Element)?.remove();\n\n\t\t\t\t\t\tthis.insertItem(targetContainer, elementConfig.index);\n\n\t\t\t\t\t\t//show all other panels in the container, if not in side-by-side layout\n\t\t\t\t\t\tif (!isContainerInSideBySideLayout) {\n\t\t\t\t\t\t\tthis._toggleInnerPanelVisibility(targetContainer, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//adjust hash\n\t\t\t\t\t\tdelete this._currentExpandedElement;\n\t\t\t\t\t\tconst updatedHash = this._removeURLParam(currentHash, \"expanded\");\n\t\t\t\t\t\tthis._hashChanger?.setHash(updatedHash);\n\n\t\t\t\t\t\t//reset scroll position on collapse\n\t\t\t\t\t\tthis._resetScrollPosition(element);\n\n\t\t\t\t\t\t//fire onCollapse event\n\t\t\t\t\t\tthis.fireEvent(\"onCollapse\");\n\t\t\t\t\t}\n\t\t\t\t\t// attach resize handler\n\t\t\t\t\ttargetContainer._attachResizeHandler();\n\t\t\t\t},\n\t\t\t\thashChanged ? 0 : this._slideDurationInSeconds * 1000\n\t\t\t);\n\t\t} else {\n\t\t\tLog.warning(`Element with ID: ${element?.getId()} not registered for full screen`);\n\t\t}\n\t}\n\n\t/**\n\t * Place actual element in the full screen container and hide all other panels in the container, if not in side-by-side layout\n\t *\n\t * @private\n\t * @param {BaseContainer} targetContainer - Container that is to be displayed in full-screen mode\n\t * @param {number} panelIndex - Index of the panel to remain visible if not in side-by-side layout.\n\t */\n\tprivate _modifyContainer(targetContainer: BaseContainer, panelIndex: number) {\n\t\t//adjust currently expanded element if present\n\t\tconst isContainerInSideBySideLayout = targetContainer.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst isTargetContainerDifferent = !deepEqual(this._previousExpandedElement?.targetContainer, targetContainer);\n\t\tif (!this._previousExpandedElement || isTargetContainerDifferent) {\n\t\t\tthis._getFullScreenContainer().removeAllContent();\n\t\t\t(this._sourceElementClone as Element)?.remove();\n\t\t\tthis._getFullScreenContainer().addContent(targetContainer as Control);\n\t\t}\n\n\t\t//hide all other panels in the container, if not in side-by-side layout\n\t\tif (!isContainerInSideBySideLayout) {\n\t\t\tthis._toggleInnerPanelVisibility(targetContainer, false, panelIndex);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the toggle requirements are met for the given element configuration.\n\t *\n\t * @private\n\t * @param {FullScreenElementConfig} elementConfig - The configuration of the element to check.\n\t * @returns {boolean} `true` if toggling is allowed, otherwise `false`.\n\t */\n\tprivate _checkToggleRequirements(elementConfig: FullScreenElementConfig): boolean {\n\t\tconst expanded = this.getProperty(\"expanded\") as boolean;\n\t\tlet allowToggle = true;\n\n\t\tif (expanded) {\n\t\t\t// if expanded, allow toggling only if the provided element and expanded element are the same\n\t\t\tconst currentFullScreenName = elementConfig?.fullScreenName;\n\t\t\tallowToggle = this._currentExpandedElement?.fullScreenName === currentFullScreenName;\n\t\t}\n\n\t\treturn allowToggle;\n\t}\n\n\t/**\n\t * Adjusts the current expanded element if required based on the new target container.\n\t *\n\t * @private\n\t * @param {boolean} isTargetContainerDifferent - Indicates whether the target container is different from the current expanded element's container.\n\t */\n\tprivate _adjustPreviousExpandedElementIfRequired(isTargetContainerDifferent: boolean) {\n\t\tif (this._previousExpandedElement) {\n\t\t\tconst firstSourceElement = this._previousExpandedElement.sourceElements.values().next().value!;\n\n\t\t\t//update full-screen button text for the current expanded element to collapsed state\n\t\t\tthis._toggleFullScreenButtonText(firstSourceElement, false);\n\n\t\t\tif (isTargetContainerDifferent) {\n\t\t\t\t//if expanded through hash change, place the current expanded element back in the layout\n\t\t\t\tthis.insertItem(this._previousExpandedElement.targetContainer, this._previousExpandedElement.index);\n\n\t\t\t\t//reset scroll position on expansion throuh hash change\n\t\t\t\tthis._scrollPosition = 0;\n\n\t\t\t\t//show all other panels in the container, if not in side-by-side layout\n\t\t\t\tif (this._previousExpandedElement.targetContainer.getProperty(\"orientation\") !== OrientationType.SideBySide) {\n\t\t\t\t\tthis._toggleInnerPanelVisibility(this._previousExpandedElement.targetContainer, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Resets the scroll position to that of the collapsed element in the original container.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element for which to reset the scroll position.\n\t */\n\tprivate _resetScrollPosition(element: BaseContainer | BasePanel) {\n\t\t//reset scroll position\n\t\tsetTimeout(() => {\n\t\t\tUI5Element.getElementById(`${element.getAssociation(\"fullScreenButton\", null) as string}-btn`)?.focus();\n\t\t\tconst sectionRef = this._getSectionRef(this);\n\t\t\tif (sectionRef !== undefined) {\n\t\t\t\tsectionRef.scrollTop = this._scrollPosition;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Toggles visibility of inner panels, except one specified by index.\n\t * Applicable only for panels not in SideSide layout.\n\t *\n\t * @private\n\t * @param {BaseContainer} element - Container with inner panels.\n\t * @param {boolean} visibility - Desired visibility state for panels.\n\t * @param {number} [indexOfVisiblePanel] - Index of panel to exclude from toggle.\n\t */\n\tprivate _toggleInnerPanelVisibility(element: BaseContainer, visibility: boolean, indexOfVisiblePanel?: number): void {\n\t\t(element._getInnerControl() as FlexBox).getItems().forEach((panel, index) => {\n\t\t\tpanel.toggleStyleClass(\"sapCuxHidden\", index === indexOfVisiblePanel ? visibility : !visibility);\n\t\t});\n\t}\n\n\t/**\n\t * Updates the full-screen button text for a control (or all controls in a side-by-side layout) based on expanded state.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - The control to update or the parent of controls to update.\n\t * @param {boolean} expanded - Indicates if the text should reflect an expanded or collapsed state.\n\t */\n\tprivate _toggleFullScreenButtonText(control: BaseContainer | BasePanel, expanded: boolean): void {\n\t\tconst isPanel = control.isA(\"sap.cux.home.BasePanel\");\n\t\tconst parentContainer = (isPanel ? control.getParent() : control) as BaseContainer;\n\t\tconst isPanelInSideBySideLayout = isPanel && parentContainer.getProperty(\"orientation\") === OrientationType.SideBySide;\n\n\t\t//update full-screen button text\n\t\tconst updateText = (control: BaseContainer | BasePanel) => {\n\t\t\tconst fullScreenButton = this._getFullScreenButton(control);\n\t\t\tfullScreenButton.setProperty(\"text\", this._i18nBundle.getText(expanded ? \"collapse\" : \"expand\"), true);\n\t\t\tconst fullScreenMenuItem = this._getFullScreenMenuItem(control);\n\t\t\tfullScreenMenuItem.setProperty(\"title\", this._i18nBundle.getText(expanded ? \"collapse\" : \"expand\"), true);\n\t\t};\n\n\t\tif (isPanelInSideBySideLayout) {\n\t\t\tparentContainer.getContent()?.forEach(updateText);\n\t\t} else {\n\t\t\tupdateText(control);\n\t\t}\n\n\t\t//update container header elements\n\t\tparentContainer._updateContainerHeader(isPanelInSideBySideLayout ? parentContainer : control);\n\t}\n\n\t/**\n\t * Sets focus on the full-screen button associated with an element.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element whose full-screen button should be focused.\n\t */\n\tprivate _focusFullScreenButton(element: BaseContainer | BasePanel): void {\n\t\tsetTimeout(() => {\n\t\t\tUI5Element.getElementById(`${element.getAssociation(\"fullScreenButton\", null) as string}-btn`)?.focus();\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves the full-screen button associated with a control.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - The control to find the full-screen button for.\n\t * @returns {Button} The full-screen button associated with the control.\n\t */\n\tprivate _getFullScreenButton(control: BaseContainer | BasePanel): Button {\n\t\treturn UI5Element.getElementById(control.getAssociation(\"fullScreenButton\", null) as string) as Button;\n\t}\n\n\t/**\n\t * Retrieves the Full screen menu item associated with a control.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - The control to find the full-screen button for.\n\t * @returns {MenuItem} The \"Show More\" menu item associated with the control.\n\t */\n\tprivate _getFullScreenMenuItem(control: BaseContainer | BasePanel): MenuItem {\n\t\treturn UI5Element.getElementById(control.getAssociation(\"fullScreenMenuItem\", null) as string) as MenuItem;\n\t}\n\n\t/**\n\t * Retrieves the full-screen container from the current aggregation.\n\t *\n\t * @private\n\t * @returns {Page} The Page instance used as the full-screen container.\n\t */\n\tpublic _getFullScreenContainer(): Page {\n\t\treturn this.getAggregation(\"fullScreenContainer\") as Page;\n\t}\n\n\t/**\n\t * Gets the first child node of a control's DOM reference.\n\t *\n\t * @private\n\t * @param {Control} element - The control to get the child node for.\n\t * @returns {Node | Element} The first child node of the control's DOM reference.\n\t */\n\tprivate _getSectionRef<T extends Node | Element = Element>(element: Control): T | undefined {\n\t\tconst sectionIndex = this.getProperty(\"showHeader\") && element !== this._getFullScreenContainer() ? 1 : 0;\n\t\treturn element.getDomRef()?.childNodes[sectionIndex] as T;\n\t}\n\n\t/**\n\t * Clones and places an element into a target container for full-screen transitions.\n\t *\n\t * @private\n\t * @param {BaseContainer} targetElement - Element to clone or containing the element to clone.\n\t * @param {boolean} expanded - True to expand (clone and place), false to collapse (restore from snapshot).\n\t * @param {number} panelIndex - Index of the panel to clone if not in side-by-side layout.\n\t */\n\tprivate _placeClonedElement(targetElement: BaseContainer, expanded: boolean, panelIndex: number) {\n\t\t//store scroll position and DOM snapshot\n\t\tthis._scrollPosition = (expanded ? this._getSectionRef(this)?.scrollTop : this._scrollPosition) as number;\n\n\t\t//create a snapshot of the homepage in collapsed mode for use in transition back from full screen.\n\t\t//the dom ref had to be cloned twice following rendering issues in the Insights Tiles section.\n\t\tthis._domSnapshot = (expanded ? this.getDomRef()?.cloneNode(true).cloneNode(true) : this._domSnapshot) as Node;\n\n\t\tconst isSideBySideLayout = targetElement.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst sourceElement = isSideBySideLayout\n\t\t\t? targetElement\n\t\t\t: (targetElement._getInnerControl() as FlexBox)?.getItems()[panelIndex] || targetElement;\n\t\tconst sourceElementDomRef = sourceElement.getDomRef() || targetElement.getDomRef();\n\t\tthis._sourceElementClone = expanded ? (sourceElementDomRef?.cloneNode(true) as Node) : this._sourceElementClone;\n\t\tconst targetDomRef = expanded ? this._getSectionRef(this._getFullScreenContainer()) : this.getDomRef();\n\t\tif (targetDomRef) {\n\t\t\tsetTimeout(() => {\n\t\t\t\ttargetDomRef.innerHTML = \"\";\n\t\t\t\ttargetDomRef.append(expanded ? this._sourceElementClone : this._domSnapshot);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the name of the currently expanded element, if any.\n\t *\n\t * @private\n\t * @returns {string | undefined} - The full screen name of the currently expanded element, if any.\n\t */\n\tpublic _getCurrentExpandedElementName(): string | undefined {\n\t\treturn this._getCurrentExpandedElement()?.fullScreenName;\n\t}\n\n\t/**\n\t * Retrieves the currently expanded element config, if any\n\t *\n\t * @private\n\t * @returns {FullScreenElementConfig | undefined} - The full screen name of the currently expanded element, if any.\n\t */\n\tpublic _getCurrentExpandedElement(): FullScreenElementConfig | undefined {\n\t\tconst isExpandInHash = this._getURLParams(this._hashChanger?.getHash() || \"\").has(\"expanded\");\n\t\tif (isExpandInHash) {\n\t\t\treturn this._currentExpandedElement;\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}