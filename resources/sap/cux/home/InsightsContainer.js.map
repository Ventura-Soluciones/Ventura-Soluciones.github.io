{"version":3,"file":"InsightsContainer.js","names":["sap","ui","define","__BaseContainer","__CardsPanel","__ErrorPanel","___InsightsContainerGenericPlaceholder","__TilesPanel","___utils_Device","___utils_InsightsUtils","_interopRequireDefault","obj","__esModule","default","BaseContainer","CardsPanel","cardsContainerActionButtons","cardsContainerMenuItems","ErrorPanel","getInsightsPlaceholder","TilesPanel","tilesContainerActionButtons","tilesContainerMenuItems","DeviceType","sortMenuItems","tilesPanelName","cardsPanelName","sortedMenuItems","REFRESH","ADD_APPS","EDIT_TILES","EDIT_CARDS","AI_INSIGHT_CARD","SHOW_MORE","InsightsContainer","extend","renderer","apiVersion","constructor","_constructor","id","settings","BaseContainer.prototype.constructor.call","this","_isInitialRender","init","_init","BaseContainer.prototype.init.call","setProperty","_i18nBundle","getText","panelLoaded","loaded","undefined","count","panelContext","setTooltip","String","addCustomSetting","load","_load","aContent","getContent","forEach","oContent","getMetadata","getName","addCommonMenuItems","getContainerMenuItems","addCommonActionButtons","getContainerActionButtons","_addContainerHeader","content","panel","handleHideHeader","attachHandleHidePanel","handleHidePanel","attachHandleUnhidePanel","unhidePanelIfHidden","renderPanel","_handleHidePanel","removeContent","panelName","handlePanelLoad","panels","_getLoadedPanelNames","visibleOrPendingPanels","getVisibleOrPendingPanels","panelCount","length","_errorPanel","getId","messageTitle","messageDescription","getData","addAggregation","hiddenMenuItems","hiddenActionButtons","_hideMenuItems","_hideActionButtons","_removeContainerHeader","getAggregation","menuItem","toggleMenuListItem","actionButton","toggleActionButton","handleAddHeader","containerMenuItems","includedInHiddenItems","some","hiddenItem","includes","containerActionButtons","updatePanelsItemCount","_updatePanelsItemCount","itemCount","_unhidePanelIfHidden","layout","_getLayout","panelExpandedName","_getCurrentExpandedElementName","processPanelVisibility","insertContentFn","panelWrapper","_getPanelContentWrapper","getProperty","hasStyleClass","removeStyleClass","listener","detachOnCollapse","attachOnCollapse","insertContent","addContent","_updateHeaderElements","adjustLayout","_adjustLayout","getDeviceType","Mobile","toggleActionButtons","ADD_TILES","_addCommonMenuItems","menuItems","_sortMenuItems","_addCommonActionButtons","actionButtons","_handlePanelLoad","oVal","updateActionButton","_updateActionButton","visibility","text","getVisible","setText","_updateContainerHeader","updateMenuItem","_updateMenuItem","getTitle","setTitle","Object","keys","filter","_getVisibleOrPendingPanels","removeAllAggregation","getGenericPlaceholderContent","_getGenericPlaceholderContent"],"sources":["InsightsContainer.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Button from \"sap/m/Button\";\nimport type { $BaseContainerSettings } from \"./BaseContainer\";\nimport BaseContainer from \"./BaseContainer\";\nimport BasePanel from \"./BasePanel\";\nimport CardsPanel, { cardsContainerActionButtons, cardsContainerMenuItems } from \"./CardsPanel\";\nimport ErrorPanel from \"./ErrorPanel\";\nimport { getInsightsPlaceholder } from \"./InsightsContainerGenericPlaceholder\";\nimport MenuItem from \"./MenuItem\";\nimport TilesPanel, { tilesContainerActionButtons, tilesContainerMenuItems } from \"./TilesPanel\";\nimport { DeviceType } from \"./utils/Device\";\nimport { sortMenuItems } from \"./utils/InsightsUtils\";\n\nconst tilesPanelName: string = \"sap.cux.home.TilesPanel\";\nconst cardsPanelName: string = \"sap.cux.home.CardsPanel\";\nconst sortedMenuItems: (tilesContainerMenuItems | cardsContainerMenuItems | string)[] = [\n\ttilesContainerMenuItems.REFRESH,\n\tcardsContainerMenuItems.REFRESH,\n\ttilesContainerMenuItems.ADD_APPS,\n\ttilesContainerMenuItems.EDIT_TILES,\n\tcardsContainerMenuItems.EDIT_CARDS,\n\tcardsContainerMenuItems.AI_INSIGHT_CARD,\n\ttilesContainerMenuItems.SHOW_MORE,\n\tcardsContainerMenuItems.SHOW_MORE,\n\t\"settings\"\n];\n\ninterface IpanelLoaded {\n\t[key: string]: { loaded: boolean | undefined; count: number };\n}\n\ninterface IpanelContext {\n\t[key: string]: TilesPanel | CardsPanel;\n}\n\n/**\n *\n * Container class for managing and storing Insights Tiles and Insights Cards.\n *\n * @extends sap.cux.home.BaseContainer\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @internal\n * @experimental Since 1.121\n * @public\n *\n * @alias sap.cux.home.InsightsContainer\n */\n\nexport default class InsightsContainer extends BaseContainer {\n\tstatic readonly renderer = {\n\t\t...BaseContainer.renderer,\n\t\tapiVersion: 2\n\t};\n\tprivate _errorPanel!: ErrorPanel;\n\tprivate _isInitialRender: boolean = true;\n\tprivate panelLoaded!: IpanelLoaded;\n\tprivate panelContext!: IpanelContext;\n\n\tconstructor(id?: string | $BaseContainerSettings);\n\tconstructor(id?: string, settings?: $BaseContainerSettings);\n\t/**\n\t * Constructor for a new Insights container.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $BaseContainerSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\t\tthis.setProperty(\"title\", this._i18nBundle?.getText(\"insights\"));\n\t\t/* As Container Level default value for enableSettings is false,\n\t\t\tthis needs to be added from container level.\n\t\t\t(default value cannot be true as News & Page Container header should be hidden)\n\t\t*/\n\t\tthis.setProperty(\"enableSettings\", true);\n\t\tthis.setProperty(\"orientation\", \"Vertical\");\n\t\tthis.panelLoaded = {\n\t\t\t[tilesPanelName]: { loaded: undefined, count: 0 },\n\t\t\t[cardsPanelName]: { loaded: undefined, count: 0 }\n\t\t};\n\t\tthis.panelContext = {};\n\t\tthis.setTooltip(String(this._i18nBundle.getText(\"insights\")));\n\t\tthis.addCustomSetting(\"title\", this._i18nBundle.getText(\"insightLayoutSectionTitle\") as string);\n\t\tthis.setTooltip(String(this._i18nBundle.getText(\"insightLayoutSectionTitle\")));\n\t}\n\n\t/**\n\t * Loads the Insights section.\n\t * Overrides the load method of the BaseContainer.\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic load() {\n\t\tif (this._isInitialRender) {\n\t\t\tconst aContent = this.getContent();\n\t\t\taContent.forEach((oContent) => {\n\t\t\t\tthis.panelContext[oContent.getMetadata().getName()] = oContent as TilesPanel | CardsPanel;\n\t\t\t\tthis.addCommonMenuItems((oContent as TilesPanel | CardsPanel).getContainerMenuItems?.());\n\t\t\t\tthis.addCommonActionButtons((oContent as TilesPanel | CardsPanel).getContainerActionButtons?.());\n\t\t\t});\n\n\t\t\tthis._addContainerHeader();\n\n\t\t\t// Render individual panels\n\t\t\taContent.forEach((content) => {\n\t\t\t\tconst panel = content as TilesPanel | CardsPanel;\n\t\t\t\tpanel.handleHideHeader();\n\t\t\t\tpanel.attachHandleHidePanel(() => this.handleHidePanel(panel));\n\t\t\t\tpanel.attachHandleUnhidePanel(() => this.unhidePanelIfHidden(panel));\n\t\t\t\tvoid panel.renderPanel();\n\t\t\t});\n\t\t\tthis._isInitialRender = false;\n\t\t}\n\t}\n\n\t/**\n\t * Handles the hiding of a panel by removing its content, updating the panel load status,\n\t * and managing the display of the container header and error panel.\n\t *\n\t * @param {BasePanel} panel - The panel to be hidden.\n\t * @private\n\t */\n\tpublic handleHidePanel(panel: BasePanel) {\n\t\tthis.removeContent(panel);\n\t\tconst panelName = panel.getMetadata().getName();\n\t\tthis.handlePanelLoad(panelName, { loaded: false, count: 0 });\n\t\tconst panels = this._getLoadedPanelNames() || [];\n\t\tconst visibleOrPendingPanels = this.getVisibleOrPendingPanels() || [];\n\t\tconst panelCount = panels?.length;\n\t\tthis._addContainerHeader();\n\t\t// only show error panel if all panels loaded state is false\n\t\tif (visibleOrPendingPanels.length === 0) {\n\t\t\tif (!this._errorPanel) {\n\t\t\t\tthis._errorPanel = new ErrorPanel(`${this.getId()}-errorPanel`, {\n\t\t\t\t\tmessageTitle: this._i18nBundle.getText(\"noAppsTitle\"),\n\t\t\t\t\tmessageDescription: this._i18nBundle.getText(\"noInsightsMsg\")\n\t\t\t\t});\n\t\t\t\tthis._errorPanel.getData();\n\t\t\t}\n\t\t\tthis.addAggregation(\"content\", this._errorPanel);\n\t\t} else if (panelCount === 1) {\n\t\t\tconst panel = this.getContent()[0];\n\t\t\tif (panel && !(panel instanceof ErrorPanel)) {\n\t\t\t\t(panel as TilesPanel | CardsPanel)?.handleHideHeader();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adds the container header based on the number of visible panels.\n\t *\n\t * @private\n\t */\n\tprivate _addContainerHeader() {\n\t\tconst panels: string[] = this._getLoadedPanelNames();\n\t\tlet hiddenMenuItems: string[] = [];\n\t\tlet hiddenActionButtons: string[] = [];\n\t\tthis.setProperty(\"title\", this._i18nBundle?.getText(\"insights\"));\n\t\tif (panels.length === 0 || this.getContent()[0] instanceof ErrorPanel) {\n\t\t\thiddenMenuItems = [\n\t\t\t\ttilesContainerMenuItems.REFRESH,\n\t\t\t\tcardsContainerMenuItems.REFRESH,\n\t\t\t\ttilesContainerMenuItems.SHOW_MORE,\n\t\t\t\tcardsContainerMenuItems.SHOW_MORE\n\t\t\t];\n\t\t\tthis._hideMenuItems(hiddenMenuItems);\n\t\t\thiddenActionButtons = [tilesContainerActionButtons.SHOW_MORE, cardsContainerActionButtons.SHOW_MORE];\n\t\t\tthis._hideActionButtons(hiddenActionButtons);\n\t\t} else if (panels.length === 1) {\n\t\t\tconst panelName = panels[0];\n\t\t\tthis.setProperty(\"title\", `${this._i18nBundle?.getText(\"insights\")} (${this.panelLoaded[panelName].count || 0})`);\n\t\t\tif (this.panelContext[panels[0]] instanceof TilesPanel) {\n\t\t\t\thiddenMenuItems = [cardsContainerMenuItems.REFRESH, cardsContainerMenuItems.SHOW_MORE];\n\t\t\t\thiddenActionButtons = [cardsContainerActionButtons.SHOW_MORE];\n\t\t\t}\n\t\t\tif (this.panelContext[panels[0]] instanceof CardsPanel) {\n\t\t\t\thiddenMenuItems = [tilesContainerMenuItems.REFRESH, tilesContainerMenuItems.SHOW_MORE];\n\t\t\t\thiddenActionButtons = [tilesContainerActionButtons.SHOW_MORE];\n\t\t\t}\n\t\t\tthis._hideMenuItems(hiddenMenuItems);\n\t\t\tthis._hideActionButtons(hiddenActionButtons);\n\t\t}\n\t}\n\n\t/**\n\t * Removes the container header.\n\t *\n\t * @private\n\t */\n\tprivate _removeContainerHeader() {\n\t\tthis.setProperty(\"title\", \"\");\n\t\t(this.getAggregation(\"menuItems\") as MenuItem[])?.forEach((menuItem) => this.toggleMenuListItem(menuItem, false));\n\t\t(this.getAggregation(\"actionButtons\") as Button[])?.forEach((actionButton) => this.toggleActionButton(actionButton, false));\n\t\tconst panels = this._getLoadedPanelNames();\n\t\tpanels.forEach((panelName) => {\n\t\t\tthis.panelContext[panelName]?.handleAddHeader?.();\n\t\t});\n\t}\n\n\t/**\n\t * Hides the specified menu items.\n\t *\n\t * @private\n\t * @param {string[]} hiddenMenuItems - The IDs of the menu items to hide.\n\t */\n\tprivate _hideMenuItems(hiddenMenuItems: string[]) {\n\t\tconst containerMenuItems = this.getAggregation(\"menuItems\") as MenuItem[];\n\t\tcontainerMenuItems?.forEach((menuItem) => {\n\t\t\tconst includedInHiddenItems = hiddenMenuItems.some((hiddenItem) => menuItem.getId().includes(hiddenItem));\n\t\t\tthis.toggleMenuListItem(menuItem, !includedInHiddenItems);\n\t\t});\n\t}\n\n\t/**\n\t * Hides the specified action buttons.\n\t *\n\t * @private\n\t * @param {string[]} hiddenActionButtons - The IDs of the action buttons to hide.\n\t */\n\tprivate _hideActionButtons(hiddenActionButtons: string[]) {\n\t\tconst containerActionButtons = this.getAggregation(\"actionButtons\") as Button[];\n\t\tcontainerActionButtons?.forEach((actionButton) => {\n\t\t\tconst includedInHiddenItems = hiddenActionButtons.some((hiddenItem) => actionButton.getId().includes(hiddenItem));\n\t\t\tthis.toggleActionButton(actionButton, !includedInHiddenItems);\n\t\t});\n\t}\n\n\t/**\n\t * Updates the item count for the specified panel.\n\t *\n\t * @param {number} itemCount - The new item count.\n\t * @param {string} panelName - The name of the panel.\n\t */\n\tpublic updatePanelsItemCount(itemCount: number, panelName: string) {\n\t\tthis.panelLoaded[panelName].count = itemCount;\n\t\tconst panels = this._getLoadedPanelNames();\n\t\t// Container Title Will be displayed only in case of only one panel is present\n\t\tif (panels.length === 1) {\n\t\t\tthis.setProperty(\"title\", `${this._i18nBundle?.getText(\"insights\")} (${itemCount || 0})`);\n\t\t}\n\t}\n\n\t/**\n\t * Unhides the specified panel if it is hidden.\n\t *\n\t * @param {TilesPanel | CardsPanel} panel - The panel to unhide.\n\t */\n\tpublic unhidePanelIfHidden(panel: TilesPanel | CardsPanel) {\n\t\tconst layout = this._getLayout();\n\t\tconst panelExpandedName = layout._getCurrentExpandedElementName();\n\n\t\tif (this._errorPanel) {\n\t\t\tthis.removeContent(this._errorPanel);\n\t\t}\n\n\t\t// Function to handle panel content insertion\n\t\tconst processPanelVisibility = (panelName: string, insertContentFn: () => void) => {\n\t\t\tconst panelWrapper = this._getPanelContentWrapper(panel);\n\t\t\tif (!panelExpandedName || panelExpandedName === panel.getProperty(\"fullScreenName\")) {\n\t\t\t\t/**\n                    loaded value can be false or undefined, false being hidden and undefined being loading\n                    if the panel is hidden then only unhide it\n                */\n\t\t\t\tif (this.panelLoaded[panelName].loaded === false) {\n\t\t\t\t\tinsertContentFn();\n\t\t\t\t\t// Remove hidden class if applied\n\t\t\t\t\tif (panelWrapper.hasStyleClass(\"sapCuxHidden\")) {\n\t\t\t\t\t\tpanelWrapper.removeStyleClass(\"sapCuxHidden\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.handlePanelLoad(panelName, { loaded: true, count: this.panelLoaded[panelName].count });\n\t\t\t} else {\n\t\t\t\tconst listener = () => {\n\t\t\t\t\tinsertContentFn();\n\t\t\t\t\t// Remove hidden class if applied\n\t\t\t\t\tif (panelWrapper.hasStyleClass(\"sapCuxHidden\")) {\n\t\t\t\t\t\tpanelWrapper.removeStyleClass(\"sapCuxHidden\");\n\t\t\t\t\t}\n\t\t\t\t\tlayout.detachOnCollapse(listener); // Remove the listener after execution\n\t\t\t\t};\n\t\t\t\tthis.handlePanelLoad(panelName, { loaded: true, count: this.panelLoaded[panelName].count });\n\t\t\t\tlayout.attachOnCollapse(listener);\n\t\t\t}\n\t\t};\n\n\t\t// Handling TilesPanel\n\t\tif (panel instanceof TilesPanel && !this.panelLoaded[tilesPanelName].loaded) {\n\t\t\tprocessPanelVisibility(tilesPanelName, () => this.insertContent(this.panelContext[tilesPanelName], 0));\n\t\t}\n\n\t\t// Handling CardsPanel\n\t\tif (panel instanceof CardsPanel && !this.panelLoaded[cardsPanelName].loaded) {\n\t\t\tprocessPanelVisibility(cardsPanelName, () => this.addContent(this.panelContext[cardsPanelName]));\n\t\t}\n\t}\n\n\t/**\n\t * Updates the container header based on the number of visible panels.\n\t *\n\t * @private\n\t * @param {TilesPanel | CardsPanel} panel - The panel being managed.\n\t */\n\n\tprivate _updateHeaderElements(panel: TilesPanel | CardsPanel) {\n\t\tconst panels = this._getLoadedPanelNames();\n\t\tif (panels.length > 1) {\n\t\t\tthis._removeContainerHeader();\n\t\t} else {\n\t\t\tthis._addContainerHeader();\n\t\t\tpanel.handleHideHeader();\n\t\t}\n\t}\n\n\t/**\n\t * Adjusts the layout of the container.\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic adjustLayout() {\n\t\t//hide actions if the device is a phone\n\t\tif (this.getDeviceType() === DeviceType.Mobile) {\n\t\t\tthis.toggleActionButtons(false);\n\t\t} else {\n\t\t\tconst panels = this._getLoadedPanelNames();\n\t\t\t// Unhide the Add Tiles button if the device is not a phone and header is visible\n\t\t\tif (panels.length < 2) {\n\t\t\t\t(this.getAggregation(\"actionButtons\") as Button[])?.forEach((actionButton) => {\n\t\t\t\t\tif (actionButton.getId().includes(tilesContainerActionButtons.ADD_TILES)) {\n\t\t\t\t\t\tthis.toggleActionButton(actionButton, true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t//adjust layout of all panels\n\t\t(this.getContent() as (TilesPanel | CardsPanel)[]).forEach((panel) => panel._adjustLayout?.());\n\t}\n\n\t/**\n\t * Add common Menu Items for Insights Container from Panel\n\t *\n\t * @private\n\t */\n\tpublic addCommonMenuItems(menuItems: MenuItem[]) {\n\t\tmenuItems.forEach((menuItem) => this.addAggregation(\"menuItems\", menuItem));\n\t\t// after adding menu items sort them based on the order\n\t\tthis._sortMenuItems(sortedMenuItems);\n\t}\n\n\t/**\n\t * Add common Action Buttons for Insights Container from Panel\n\t *\n\t * @private\n\t */\n\tpublic addCommonActionButtons(actionButtons: Button[]) {\n\t\tactionButtons.forEach((actionButton) => this.addAggregation(\"actionButtons\", actionButton));\n\t}\n\n\t/**\n\t * Handles the loading of a panel.\n\t *\n\t * @param {string} panelName - The name of the panel.\n\t * @param {object} oVal - The load status and count of the panel.\n\t * @param {boolean} oVal.loaded - The load status of the panel.\n\t * @param {number} oVal.count - The count of items in the panel.\n\t */\n\tpublic handlePanelLoad(panelName: string, oVal: { loaded: boolean; count: number }) {\n\t\tif (this.panelLoaded[panelName].loaded !== oVal.loaded) {\n\t\t\tthis.panelLoaded[panelName] = oVal;\n\t\t\tthis._updateHeaderElements(this.panelContext[panelName]);\n\t\t}\n\t\tthis.adjustLayout();\n\t}\n\n\t/**\n\t * Updates the visibility and text of an action button.\n\t *\n\t * @param {Button} actionButton - The action button to update.\n\t * @param {boolean} visibility - The visibility of the action button.\n\t * @param {string} text - The text of the action button.\n\t */\n\tpublic updateActionButton(actionButton: Button, visibility: boolean, text: string) {\n\t\tif (actionButton?.getVisible() !== visibility || actionButton?.getText() !== text) {\n\t\t\tthis.toggleActionButton(actionButton, visibility);\n\t\t\tactionButton?.setText(text);\n\t\t\tthis._updateContainerHeader(this);\n\t\t}\n\t}\n\n\t/**\n\t * Updates the visibility and text of a menu item.\n\t *\n\t * @param {MenuItem} menuItem - The menu item to update.\n\t * @param {boolean} visibility - The visibility of the menu item.\n\t * @param {string} text - The text of the menu item.\n\t */\n\tpublic updateMenuItem(menuItem: MenuItem, visibility: boolean, text: string) {\n\t\tif (menuItem?.getVisible() !== visibility || menuItem?.getTitle() !== text) {\n\t\t\tthis.toggleMenuListItem(menuItem, visibility);\n\t\t\tmenuItem?.setTitle(text);\n\t\t\tthis._updateContainerHeader(this);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the names of the loaded panels.\n\t *\n\t * @private\n\t * @returns {string[]} The names of the loaded panels.\n\t */\n\tprivate _getLoadedPanelNames() {\n\t\treturn Object.keys(this.panelLoaded).filter((panelName) => this.panelLoaded[panelName].loaded);\n\t}\n\n\t/**\n\t * Returns the names of panels that are still loading or in loaded true state\n\t *\n\t * @private\n\t * @private\n\t */\n\tprivate getVisibleOrPendingPanels() {\n\t\treturn Object.keys(this.panelLoaded).filter((panelName) => this.panelLoaded[panelName].loaded !== false);\n\t}\n\t/**\n\t * Sorts the menu items based on the provided order.\n\t *\n\t * @private\n\t * @param {string[]} menuItems - The order of the menu items.\n\t */\n\tprivate _sortMenuItems(menuItems: string[]) {\n\t\tconst containerMenuItems = this.getAggregation(\"menuItems\") as MenuItem[];\n\t\tlet sortedMenuItems = sortMenuItems(menuItems, containerMenuItems);\n\t\tthis.removeAllAggregation(\"menuItems\");\n\t\tsortedMenuItems?.forEach((menuItem) => this.addAggregation(\"menuItems\", menuItem));\n\t}\n\n\t/**\n\t * Retrieves the generic placeholder content for the Insights container.\n\t *\n\t * @returns {string} The HTML string representing the Insights container's placeholder content.\n\t */\n\tprotected getGenericPlaceholderContent(): string {\n\t\treturn getInsightsPlaceholder();\n\t}\n}\n"],"mappings":"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","ignoreList":[]}