{"version":3,"file":"BaseLayout.js","names":["sap","ui","define","Log","deepEqual","sap_m_library","Page","UI5Element","Lib","HashChanger","__BaseLayoutRenderer","__BasePanel","___library","___utils_Device","_interopRequireDefault","obj","__esModule","default","PageBackgroundDesign","BaseLayoutRenderer","BasePanel","OrientationType","DeviceType","calculateDeviceType","BaseLayout","extend","renderer","metadata","library","properties","enableSettings","type","group","visibility","enableFullScreen","expanded","defaultValue","settingsDialogPersisted","showHeader","showFooter","busy","backgroundDesign","Transparent","persContainerId","defaultAggregation","aggregations","items","singularName","multiple","settingsDialog","keyUserSettingsDialog","contentAdditionDialog","fullScreenContainer","events","onCollapse","constructor","_constructor","id","settings","Page.prototype.constructor.call","this","init","_init","Page.prototype.init.call","_settingsPanels","_elementConfigs","Map","_i18nBundle","getResourceBundleFor","_slideDurationInSeconds","_fullScreenContainer","getId","setAggregation","onBeforeRendering","_onBeforeRendering","event","Page.prototype.onBeforeRendering.call","_toggleHeaderVisibility","getProperty","selectedKey","getAggregation","openSettingsDialog","setProperty","document","body","style","getCustomHeader","getHeaderContent","length","onAfterRendering","_onAfterRendering","_layoutLoaded","setTimeout","_hashChanger","_loadFullScreenFromHash","getHash","appIntent","split","window","addEventListener","currentHash","location","hash","substring","includes","getContent","_getContent","getItems","_getURLParams","queryString","indexOf","URLSearchParams","hashChanged","arguments","undefined","URLParams","expandedElementName","get","expandedElement","isTargetContainerVisible","targetContainer","getVisible","isPhone","Mobile","_currentExpandedElement","fullScreenName","_toggleFullScreenForElement","has","getElementById","classList","add","updatedHash","_removeURLParam","replaceHash","toggleFullScreen","sourceElements","values","next","value","_openSettingsDialog","context","open","openContentAdditionDialog","_openContentAdditionDialog","setSettingsDialog","_setSettingsDialog","settingsPanels","getPanels","forEach","settingsPanel","_addSettingsPanel","override","push","_getSettingsPanels","_extractElementConfig","element","sourceElement","isPanelElement","getParent","isPanelInSideBySideLayout","SideBySide","Set","index","indexOfItem","key","getKey","registerFullScreenElement","_registerFullScreenElement","elementConfig","set","deregisterFullScreenElement","_deregisterFullScreenElement","delete","updateFullScreenElement","_updateFullScreenElement","updatedConfig","newConfiguration","_addURLParam","toString","_toggleFullScreen","allowToggle","_checkToggleRequirements","panelIndex","indexOfAggregation","isContainerInSideBySideLayout","_detachResizeHandler","_placeClonedElement","toggle","_toggleFullScreenButtonText","_previousExpandedElement","isTargetContainerDifferent","_adjustPreviousExpandedElementIfRequired","_modifyContainer","setHash","_focusFullScreenButton","fireEvent","_domSnapshot","remove","insertItem","_toggleInnerPanelVisibility","_resetScrollPosition","_attachResizeHandler","warning","_getFullScreenContainer","removeAllContent","_sourceElementClone","addContent","currentFullScreenName","firstSourceElement","_scrollPosition","getAssociation","focus","sectionRef","_getSectionRef","scrollTop","indexOfVisiblePanel","_getInnerControl","panel","toggleStyleClass","control","isPanel","isA","parentContainer","updateText","fullScreenButton","_getFullScreenButton","getText","fullScreenMenuItem","_getFullScreenMenuItem","_updateContainerHeader","sectionIndex","getDomRef","childNodes","targetElement","cloneNode","isSideBySideLayout","sourceElementDomRef","targetDomRef","innerHTML","append","_getCurrentExpandedElementName","_getCurrentExpandedElement","isExpandInHash"],"sources":["BaseLayout.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport { Event } from \"jquery\";\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport Log from \"sap/base/Log\";\nimport deepEqual from \"sap/base/util/deepEqual\";\nimport Button from \"sap/m/Button\";\nimport FlexBox from \"sap/m/FlexBox\";\nimport { PageBackgroundDesign } from \"sap/m/library\";\nimport Page from \"sap/m/Page\";\nimport Control from \"sap/ui/core/Control\";\nimport UI5Element, { MetadataOptions } from \"sap/ui/core/Element\";\nimport Lib from \"sap/ui/core/Lib\";\nimport HashChanger from \"sap/ui/core/routing/HashChanger\";\nimport BaseContainer from \"./BaseContainer\";\nimport { $BaseLayoutSettings } from \"./BaseLayout\";\nimport BaseLayoutRenderer from \"./BaseLayoutRenderer\";\nimport BasePanel from \"./BasePanel\";\nimport BaseSettingsDialog from \"./BaseSettingsDialog\";\nimport BaseSettingsPanel from \"./BaseSettingsPanel\";\nimport ContentAdditionDialog from \"./ContentAdditionDialog\";\nimport { OrientationType } from \"./library\";\nimport MenuItem from \"./MenuItem\";\nimport { DeviceType, calculateDeviceType } from \"./utils/Device\";\n\ninterface FullScreenElementConfig {\n\tkey?: string;\n\tindex: number;\n\tfullScreenName?: string;\n\tsourceElements: Set<BaseContainer | BasePanel>;\n\ttargetContainer: BaseContainer;\n}\n\n/**\n *\n * Abstract base class for My Home layout.\n *\n * @extends Page\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @internal\n * @experimental Since 1.121\n * @abstract\n * @public\n *\n * @alias sap.cux.home.BaseLayout\n */\nexport default abstract class BaseLayout extends Page {\n\tprotected _i18nBundle!: ResourceBundle;\n\tprivate _settingsPanels!: BaseSettingsPanel[];\n\tprivate _domSnapshot!: Node;\n\tprivate _sourceElementClone!: Node | Element;\n\tprivate _scrollPosition!: number;\n\tprivate _fullScreenContainer!: Page;\n\tprivate _slideDurationInSeconds!: number;\n\tprivate _layoutLoaded!: boolean;\n\tprivate _hashChanger!: HashChanger;\n\tprivate _currentExpandedElement!: FullScreenElementConfig | undefined;\n\tprivate _previousExpandedElement!: FullScreenElementConfig | undefined;\n\tprivate _elementConfigs!: Map<string, FullScreenElementConfig>;\n\n\tconstructor(id?: string | $BaseLayoutSettings);\n\tconstructor(id?: string, settings?: $BaseLayoutSettings);\n\t/**\n\t * Constructor for a new Base Layout.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $BaseLayoutSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * Indicates whether home settings are enabled for this control.\n\t\t\t */\n\t\t\tenableSettings: { type: \"boolean\", group: \"Misc\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether full screen is enabled for this control.\n\t\t\t */\n\t\t\tenableFullScreen: { type: \"boolean\", group: \"Misc\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether the layout is expanded.\n\t\t\t */\n\t\t\texpanded: { type: \"boolean\", group: \"Misc\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether the settings dialog state is persisted for this control.\n\t\t\t */\n\t\t\tsettingsDialogPersisted: { type: \"boolean\", group: \"Misc\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Whether the layout shall have a header.\n\t\t\t */\n\t\t\tshowHeader: { type: \"boolean\", group: \"Appearance\", defaultValue: true, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Whether this layout shall have a footer.\n\t\t\t */\n\t\t\tshowFooter: { type: \"boolean\", group: \"Appearance\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Whether the layout is currently in busy state.\n\t\t\t */\n\t\t\tbusy: { type: \"boolean\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * This property is used to set the background color of a page.\n\t\t\t */\n\t\t\tbackgroundDesign: {\n\t\t\t\ttype: \"sap.m.PageBackgroundDesign\",\n\t\t\t\tgroup: \"Appearance\",\n\t\t\t\tdefaultValue: PageBackgroundDesign.Transparent,\n\t\t\t\tvisibility: \"hidden\"\n\t\t\t},\n\t\t\t/**\n\t\t\t * Container ID for Ushell Personalisation.\n\t\t\t * This property holds the ID of the personalization container.\n\t\t\t * It is used to store and retrieve personalized settings for the control.\n\t\t\t *\n\t\t\t * @type {string}\n\t\t\t * @public\n\t\t\t */\n\t\t\tpersContainerId: { type: \"string\", defaultValue: \"\", visibility: \"public\" }\n\t\t},\n\t\tdefaultAggregation: \"items\",\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * The items aggregation which should be of type BaseContainer\n\t\t\t */\n\t\t\titems: { type: \"sap.cux.home.BaseContainer\", singularName: \"item\", multiple: true },\n\t\t\t/**\n\t\t\t * The settings dialog aggregation which controls settings for my home controls.\n\t\t\t * It should be of type BaseSettingsDialog.\n\t\t\t * If Not provided, a default settings dialog will be created from sap.cux.home.SettingsDialog.\n\t\t\t * In case of only custom settings panels, the settings dialog should be created and set manually from sap.cux.home.SettingsDialog.\n\t\t\t */\n\t\t\tsettingsDialog: {\n\t\t\t\ttype: \"sap.cux.home.BaseSettingsDialog\",\n\t\t\t\tsingularName: \"settingsDialog\",\n\t\t\t\tmultiple: false\n\t\t\t},\n\t\t\t/**\n\t\t\t * The Key User Settings dialog aggregation which controls key user settings for my home.\n\t\t\t * It should be of type BaseSettingsDialog.\n\t\t\t * If Not provided, a default settings dialog will be created from sap.cux.home.KeyUserSettingsDialog.\n\t\t\t * In case of only custom settings panels, the settings dialog should be created and set manually from sap.cux.home.KeyUserSettingsDialog.\n\t\t\t */\n\t\t\tkeyUserSettingsDialog: {\n\t\t\t\ttype: \"sap.cux.home.BaseSettingsDialog\",\n\t\t\t\tsingularName: \"keyUserSettingsDialog\",\n\t\t\t\tmultiple: false\n\t\t\t},\n\t\t\t/**\n\t\t\t * The content addition dialog aggregation which controls content addition for MyHome.\n\t\t\t */\n\t\t\tcontentAdditionDialog: {\n\t\t\t\ttype: \"sap.cux.home.BaseSettingsDialog\",\n\t\t\t\tsingularName: \"contentAdditionDialog\",\n\t\t\t\tmultiple: false,\n\t\t\t\tvisibility: \"hidden\"\n\t\t\t},\n\t\t\t/**\n\t\t\t * The full screen container to display registered full-screen elements\n\t\t\t */\n\t\t\tfullScreenContainer: { type: \"sap.m.Page\", singularName: \"fullScreenContainer\", multiple: false, visibility: \"hidden\" }\n\t\t},\n\t\tevents: {\n\t\t\t/**\n\t\t\t * Event is fired after the layout is collapsed.\n\t\t\t */\n\t\t\tonCollapse: {}\n\t\t}\n\t};\n\n\tstatic renderer: typeof BaseLayoutRenderer = BaseLayoutRenderer;\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\t\tthis._settingsPanels = [];\n\t\tthis._elementConfigs = new Map();\n\t\tthis._i18nBundle = Lib.getResourceBundleFor(\"sap.cux.home.i18n\") as ResourceBundle;\n\n\t\t//setup full-screen container\n\t\tthis._slideDurationInSeconds = 1;\n\t\tthis._fullScreenContainer = new Page(`${this.getId()}-fullScreen-container`, {\n\t\t\tbackgroundDesign: \"Transparent\",\n\t\t\tshowHeader: false\n\t\t});\n\t\tthis.setAggregation(\"fullScreenContainer\", this._fullScreenContainer);\n\t}\n\n\t/**\n\t * onBeforeRendering lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic onBeforeRendering(event: Event): void {\n\t\tsuper.onBeforeRendering(event);\n\n\t\tthis._toggleHeaderVisibility();\n\n\t\t//open settings dialog if persisted\n\t\tif (this.getProperty(\"settingsDialogPersisted\")) {\n\t\t\tconst selectedKey = (this.getAggregation(\"settingsDialog\") as BaseSettingsDialog)?.getProperty(\"selectedKey\") as string;\n\t\t\tthis.openSettingsDialog(selectedKey);\n\n\t\t\t//reset property\n\t\t\tthis.setProperty(\"settingsDialogPersisted\", false, true);\n\t\t}\n\n\t\t//update full-screen slide animation duration, if enabled\n\t\tif (this.getProperty(\"enableFullScreen\")) {\n\t\t\tdocument.body.style.setProperty(\"--sapUiSlideDuration\", `${this._slideDurationInSeconds}s`);\n\t\t}\n\t}\n\n\t/**\n\t * Toggles the visibility of the header based on the presence of a custom header or header content.\n\t * @private\n\t */\n\tprivate _toggleHeaderVisibility(): void {\n\t\tconst showHeader = this.getCustomHeader() != null || this.getHeaderContent().length > 0;\n\t\tthis.setProperty(\"showHeader\", showHeader, true);\n\t}\n\n\t/**\n\t * onAfterRendering lifecycle method.\n\t *\n\t * @private\n\t */\n\tpublic onAfterRendering(): void {\n\t\t//expand element on load if expanded through URL param\n\t\tif (this.getProperty(\"enableFullScreen\")) {\n\t\t\tif (!this._layoutLoaded) {\n\t\t\t\tthis._layoutLoaded = true;\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis._hashChanger = new HashChanger();\n\t\t\t\t\tthis._loadFullScreenFromHash(this._hashChanger.getHash() || \"\");\n\t\t\t\t\tconst [appIntent] = this._hashChanger.getHash().split(\"?\");\n\n\t\t\t\t\t//attach hash change event for toggling full screen\n\t\t\t\t\twindow.addEventListener?.(\"hashchange\", () => {\n\t\t\t\t\t\tconst currentHash = window.location.hash.substring(1);\n\t\t\t\t\t\t//toggle full screen only if hash is changed from within the app\n\t\t\t\t\t\tif (currentHash.includes?.(appIntent)) {\n\t\t\t\t\t\t\tthis._loadFullScreenFromHash(currentHash, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the content of the BaseLayout.\n\t * Overridden to return the items aggregation during inner page rendering.\n\t *\n\t * @private\n\t * @override\n\t * @returns An array of Control objects representing the content.\n\t */\n\tpublic getContent(): Control[] {\n\t\treturn this.getItems();\n\t}\n\n\t/**\n\t * Extracts URL search parameters from a given hash string.\n\t *\n\t * @private\n\t * @param {string} hash - The hash string containing the URL parameters.\n\t * @returns {URLSearchParams} An instance of URLSearchParams containing the parsed parameters.\n\t */\n\tprivate _getURLParams(hash: string): URLSearchParams {\n\t\tconst queryString = hash?.includes(\"?\") ? hash.substring(hash.indexOf(\"?\") + 1) : \"\";\n\t\treturn new URLSearchParams(queryString);\n\t}\n\n\t/**\n\t * Loads full screen mode from URL hash if enabled.\n\t *\n\t * @private\n\t * @param {string} hash - The URL hash string.\n\t * @param {boolean} [hashChanged=false] - Indicates if the hash has changed.\n\t */\n\tprivate _loadFullScreenFromHash(hash: string, hashChanged: boolean = false): void {\n\t\tconst enableFullScreen = this.getProperty(\"enableFullScreen\") as boolean;\n\t\tconst URLParams = this._getURLParams(hash);\n\t\tconst expandedElementName = URLParams.get(\"expanded\") || \"\";\n\t\tconst expandedElement = this._elementConfigs.get(expandedElementName);\n\t\tconst isTargetContainerVisible = expandedElement?.targetContainer.getVisible() || false;\n\t\tconst isPhone = calculateDeviceType() === DeviceType.Mobile;\n\n\t\tif (enableFullScreen && expandedElement && !isPhone && isTargetContainerVisible) {\n\t\t\tif (this._currentExpandedElement && this._currentExpandedElement.fullScreenName !== expandedElementName) {\n\t\t\t\t//expand element and prevent slide if hash element is found and another element is currently expanded\n\t\t\t\tthis._toggleFullScreenForElement(expandedElement, hashChanged);\n\t\t\t} else if (!this._currentExpandedElement) {\n\t\t\t\t//expand element if hash element is found and no element is currently expanded\n\t\t\t\tthis._toggleFullScreenForElement(expandedElement);\n\t\t\t} else if (URLParams.has(\"expanded\")) {\n\t\t\t\t//retain the slide transition in case of hash switch\n\t\t\t\tdocument.getElementById(`${this.getId()}-layout-container`)?.classList.add(\"slide\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._currentExpandedElement) {\n\t\t\t\t//collapse expanded element if hash element not found\n\t\t\t\tthis._toggleFullScreenForElement(this._currentExpandedElement);\n\t\t\t} else {\n\t\t\t\t//reset hash if no expanded element found\n\t\t\t\tif (URLParams.has(\"expanded\")) {\n\t\t\t\t\tconst updatedHash = this._removeURLParam(hash, \"expanded\");\n\t\t\t\t\tthis._hashChanger?.replaceHash(updatedHash, \"Backwards\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Toggles full screen mode for the specified element.\n\t *\n\t * @private\n\t * @param {FullScreenElementConfig} expandedElement - The configuration of the element to be expanded.\n\t * @param {boolean} [hashChanged=false] - Indicates if the hash has changed, affecting the toggle behavior.\n\t */\n\tprivate _toggleFullScreenForElement(expandedElement: FullScreenElementConfig, hashChanged: boolean = false): void {\n\t\tsetTimeout(() => this.toggleFullScreen(expandedElement.sourceElements.values().next().value!, hashChanged));\n\t}\n\n\t/**\n\t * Opens the settings dialog and navigate to the panel\n\t * specified by the selected key.\n\t *\n\t * @private\n\t * @param {string} selectedKey The key of the panel to navigate to\n\t */\n\tpublic openSettingsDialog(selectedKey: string = \"\", context: object = {}): void {\n\t\tconst settingsDialog = this.getAggregation(\"settingsDialog\") as BaseSettingsDialog;\n\t\tsettingsDialog?.setProperty(\"selectedKey\", selectedKey);\n\t\tsettingsDialog?.setProperty(\"context\", context);\n\t\tsettingsDialog?.open();\n\t}\n\n\t/**\n\t * Opens the content addition dialog and opens the selected panel.\n\t *\n\t * @param {string} [selectedKey=\"\"] - The key to be set for the content addition dialog. Defaults to an empty string.\n\t */\n\tpublic openContentAdditionDialog(selectedKey: string = \"\"): void {\n\t\tconst contentAdditionDialog = this.getAggregation(\"contentAdditionDialog\") as ContentAdditionDialog;\n\t\tcontentAdditionDialog?.setProperty(\"selectedKey\", selectedKey);\n\t\tcontentAdditionDialog?.open();\n\t}\n\n\t/**\n\t * Sets SettingsDialog aggregation.\n\t * Overridden to update cached settings panels.\n\t *\n\t * @public\n\t * @override\n\t * @returns {BaseSettingsDialog} the dialog for chaining\n\t */\n\tpublic setSettingsDialog(settingsDialog: BaseSettingsDialog): this {\n\t\tconst enableSettings = this.getProperty(\"enableSettings\") as boolean;\n\t\tif (enableSettings) {\n\t\t\tconst settingsPanels = settingsDialog?.getPanels();\n\t\t\tsettingsPanels?.forEach((settingsPanel: BaseSettingsPanel) => {\n\t\t\t\tthis._addSettingsPanel(settingsPanel);\n\t\t\t});\n\t\t}\n\t\tthis.setAggregation(\"settingsDialog\", settingsDialog);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a settings panel to the list of settings panels associated\n\t * with the layout's settings dialog.\n\t *\n\t * @param {BaseSettingsPanel} settingsPanel - The settings panel to be added.\n\t * @private\n\t */\n\tpublic _addSettingsPanel(settingsPanel: BaseSettingsPanel | BaseSettingsPanel[] | undefined, override?: boolean): void {\n\t\tif (settingsPanel) {\n\t\t\tif (override) {\n\t\t\t\tthis._settingsPanels = settingsPanel as BaseSettingsPanel[];\n\t\t\t} else {\n\t\t\t\tthis._settingsPanels.push(settingsPanel as BaseSettingsPanel);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adds a settings panel to the list of settings panels associated\n\t * with the layout's settings dialog.\n\t *\n\t * @param {BaseSettingsPanel} settingsPanel - The settings panel to be added.\n\t * @private\n\t */\n\tpublic _getSettingsPanels(): BaseSettingsPanel[] {\n\t\treturn this._settingsPanels;\n\t}\n\n\t/**\n\t * Extracts the configuration necessary for handling full-screen functionality of an element.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element for which to extract the full-screen configuration.\n\t * @returns {FullScreenElementConfig} Full screen element configuration.\n\t */\n\tprivate _extractElementConfig(element: BaseContainer | BasePanel): FullScreenElementConfig {\n\t\tconst sourceElement = element;\n\t\tconst isPanelElement = sourceElement instanceof BasePanel;\n\t\tconst targetContainer = isPanelElement ? (sourceElement.getParent() as BaseContainer) : sourceElement;\n\t\tconst isPanelInSideBySideLayout = isPanelElement && targetContainer.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst fullScreenName = (isPanelInSideBySideLayout ? targetContainer : sourceElement).getProperty(\"fullScreenName\") as string;\n\t\tconst sourceElements = new Set<BaseContainer | BasePanel>().add(sourceElement);\n\n\t\treturn {\n\t\t\tfullScreenName,\n\t\t\tsourceElements,\n\t\t\ttargetContainer,\n\t\t\tindex: this.indexOfItem(targetContainer),\n\t\t\tkey: isPanelElement ? sourceElement.getKey() : \"\"\n\t\t};\n\t}\n\n\t/**\n\t * Configures an element for full-screen functionality by extracting and storing its configuration.\n\t * Only stores the configuration if a full-screen name is provided and layout is not currently expanded.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element to configure for full-screen.\n\t */\n\tpublic registerFullScreenElement(element: BaseContainer | BasePanel): void {\n\t\tconst elementConfig = this._extractElementConfig(element);\n\t\tconst { fullScreenName } = elementConfig;\n\n\t\tif (fullScreenName && !this.getProperty(\"expanded\")) {\n\t\t\tif (this._elementConfigs.get(fullScreenName)) {\n\t\t\t\tconst sourceElements = (\n\t\t\t\t\tthis._elementConfigs.get(fullScreenName)?.sourceElements || new Set<BaseContainer | BasePanel>()\n\t\t\t\t).add(element);\n\t\t\t\tthis._elementConfigs.set(fullScreenName, { ...elementConfig, sourceElements } as FullScreenElementConfig);\n\t\t\t} else {\n\t\t\t\tthis._elementConfigs.set(fullScreenName, elementConfig);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes an element's full-screen configuration based on its full-screen name.\n\t * Only removes the configuration if a full-screen name is provided and layout is not currently expanded.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element to remove from full-screen configuration.\n\t */\n\tpublic deregisterFullScreenElement(element: BaseContainer | BasePanel): void {\n\t\tconst { fullScreenName } = this._extractElementConfig(element);\n\t\tif (fullScreenName && !this.getProperty(\"expanded\")) {\n\t\t\tthis._elementConfigs.delete(fullScreenName);\n\t\t}\n\t}\n\n\t/**\n\t * Updates the full screen configuration for the specified element.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element for which the full screen configuration is to be updated.\n\t * @param {Partial<FullScreenElementConfig>} [updatedConfig] - An optional partial configuration to update the element's full screen configuration.\n\t *\n\t * @returns {void}\n\t */\n\tpublic updateFullScreenElement(element: BaseContainer | BasePanel, updatedConfig?: Partial<FullScreenElementConfig>): void {\n\t\tconst elementConfig = this._extractElementConfig(element);\n\t\tconst { fullScreenName } = elementConfig;\n\n\t\tif (fullScreenName && !this.getProperty(\"expanded\")) {\n\t\t\tconst newConfiguration = { ...this._elementConfigs.get(fullScreenName), ...updatedConfig } as FullScreenElementConfig;\n\t\t\tthis._elementConfigs.set(fullScreenName, newConfiguration);\n\t\t}\n\t}\n\n\t/**\n\t * Adds or updates a URL parameter in the given hash string.\n\t *\n\t * @private\n\t * @param {string} hash - The original hash string.\n\t * @param {string} key - The parameter key to add or update.\n\t * @param {string} value - The value for the parameter.\n\t * @returns {string} The updated hash string with the new or updated parameter.\n\t */\n\tprivate _addURLParam(hash: string, key: string, value: string): string {\n\t\tconst URLParams = this._getURLParams(hash);\n\t\tURLParams.set(key, value);\n\t\treturn `${hash.split(\"?\")[0]}?${URLParams.toString()}`;\n\t}\n\n\t/**\n\t * Removes a specified parameter from the URL hash string.\n\t *\n\t * @private\n\t * @param {string} hash - The original hash string.\n\t * @param {string} key - The parameter key to remove.\n\t * @returns {string} The updated hash string without the specified parameter.\n\t */\n\tprivate _removeURLParam(hash: string, key: string): string {\n\t\tconst URLParams = this._getURLParams(hash);\n\t\tURLParams.delete(key);\n\t\treturn URLParams.toString() ? `${hash.split(\"?\")[0]}?${URLParams.toString()}` : hash.split(\"?\")[0];\n\t}\n\n\t/**\n\t * Toggles the full-screen state of a given element, handling layout adjustments, visibility, and scroll position.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element to toggle full-screen state for.\n\t * @param {boolean} [hashChanged=false] - Indicates if the hash has changed.\n\t */\n\tpublic toggleFullScreen(element: BaseContainer | BasePanel, hashChanged: boolean = false): void {\n\t\tconst isPanelInSideBySideLayout =\n\t\t\telement instanceof BasePanel && element.getParent()?.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst fullScreenName = (isPanelInSideBySideLayout ? element.getParent() : element)?.getProperty(\"fullScreenName\") as string;\n\t\tconst elementConfig = this._elementConfigs.get(fullScreenName);\n\t\tconst allowToggle = hashChanged || this._checkToggleRequirements(elementConfig as FullScreenElementConfig);\n\n\t\tif (elementConfig && allowToggle) {\n\t\t\tconst { targetContainer } = elementConfig;\n\t\t\tconst currentHash = this._hashChanger?.getHash() || \"\";\n\t\t\tconst panelIndex = targetContainer.indexOfAggregation(\"content\", element);\n\t\t\tconst isContainerInSideBySideLayout = targetContainer.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\t\tlet expanded = this.getProperty(\"expanded\") as boolean;\n\t\t\t// detach resize handler\n\t\t\ttargetContainer._detachResizeHandler();\n\t\t\tif (!hashChanged) {\n\t\t\t\t//update expanded state\n\t\t\t\tthis.setProperty(\"expanded\", !this.getProperty(\"expanded\"), true);\n\t\t\t\texpanded = this.getProperty(\"expanded\") as boolean;\n\n\t\t\t\t//place cloned element in full screen container\n\t\t\t\tthis._placeClonedElement(targetContainer, expanded, panelIndex);\n\n\t\t\t\t//perform slide transition\n\t\t\t\tdocument.getElementById(`${this.getId()}-layout-container`)?.classList.toggle(\"slide\", expanded);\n\t\t\t}\n\n\t\t\t//toggle full-screen button text for the element\n\t\t\tthis._toggleFullScreenButtonText(element, expanded);\n\n\t\t\t// store the current and previous expanded element\n\t\t\tif (expanded) {\n\t\t\t\tthis._previousExpandedElement = this._currentExpandedElement;\n\t\t\t\tthis._currentExpandedElement = elementConfig;\n\t\t\t} else {\n\t\t\t\tdelete this._currentExpandedElement;\n\t\t\t}\n\n\t\t\t//add or remove actual element at the end of slide transition\n\t\t\tsetTimeout(\n\t\t\t\t() => {\n\t\t\t\t\tif (expanded) {\n\t\t\t\t\t\t// in case of horizontal or vertical layout, set expanded element's key as selected key\n\t\t\t\t\t\tif (!isContainerInSideBySideLayout) {\n\t\t\t\t\t\t\ttargetContainer.setProperty(\"selectedKey\", element.getProperty(\"key\"));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//adjust currently expanded element if present\n\t\t\t\t\t\tconst isTargetContainerDifferent = !deepEqual(this._previousExpandedElement?.targetContainer, targetContainer);\n\t\t\t\t\t\tthis._adjustPreviousExpandedElementIfRequired(isTargetContainerDifferent);\n\n\t\t\t\t\t\tthis._modifyContainer(targetContainer, panelIndex);\n\n\t\t\t\t\t\t//adjust hash\n\t\t\t\t\t\tthis._currentExpandedElement = elementConfig;\n\t\t\t\t\t\tconst updatedHash = this._addURLParam(currentHash, \"expanded\", fullScreenName);\n\t\t\t\t\t\tthis._hashChanger?.setHash(updatedHash);\n\n\t\t\t\t\t\tthis._focusFullScreenButton(element);\n\t\t\t\t\t\t//fire onExpand event\n\t\t\t\t\t\telement.fireEvent(\"onExpand\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//delete stored dom snapshot\n\t\t\t\t\t\t(this._domSnapshot as Element)?.remove();\n\n\t\t\t\t\t\tthis.insertItem(targetContainer, elementConfig.index);\n\n\t\t\t\t\t\t//show all other panels in the container, if not in side-by-side layout\n\t\t\t\t\t\tif (!isContainerInSideBySideLayout) {\n\t\t\t\t\t\t\tthis._toggleInnerPanelVisibility(targetContainer, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//adjust hash\n\t\t\t\t\t\tdelete this._currentExpandedElement;\n\t\t\t\t\t\tconst updatedHash = this._removeURLParam(currentHash, \"expanded\");\n\t\t\t\t\t\tthis._hashChanger?.setHash(updatedHash);\n\n\t\t\t\t\t\t//reset scroll position on collapse\n\t\t\t\t\t\tthis._resetScrollPosition(element);\n\n\t\t\t\t\t\t//fire onCollapse event\n\t\t\t\t\t\tthis.fireEvent(\"onCollapse\");\n\t\t\t\t\t}\n\t\t\t\t\t// attach resize handler\n\t\t\t\t\ttargetContainer._attachResizeHandler();\n\t\t\t\t},\n\t\t\t\thashChanged ? 0 : this._slideDurationInSeconds * 1000\n\t\t\t);\n\t\t} else {\n\t\t\tLog.warning(`Element with ID: ${element?.getId()} not registered for full screen`);\n\t\t}\n\t}\n\n\t/**\n\t * Place actual element in the full screen container and hide all other panels in the container, if not in side-by-side layout\n\t *\n\t * @private\n\t * @param {BaseContainer} targetContainer - Container that is to be displayed in full-screen mode\n\t * @param {number} panelIndex - Index of the panel to remain visible if not in side-by-side layout.\n\t */\n\tprivate _modifyContainer(targetContainer: BaseContainer, panelIndex: number) {\n\t\t//adjust currently expanded element if present\n\t\tconst isContainerInSideBySideLayout = targetContainer.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst isTargetContainerDifferent = !deepEqual(this._previousExpandedElement?.targetContainer, targetContainer);\n\t\tif (!this._previousExpandedElement || isTargetContainerDifferent) {\n\t\t\tthis._getFullScreenContainer().removeAllContent();\n\t\t\t(this._sourceElementClone as Element)?.remove();\n\t\t\tthis._getFullScreenContainer().addContent(targetContainer as Control);\n\t\t}\n\n\t\t//hide all other panels in the container, if not in side-by-side layout\n\t\tif (!isContainerInSideBySideLayout) {\n\t\t\tthis._toggleInnerPanelVisibility(targetContainer, false, panelIndex);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the toggle requirements are met for the given element configuration.\n\t *\n\t * @private\n\t * @param {FullScreenElementConfig} elementConfig - The configuration of the element to check.\n\t * @returns {boolean} `true` if toggling is allowed, otherwise `false`.\n\t */\n\tprivate _checkToggleRequirements(elementConfig: FullScreenElementConfig): boolean {\n\t\tconst expanded = this.getProperty(\"expanded\") as boolean;\n\t\tlet allowToggle = true;\n\n\t\tif (expanded) {\n\t\t\t// if expanded, allow toggling only if the provided element and expanded element are the same\n\t\t\tconst currentFullScreenName = elementConfig?.fullScreenName;\n\t\t\tallowToggle = this._currentExpandedElement?.fullScreenName === currentFullScreenName;\n\t\t}\n\n\t\treturn allowToggle;\n\t}\n\n\t/**\n\t * Adjusts the current expanded element if required based on the new target container.\n\t *\n\t * @private\n\t * @param {boolean} isTargetContainerDifferent - Indicates whether the target container is different from the current expanded element's container.\n\t */\n\tprivate _adjustPreviousExpandedElementIfRequired(isTargetContainerDifferent: boolean) {\n\t\tif (this._previousExpandedElement) {\n\t\t\tconst firstSourceElement = this._previousExpandedElement.sourceElements.values().next().value!;\n\n\t\t\t//update full-screen button text for the current expanded element to collapsed state\n\t\t\tthis._toggleFullScreenButtonText(firstSourceElement, false);\n\n\t\t\tif (isTargetContainerDifferent) {\n\t\t\t\t//if expanded through hash change, place the current expanded element back in the layout\n\t\t\t\tthis.insertItem(this._previousExpandedElement.targetContainer, this._previousExpandedElement.index);\n\n\t\t\t\t//reset scroll position on expansion throuh hash change\n\t\t\t\tthis._scrollPosition = 0;\n\n\t\t\t\t//show all other panels in the container, if not in side-by-side layout\n\t\t\t\tif (this._previousExpandedElement.targetContainer.getProperty(\"orientation\") !== OrientationType.SideBySide) {\n\t\t\t\t\tthis._toggleInnerPanelVisibility(this._previousExpandedElement.targetContainer, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Resets the scroll position to that of the collapsed element in the original container.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element for which to reset the scroll position.\n\t */\n\tprivate _resetScrollPosition(element: BaseContainer | BasePanel) {\n\t\t//reset scroll position\n\t\tsetTimeout(() => {\n\t\t\tUI5Element.getElementById(`${element.getAssociation(\"fullScreenButton\", null) as string}-btn`)?.focus();\n\t\t\tconst sectionRef = this._getSectionRef(this);\n\t\t\tif (sectionRef !== undefined) {\n\t\t\t\tsectionRef.scrollTop = this._scrollPosition;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Toggles visibility of inner panels, except one specified by index.\n\t * Applicable only for panels not in SideSide layout.\n\t *\n\t * @private\n\t * @param {BaseContainer} element - Container with inner panels.\n\t * @param {boolean} visibility - Desired visibility state for panels.\n\t * @param {number} [indexOfVisiblePanel] - Index of panel to exclude from toggle.\n\t */\n\tprivate _toggleInnerPanelVisibility(element: BaseContainer, visibility: boolean, indexOfVisiblePanel?: number): void {\n\t\t(element._getInnerControl() as FlexBox).getItems().forEach((panel, index) => {\n\t\t\tpanel.toggleStyleClass(\"sapCuxHidden\", index === indexOfVisiblePanel ? visibility : !visibility);\n\t\t});\n\t}\n\n\t/**\n\t * Updates the full-screen button text for a control (or all controls in a side-by-side layout) based on expanded state.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - The control to update or the parent of controls to update.\n\t * @param {boolean} expanded - Indicates if the text should reflect an expanded or collapsed state.\n\t */\n\tprivate _toggleFullScreenButtonText(control: BaseContainer | BasePanel, expanded: boolean): void {\n\t\tconst isPanel = control.isA(\"sap.cux.home.BasePanel\");\n\t\tconst parentContainer = (isPanel ? control.getParent() : control) as BaseContainer;\n\t\tconst isPanelInSideBySideLayout = isPanel && parentContainer.getProperty(\"orientation\") === OrientationType.SideBySide;\n\n\t\t//update full-screen button text\n\t\tconst updateText = (control: BaseContainer | BasePanel) => {\n\t\t\tconst fullScreenButton = this._getFullScreenButton(control);\n\t\t\tfullScreenButton.setProperty(\"text\", this._i18nBundle.getText(expanded ? \"collapse\" : \"expand\"), true);\n\t\t\tconst fullScreenMenuItem = this._getFullScreenMenuItem(control);\n\t\t\tfullScreenMenuItem.setProperty(\"title\", this._i18nBundle.getText(expanded ? \"collapse\" : \"expand\"), true);\n\t\t};\n\n\t\tif (isPanelInSideBySideLayout) {\n\t\t\tparentContainer.getContent()?.forEach(updateText);\n\t\t} else {\n\t\t\tupdateText(control);\n\t\t}\n\n\t\t//update container header elements\n\t\tparentContainer._updateContainerHeader(isPanelInSideBySideLayout ? parentContainer : control);\n\t}\n\n\t/**\n\t * Sets focus on the full-screen button associated with an element.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element whose full-screen button should be focused.\n\t */\n\tprivate _focusFullScreenButton(element: BaseContainer | BasePanel): void {\n\t\tsetTimeout(() => {\n\t\t\tUI5Element.getElementById(`${element.getAssociation(\"fullScreenButton\", null) as string}-btn`)?.focus();\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves the full-screen button associated with a control.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - The control to find the full-screen button for.\n\t * @returns {Button} The full-screen button associated with the control.\n\t */\n\tprivate _getFullScreenButton(control: BaseContainer | BasePanel): Button {\n\t\treturn UI5Element.getElementById(control.getAssociation(\"fullScreenButton\", null) as string) as Button;\n\t}\n\n\t/**\n\t * Retrieves the Full screen menu item associated with a control.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - The control to find the full-screen button for.\n\t * @returns {MenuItem} The \"Show More\" menu item associated with the control.\n\t */\n\tprivate _getFullScreenMenuItem(control: BaseContainer | BasePanel): MenuItem {\n\t\treturn UI5Element.getElementById(control.getAssociation(\"fullScreenMenuItem\", null) as string) as MenuItem;\n\t}\n\n\t/**\n\t * Retrieves the full-screen container from the current aggregation.\n\t *\n\t * @private\n\t * @returns {Page} The Page instance used as the full-screen container.\n\t */\n\tpublic _getFullScreenContainer(): Page {\n\t\treturn this.getAggregation(\"fullScreenContainer\") as Page;\n\t}\n\n\t/**\n\t * Gets the first child node of a control's DOM reference.\n\t *\n\t * @private\n\t * @param {Control} element - The control to get the child node for.\n\t * @returns {Node | Element} The first child node of the control's DOM reference.\n\t */\n\tprivate _getSectionRef<T extends Node | Element = Element>(element: Control): T | undefined {\n\t\tconst sectionIndex = this.getProperty(\"showHeader\") && element !== this._getFullScreenContainer() ? 1 : 0;\n\t\treturn element.getDomRef()?.childNodes[sectionIndex] as T;\n\t}\n\n\t/**\n\t * Clones and places an element into a target container for full-screen transitions.\n\t *\n\t * @private\n\t * @param {BaseContainer} targetElement - Element to clone or containing the element to clone.\n\t * @param {boolean} expanded - True to expand (clone and place), false to collapse (restore from snapshot).\n\t * @param {number} panelIndex - Index of the panel to clone if not in side-by-side layout.\n\t */\n\tprivate _placeClonedElement(targetElement: BaseContainer, expanded: boolean, panelIndex: number) {\n\t\t//store scroll position and DOM snapshot\n\t\tthis._scrollPosition = (expanded ? this._getSectionRef(this)?.scrollTop : this._scrollPosition) as number;\n\n\t\t//create a snapshot of the homepage in collapsed mode for use in transition back from full screen.\n\t\t//the dom ref had to be cloned twice following rendering issues in the Insights Tiles section.\n\t\tthis._domSnapshot = (expanded ? this.getDomRef()?.cloneNode(true).cloneNode(true) : this._domSnapshot) as Node;\n\n\t\tconst isSideBySideLayout = targetElement.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst sourceElement = isSideBySideLayout\n\t\t\t? targetElement\n\t\t\t: (targetElement._getInnerControl() as FlexBox)?.getItems()[panelIndex] || targetElement;\n\t\tconst sourceElementDomRef = sourceElement.getDomRef() || targetElement.getDomRef();\n\t\tthis._sourceElementClone = expanded ? (sourceElementDomRef?.cloneNode(true) as Node) : this._sourceElementClone;\n\t\tconst targetDomRef = expanded ? this._getSectionRef(this._getFullScreenContainer()) : this.getDomRef();\n\t\tif (targetDomRef) {\n\t\t\tsetTimeout(() => {\n\t\t\t\ttargetDomRef.innerHTML = \"\";\n\t\t\t\ttargetDomRef.append(expanded ? this._sourceElementClone : this._domSnapshot);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the name of the currently expanded element, if any.\n\t *\n\t * @private\n\t * @returns {string | undefined} - The full screen name of the currently expanded element, if any.\n\t */\n\tpublic _getCurrentExpandedElementName(): string | undefined {\n\t\treturn this._getCurrentExpandedElement()?.fullScreenName;\n\t}\n\n\t/**\n\t * Retrieves the currently expanded element config, if any\n\t *\n\t * @private\n\t * @returns {FullScreenElementConfig | undefined} - The full screen name of the currently expanded element, if any.\n\t */\n\tpublic _getCurrentExpandedElement(): FullScreenElementConfig | undefined {\n\t\tconst isExpandInHash = this._getURLParams(this._hashChanger?.getHash() || \"\").has(\"expanded\");\n\t\tif (isExpandInHash) {\n\t\t\treturn this._currentExpandedElement;\n\t\t}\n\t}\n}\n"],"mappings":";;;;AAAAA,IAAAC,GAAAC,OAAA,6NAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,sBAAAC,EAAAC,GAAA,OAAAA,KAAAC,mBAAAD,EAAAE,UAAA,YAAAF,EAAAE,QAAAF,CAAA,OAWSG,EAAoBb,EAAA,8BAQtBc,EAAkBL,EAAAJ,GAAA,MAClBU,EAASN,EAAAH,GAAA,MAIPU,EAAeT,EAAA,yBAEfU,EAAUT,EAAA,oBAAEU,EAAmBV,EAAA,uBAUxC,MAiB8BW,EAAmBlB,EAAImB,OAAA,2BA8H7CC,SAAsCP,EApG7BQ,SAA4B,CAC3CC,QAAS,eACTC,WAAY,CAIXC,eAAgB,CAAEC,KAAM,UAAWC,MAAO,OAAQC,WAAY,UAI9DC,iBAAkB,CAAEH,KAAM,UAAWC,MAAO,OAAQC,WAAY,UAIhEE,SAAU,CAAEJ,KAAM,UAAWC,MAAO,OAAQI,aAAc,MAAOH,WAAY,UAI7EI,wBAAyB,CAAEN,KAAM,UAAWC,MAAO,OAAQI,aAAc,MAAOH,WAAY,UAI5FK,WAAY,CAAEP,KAAM,UAAWC,MAAO,aAAcI,aAAc,KAAMH,WAAY,UAIpFM,WAAY,CAAER,KAAM,UAAWC,MAAO,aAAcI,aAAc,MAAOH,WAAY,UAIrFO,KAAM,CAAET,KAAM,UAAWK,aAAc,MAAOH,WAAY,UAI1DQ,iBAAkB,CACjBV,KAAM,6BACNC,MAAO,aACPI,aAAclB,EAAqBwB,YACnCT,WAAY,UAUbU,gBAAiB,CAAEZ,KAAM,SAAUK,aAAc,GAAIH,WAAY,WAElEW,mBAAoB,QACpBC,aAAc,CAIbC,MAAO,CAAEf,KAAM,6BAA8BgB,aAAc,OAAQC,SAAU,MAO7EC,eAAgB,CACflB,KAAM,kCACNgB,aAAc,iBACdC,SAAU,OAQXE,sBAAuB,CACtBnB,KAAM,kCACNgB,aAAc,wBACdC,SAAU,OAKXG,sBAAuB,CACtBpB,KAAM,kCACNgB,aAAc,wBACdC,SAAU,MACVf,WAAY,UAKbmB,oBAAqB,CAAErB,KAAM,aAAcgB,aAAc,sBAAuBC,SAAU,MAAOf,WAAY,WAE9GoB,OAAQ,CAIPC,WAAY,CAAC,IApGRC,YAAW,SAAAC,EAACC,EAAaC,GAC/BC,6BAAAC,KAAMH,EAAIC,EACX,EA8GOG,KAAI,SAAAC,IACVC,sBAAAH,MACAA,KAAKI,gBAAkB,GACvBJ,KAAKK,gBAAkB,IAAIC,IAC3BN,KAAKO,YAAc3D,EAAI4D,qBAAqB,qBAG5CR,KAAKS,wBAA0B,EAC/BT,KAAKU,qBAAuB,IAAIhE,EAAK,GAAGsD,KAAKW,+BAAgC,CAC5E9B,iBAAkB,cAClBH,WAAY,QAEbsB,KAAKY,eAAe,sBAAuBZ,KAAKU,qBACjD,EAQOG,kBAAiB,SAAAC,EAACC,GACxBC,mCAAAhB,KAAwBe,GAExBf,KAAKiB,0BAGL,GAAIjB,KAAKkB,YAAY,2BAA4B,CAChD,MAAMC,EAAenB,KAAKoB,eAAe,mBAA0CF,YAAY,eAC/FlB,KAAKqB,mBAAmBF,GAGxBnB,KAAKsB,YAAY,0BAA2B,MAAO,KACpD,CAGA,GAAItB,KAAKkB,YAAY,oBAAqB,CACzCK,SAASC,KAAKC,MAAMH,YAAY,uBAAwB,GAAGtB,KAAKS,2BACjE,CACD,EAMQQ,wBAAuB,SAAAA,IAC9B,MAAMvC,EAAasB,KAAK0B,mBAAqB,MAAQ1B,KAAK2B,mBAAmBC,OAAS,EACtF5B,KAAKsB,YAAY,aAAc5C,EAAY,KAC5C,EAOOmD,iBAAgB,SAAAC,IAEtB,GAAI9B,KAAKkB,YAAY,oBAAqB,CACzC,IAAKlB,KAAK+B,cAAe,CACxB/B,KAAK+B,cAAgB,KACrBC,WAAW,KACVhC,KAAKiC,aAAe,IAAIpF,EACxBmD,KAAKkC,wBAAwBlC,KAAKiC,aAAaE,WAAa,IAC5D,MAAOC,GAAapC,KAAKiC,aAAaE,UAAUE,MAAM,KAGtDC,OAAOC,mBAAmB,aAAc,KACvC,MAAMC,EAAcF,OAAOG,SAASC,KAAKC,UAAU,GAEnD,GAAIH,EAAYI,WAAWR,GAAY,CACtCpC,KAAKkC,wBAAwBM,EAAa,KAC3C,KAGH,CACD,CACD,EAUOK,WAAU,SAAAC,IAChB,OAAO9C,KAAK+C,UACb,EASQC,cAAa,SAAAA,EAACN,GACrB,MAAMO,EAAcP,GAAME,SAAS,KAAOF,EAAKC,UAAUD,EAAKQ,QAAQ,KAAO,GAAK,GAClF,OAAO,IAAIC,gBAAgBF,EAC5B,EASQf,wBAAuB,SAAAA,EAACQ,GAAkD,IAApCU,EAAoBC,UAAAzB,OAAA,GAAAyB,UAAA,KAAAC,UAAAD,UAAA,GAAG,MACpE,MAAM/E,EAAmB0B,KAAKkB,YAAY,oBAC1C,MAAMqC,EAAYvD,KAAKgD,cAAcN,GACrC,MAAMc,EAAsBD,EAAUE,IAAI,aAAe,GACzD,MAAMC,EAAkB1D,KAAKK,gBAAgBoD,IAAID,GACjD,MAAMG,EAA2BD,GAAiBE,gBAAgBC,cAAgB,MAClF,MAAMC,EAAUnG,MAA0BD,EAAWqG,OAErD,GAAIzF,GAAoBoF,IAAoBI,GAAWH,EAA0B,CAChF,GAAI3D,KAAKgE,yBAA2BhE,KAAKgE,wBAAwBC,iBAAmBT,EAAqB,CAExGxD,KAAKkE,4BAA4BR,EAAiBN,EACnD,MAAO,IAAKpD,KAAKgE,wBAAyB,CAEzChE,KAAKkE,4BAA4BR,EAClC,MAAO,GAAIH,EAAUY,IAAI,YAAa,CAErC5C,SAAS6C,eAAe,GAAGpE,KAAKW,6BAA6B0D,UAAUC,IAAI,QAC5E,CACD,KAAO,CACN,GAAItE,KAAKgE,wBAAyB,CAEjChE,KAAKkE,4BAA4BlE,KAAKgE,wBACvC,KAAO,CAEN,GAAIT,EAAUY,IAAI,YAAa,CAC9B,MAAMI,EAAcvE,KAAKwE,gBAAgB9B,EAAM,YAC/C1C,KAAKiC,cAAcwC,YAAYF,EAAa,YAC7C,CACD,CACD,CACD,EASQL,4BAA2B,SAAAA,EAACR,GAA8E,IAApCN,EAAoBC,UAAAzB,OAAA,GAAAyB,UAAA,KAAAC,UAAAD,UAAA,GAAG,MACpGrB,WAAW,IAAMhC,KAAK0E,iBAAiBhB,EAAgBiB,eAAeC,SAASC,OAAOC,MAAQ1B,GAC/F,EASO/B,mBAAkB,SAAA0D,IAAuD,IAAtD5D,EAAmBkC,UAAAzB,OAAA,GAAAyB,UAAA,KAAAC,UAAAD,UAAA,GAAG,GAAE,IAAE2B,EAAe3B,UAAAzB,OAAA,GAAAyB,UAAA,KAAAC,UAAAD,UAAA,GAAG,CAAC,EACtE,MAAMhE,EAAiBW,KAAKoB,eAAe,kBAC3C/B,GAAgBiC,YAAY,cAAeH,GAC3C9B,GAAgBiC,YAAY,UAAW0D,GACvC3F,GAAgB4F,MACjB,EAOOC,0BAAyB,SAAAC,IAAiC,IAAhChE,EAAmBkC,UAAAzB,OAAA,GAAAyB,UAAA,KAAAC,UAAAD,UAAA,GAAG,GACtD,MAAM9D,EAAwBS,KAAKoB,eAAe,yBAClD7B,GAAuB+B,YAAY,cAAeH,GAClD5B,GAAuB0F,MACxB,EAUOG,kBAAiB,SAAAC,EAAChG,GACxB,MAAMnB,EAAiB8B,KAAKkB,YAAY,kBACxC,GAAIhD,EAAgB,CACnB,MAAMoH,EAAiBjG,GAAgBkG,YACvCD,GAAgBE,QAASC,IACxBzF,KAAK0F,kBAAkBD,IAEzB,CACAzF,KAAKY,eAAe,iBAAkBvB,GACtC,OAAOW,IACR,EASO0F,kBAAiB,SAAAA,EAACD,EAAoEE,GAC5F,GAAIF,EAAe,CAClB,GAAIE,EAAU,CACb3F,KAAKI,gBAAkBqF,CACxB,KAAO,CACNzF,KAAKI,gBAAgBwF,KAAKH,EAC3B,CACD,CACD,EASOI,mBAAkB,SAAAA,IACxB,OAAO7F,KAAKI,eACb,EASQ0F,sBAAqB,SAAAA,EAACC,GAC7B,MAAMC,EAAgBD,EACtB,MAAME,EAAiBD,aAAyBxI,EAChD,MAAMoG,EAAkBqC,EAAkBD,EAAcE,YAAgCF,EACxF,MAAMG,EAA4BF,GAAkBrC,EAAgB1C,YAAY,iBAAmBzD,EAAgB2I,WACnH,MAAMnC,GAAkBkC,EAA4BvC,EAAkBoC,GAAe9E,YAAY,kBACjG,MAAMyD,OAAqB0B,KAAiC/B,IAAI0B,GAEhE,MAAO,CACN/B,iBACAU,iBACAf,kBACA0C,MAAOtG,KAAKuG,YAAY3C,GACxB4C,IAAKP,EAAiBD,EAAcS,SAAW,GAEjD,EASOC,0BAAyB,SAAAC,EAACZ,GAChC,MAAMa,EAAgB5G,KAAK8F,sBAAsBC,GACjD,MAAM9B,eAAEA,GAAmB2C,EAE3B,GAAI3C,IAAmBjE,KAAKkB,YAAY,YAAa,CACpD,GAAIlB,KAAKK,gBAAgBoD,IAAIQ,GAAiB,CAC7C,MAAMU,GACL3E,KAAKK,gBAAgBoD,IAAIQ,IAAiBU,gBAAkB,IAAI0B,KAC/D/B,IAAIyB,GACN/F,KAAKK,gBAAgBwG,IAAI5C,EAAgB,IAAK2C,EAAejC,kBAC9D,KAAO,CACN3E,KAAKK,gBAAgBwG,IAAI5C,EAAgB2C,EAC1C,CACD,CACD,EASOE,4BAA2B,SAAAC,EAAChB,GAClC,MAAM9B,eAAEA,GAAmBjE,KAAK8F,sBAAsBC,GACtD,GAAI9B,IAAmBjE,KAAKkB,YAAY,YAAa,CACpDlB,KAAKK,gBAAgB2G,OAAO/C,EAC7B,CACD,EAWOgD,wBAAuB,SAAAC,EAACnB,EAAoCoB,GAClE,MAAMP,EAAgB5G,KAAK8F,sBAAsBC,GACjD,MAAM9B,eAAEA,GAAmB2C,EAE3B,GAAI3C,IAAmBjE,KAAKkB,YAAY,YAAa,CACpD,MAAMkG,EAAmB,IAAKpH,KAAKK,gBAAgBoD,IAAIQ,MAAoBkD,GAC3EnH,KAAKK,gBAAgBwG,IAAI5C,EAAgBmD,EAC1C,CACD,EAWQC,aAAY,SAAAA,EAAC3E,EAAc8D,EAAa1B,GAC/C,MAAMvB,EAAYvD,KAAKgD,cAAcN,GACrCa,EAAUsD,IAAIL,EAAK1B,GACnB,MAAO,GAAGpC,EAAKL,MAAM,KAAK,MAAMkB,EAAU+D,YAC3C,EAUQ9C,gBAAe,SAAAA,EAAC9B,EAAc8D,GACrC,MAAMjD,EAAYvD,KAAKgD,cAAcN,GACrCa,EAAUyD,OAAOR,GACjB,OAAOjD,EAAU+D,WAAa,GAAG5E,EAAKL,MAAM,KAAK,MAAMkB,EAAU+D,aAAe5E,EAAKL,MAAM,KAAK,EACjG,EASOqC,iBAAgB,SAAA6C,EAACxB,GAAwE,IAApC3C,EAAoBC,UAAAzB,OAAA,GAAAyB,UAAA,KAAAC,UAAAD,UAAA,GAAG,MAClF,MAAM8C,EACLJ,aAAmBvI,GAAauI,EAAQG,aAAahF,YAAY,iBAAmBzD,EAAgB2I,WACrG,MAAMnC,GAAkBkC,EAA4BJ,EAAQG,YAAcH,IAAU7E,YAAY,kBAChG,MAAM0F,EAAgB5G,KAAKK,gBAAgBoD,IAAIQ,GAC/C,MAAMuD,EAAcpE,GAAepD,KAAKyH,yBAAyBb,GAEjE,GAAIA,GAAiBY,EAAa,CACjC,MAAM5D,gBAAEA,GAAoBgD,EAC5B,MAAMpE,EAAcxC,KAAKiC,cAAcE,WAAa,GACpD,MAAMuF,EAAa9D,EAAgB+D,mBAAmB,UAAW5B,GACjE,MAAM6B,EAAgChE,EAAgB1C,YAAY,iBAAmBzD,EAAgB2I,WACrG,IAAI7H,EAAWyB,KAAKkB,YAAY,YAEhC0C,EAAgBiE,uBAChB,IAAKzE,EAAa,CAEjBpD,KAAKsB,YAAY,YAAatB,KAAKkB,YAAY,YAAa,MAC5D3C,EAAWyB,KAAKkB,YAAY,YAG5BlB,KAAK8H,oBAAoBlE,EAAiBrF,EAAUmJ,GAGpDnG,SAAS6C,eAAe,GAAGpE,KAAKW,6BAA6B0D,UAAU0D,OAAO,QAASxJ,EACxF,CAGAyB,KAAKgI,4BAA4BjC,EAASxH,GAG1C,GAAIA,EAAU,CACbyB,KAAKiI,yBAA2BjI,KAAKgE,wBACrChE,KAAKgE,wBAA0B4C,CAChC,KAAO,QACC5G,KAAKgE,uBACb,CAGAhC,WACC,KACC,GAAIzD,EAAU,CAEb,IAAKqJ,EAA+B,CACnChE,EAAgBtC,YAAY,cAAeyE,EAAQ7E,YAAY,OAChE,CAGA,MAAMgH,GAA8B1L,EAAUwD,KAAKiI,0BAA0BrE,gBAAiBA,GAC9F5D,KAAKmI,yCAAyCD,GAE9ClI,KAAKoI,iBAAiBxE,EAAiB8D,GAGvC1H,KAAKgE,wBAA0B4C,EAC/B,MAAMrC,EAAcvE,KAAKqH,aAAa7E,EAAa,WAAYyB,GAC/DjE,KAAKiC,cAAcoG,QAAQ9D,GAE3BvE,KAAKsI,uBAAuBvC,GAE5BA,EAAQwC,UAAU,WACnB,KAAO,CAELvI,KAAKwI,cAA0BC,SAEhCzI,KAAK0I,WAAW9E,EAAiBgD,EAAcN,OAG/C,IAAKsB,EAA+B,CACnC5H,KAAK2I,4BAA4B/E,EAAiB,KACnD,QAGO5D,KAAKgE,wBACZ,MAAMO,EAAcvE,KAAKwE,gBAAgBhC,EAAa,YACtDxC,KAAKiC,cAAcoG,QAAQ9D,GAG3BvE,KAAK4I,qBAAqB7C,GAG1B/F,KAAKuI,UAAU,aAChB,CAEA3E,EAAgBiF,wBAEjBzF,EAAc,EAAIpD,KAAKS,wBAA0B,IAEnD,KAAO,CACNlE,EAAIuM,QAAQ,oBAAoB/C,GAASpF,yCAC1C,CACD,EASQyH,iBAAgB,SAAAA,EAACxE,EAAgC8D,GAExD,MAAME,EAAgChE,EAAgB1C,YAAY,iBAAmBzD,EAAgB2I,WACrG,MAAM8B,GAA8B1L,EAAUwD,KAAKiI,0BAA0BrE,gBAAiBA,GAC9F,IAAK5D,KAAKiI,0BAA4BC,EAA4B,CACjElI,KAAK+I,0BAA0BC,mBAC9BhJ,KAAKiJ,qBAAiCR,SACvCzI,KAAK+I,0BAA0BG,WAAWtF,EAC3C,CAGA,IAAKgE,EAA+B,CACnC5H,KAAK2I,4BAA4B/E,EAAiB,MAAO8D,EAC1D,CACD,EASQD,yBAAwB,SAAAA,EAACb,GAChC,MAAMrI,EAAWyB,KAAKkB,YAAY,YAClC,IAAIsG,EAAc,KAElB,GAAIjJ,EAAU,CAEb,MAAM4K,EAAwBvC,GAAe3C,eAC7CuD,EAAcxH,KAAKgE,yBAAyBC,iBAAmBkF,CAChE,CAEA,OAAO3B,CACR,EAQQW,yCAAwC,SAAAA,EAACD,GAChD,GAAIlI,KAAKiI,yBAA0B,CAClC,MAAMmB,EAAqBpJ,KAAKiI,yBAAyBtD,eAAeC,SAASC,OAAOC,MAGxF9E,KAAKgI,4BAA4BoB,EAAoB,OAErD,GAAIlB,EAA4B,CAE/BlI,KAAK0I,WAAW1I,KAAKiI,yBAAyBrE,gBAAiB5D,KAAKiI,yBAAyB3B,OAG7FtG,KAAKqJ,gBAAkB,EAGvB,GAAIrJ,KAAKiI,yBAAyBrE,gBAAgB1C,YAAY,iBAAmBzD,EAAgB2I,WAAY,CAC5GpG,KAAK2I,4BAA4B3I,KAAKiI,yBAAyBrE,gBAAiB,KACjF,CACD,CACD,CACD,EAQQgF,qBAAoB,SAAAA,EAAC7C,GAE5B/D,WAAW,KACVrF,EAAWyH,eAAe,GAAG2B,EAAQuD,eAAe,mBAAoB,cAAwBC,QAChG,MAAMC,EAAaxJ,KAAKyJ,eAAezJ,MACvC,GAAIwJ,IAAelG,UAAW,CAC7BkG,EAAWE,UAAY1J,KAAKqJ,eAC7B,GAEF,EAWQV,4BAA2B,SAAAA,EAAC5C,EAAwB1H,EAAqBsL,GAC/E5D,EAAQ6D,mBAA+B7G,WAAWyC,QAAQ,CAACqE,EAAOvD,KAClEuD,EAAMC,iBAAiB,eAAgBxD,IAAUqD,EAAsBtL,GAAcA,IAEvF,EASQ2J,4BAA2B,SAAAA,EAAC+B,EAAoCxL,GACvE,MAAMyL,EAAUD,EAAQE,IAAI,0BAC5B,MAAMC,EAAmBF,EAAUD,EAAQ7D,YAAc6D,EACzD,MAAM5D,EAA4B6D,GAAWE,EAAgBhJ,YAAY,iBAAmBzD,EAAgB2I,WAG5G,MAAM+D,EAAcJ,IACnB,MAAMK,EAAmBpK,KAAKqK,qBAAqBN,GACnDK,EAAiB9I,YAAY,OAAQtB,KAAKO,YAAY+J,QAAQ/L,EAAW,WAAa,UAAW,MACjG,MAAMgM,EAAqBvK,KAAKwK,uBAAuBT,GACvDQ,EAAmBjJ,YAAY,QAAStB,KAAKO,YAAY+J,QAAQ/L,EAAW,WAAa,UAAW,OAGrG,GAAI4H,EAA2B,CAC9B+D,EAAgBrH,cAAc2C,QAAQ2E,EACvC,KAAO,CACNA,EAAWJ,EACZ,CAGAG,EAAgBO,uBAAuBtE,EAA4B+D,EAAkBH,EACtF,EAQQzB,uBAAsB,SAAAA,EAACvC,GAC9B/D,WAAW,KACVrF,EAAWyH,eAAe,GAAG2B,EAAQuD,eAAe,mBAAoB,cAAwBC,SAElG,EASQc,qBAAoB,SAAAA,EAACN,GAC5B,OAAOpN,EAAWyH,eAAe2F,EAAQT,eAAe,mBAAoB,MAC7E,EASQkB,uBAAsB,SAAAA,EAACT,GAC9B,OAAOpN,EAAWyH,eAAe2F,EAAQT,eAAe,qBAAsB,MAC/E,EAQOP,wBAAuB,SAAAA,IAC7B,OAAO/I,KAAKoB,eAAe,sBAC5B,EASQqI,eAAc,SAAAA,EAAqC1D,GAC1D,MAAM2E,EAAe1K,KAAKkB,YAAY,eAAiB6E,IAAY/F,KAAK+I,0BAA4B,EAAI,EACxG,OAAOhD,EAAQ4E,aAAaC,WAAWF,EACxC,EAUQ5C,oBAAmB,SAAAA,EAAC+C,EAA8BtM,EAAmBmJ,GAE5E1H,KAAKqJ,gBAAmB9K,EAAWyB,KAAKyJ,eAAezJ,OAAO0J,UAAY1J,KAAKqJ,gBAI/ErJ,KAAKwI,aAAgBjK,EAAWyB,KAAK2K,aAAaG,UAAU,MAAMA,UAAU,MAAQ9K,KAAKwI,aAEzF,MAAMuC,EAAqBF,EAAc3J,YAAY,iBAAmBzD,EAAgB2I,WACxF,MAAMJ,EAAgB+E,EACnBF,EACCA,EAAcjB,oBAAgC7G,WAAW2E,IAAemD,EAC5E,MAAMG,EAAsBhF,EAAc2E,aAAeE,EAAcF,YACvE3K,KAAKiJ,oBAAsB1K,EAAYyM,GAAqBF,UAAU,MAAiB9K,KAAKiJ,oBAC5F,MAAMgC,EAAe1M,EAAWyB,KAAKyJ,eAAezJ,KAAK+I,2BAA6B/I,KAAK2K,YAC3F,GAAIM,EAAc,CACjBjJ,WAAW,KACViJ,EAAaC,UAAY,GACzBD,EAAaE,OAAO5M,EAAWyB,KAAKiJ,oBAAsBjJ,KAAKwI,eAEjE,CACD,EAQO4C,+BAA8B,SAAAA,IACpC,OAAOpL,KAAKqL,8BAA8BpH,cAC3C,EAQOoH,2BAA0B,SAAAA,IAChC,MAAMC,EAAiBtL,KAAKgD,cAAchD,KAAKiC,cAAcE,WAAa,IAAIgC,IAAI,YAClF,GAAImH,EAAgB,CACnB,OAAOtL,KAAKgE,uBACb,CACD,IAAC,OA1yB4BpG,CAAU","ignoreList":[]}