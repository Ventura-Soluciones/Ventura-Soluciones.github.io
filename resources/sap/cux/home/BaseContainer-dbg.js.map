{"version":3,"file":"BaseContainer-dbg.js","names":["sap","ui","define","Button","FlexBox","HBox","IconTabBar","IconTabFilter","List","Popover","StandardListItem","Title","sap_m_library","Control","CustomData","UI5Element","HTML","Lib","__BaseContainerRenderer","__BasePanel","__MenuItem","___library","___utils_Accessibility","___utils_Device","___utils_FESRUtil","___utils_PerformanceUtils","_interopRequireDefault","obj","__esModule","default","BackgroundDesign","ButtonType","PlacementType","BaseContainerRenderer","BasePanel","MenuItem","OrientationType","getInvisibleText","calculateDeviceType","DeviceType","addFESRId","addFESRSemanticStepName","FESR_EVENTS","getFESRId","recordElementLoadEnd","recordElementLoadStart","BaseContainer","extend","renderer","metadata","library","properties","title","type","group","defaultValue","visibility","orientation","SideBySide","selectedKey","width","height","blocked","busy","busyIndicatorDelay","busyIndicatorSize","fieldGroupIds","visible","enableSettings","enableFullScreen","fullScreenName","enableLazyLoad","loaded","defaultAggregation","aggregations","content","singularName","multiple","actionButtons","menuItems","associations","layout","fullScreenButton","fullScreenMenuItem","events","onExpand","designtime","adjustLayout","_adjustLayout","load","_load","constructor","_constructor","id","settings","Control.prototype.constructor.call","this","_exemptedActions","init","_init","_controlMap","Map","_commonHeaderElementStates","_i18nBundle","getResourceBundleFor","_createHeader","containerCustomSettings","getId","key","value","addCustomData","getCustomSettings","_getCustomSettings","data","addCustomSetting","_addCustomSetting","control","controlId","isPanel","isA","hasContainerTitle","getProperty","trim","length","get","set","renderType","addStyleClass","justifyContent","items","alignItems","addDependent","setTitleStyle","_getHeader","_getInnerControl","_iconTabBar","_wrapper","_onPanelSelect","event","setProperty","getParameter","_updateContainerHeader","_setPanelCount","panel","count","_getIconTabFilter","setCount","_addToPanel","addContent","addItem","iconTabFilter","text","tooltip","writeToDom","SELECT","_getContent","forEach","onBeforeRendering","_onBeforeRendering","defaultKey","getContent","_createInnerControl","_addAllPanelContent","_loadContent","_markPerformanceMetrics","onAfterRendering","_onAfterRendering","_attachResizeHandler","_observeContainer","getDomRef","_resizeObserver","disconnect","ResizeObserver","entries","_resizeTimeout","clearTimeout","window","setTimeout","getVisible","_setDeviceType","observe","_detachResizeHandler","target","_containerObserver","IntersectionObserver","entry","isIntersecting","rootMargin","threshold","Horizontal","Vertical","setDirection","expandable","backgroundDesign","Transparent","headerMode","headerBackgroundDesign","select","isSideBySideLayout","isContainer","targetControl","removeAllItems","_updateHeader","headerTitle","setText","setVisible","_getLayout","_addLayoutHeaderElements","currentControl","_getSelectedPanel","_filterVisibleHeaderElements","getMenuItems","_addMenuItems","getAggregation","actionButton","_getHeaderButton","attachHeaderElements","elements","property","aggregation","headerElement","_getFullScreenMenuItem","_getHomeSettingsMenuItem","_getFullScreenButton","_ref","currentPropertyValue","previousPropertyValue","addAggregation","removeAggregation","setFullScreenElementRelations","isFullScreenEnabled","panels","_setupFullScreenElements","setupFullScreenElement","registerFullScreenElement","deregisterFullScreenElement","updateFullScreenElement","index","indexOfItem","_setFullScreenElementRelations","relation","targetAggregation","setAssociation","removeAssociation","menuItem","getText","icon","press","openSettingsDialog","toggleFullScreen","push","find","setSelectedKey","_getPanelContentWrapper","direction","_updatePanelHeader","header","isTitleVisible","toggleStyleClass","getActionButtons","arguments","undefined","filter","element","_setTitle","list","itemPress","getSource","getParent","close","invisiblePopoverText","menuPopover","placement","VerticalPreferredBottom","showHeader","ariaLabelledBy","menuButton","openBy","item","_getMenuListItem","headerButton","firePress","PRESS","button","setTooltip","getTooltip","setIcon","getIcon","setEnabled","getEnabled","getElementById","getAssociation","getTitle","menuListItem","setTitle","toggleMenuListItem","_toggleMenuListItem","show","toggleActionButton","_toggleActionButton","actionButtonControl","removeContent","_removeContent","getWidth","_getWidth","toggleActionButtons","_toggleActionButtons","visibilityChanged","currentVisibility","includes","toggleFullScreenElements","_toggleFullScreenElements","fullScreenMenuButton","isPhone","getDeviceType","Mobile","parent","elementVisibilityChanged","fullScreenElement","elementKey","getKey","parentLayout","parentNode","clientWidth","deviceType","_deviceType","_getDeviceType","elementName","getMetadata","getName","attachEventOnce","getGenericPlaceholder","_getGenericPlaceholder","getGenericPlaceholderContent","_getGenericPlaceholderContent"],"sources":["BaseContainer.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport Button from \"sap/m/Button\";\nimport FlexBox from \"sap/m/FlexBox\";\nimport HBox from \"sap/m/HBox\";\nimport IconTabBar, { IconTabBar$SelectEvent } from \"sap/m/IconTabBar\";\nimport IconTabFilter from \"sap/m/IconTabFilter\";\nimport List from \"sap/m/List\";\nimport Popover from \"sap/m/Popover\";\nimport StandardListItem from \"sap/m/StandardListItem\";\nimport Title from \"sap/m/Title\";\nimport { BackgroundDesign, ButtonType, PlacementType } from \"sap/m/library\";\nimport Event from \"sap/ui/base/Event\";\nimport Control from \"sap/ui/core/Control\";\nimport CustomData from \"sap/ui/core/CustomData\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport HTML from \"sap/ui/core/HTML\";\nimport Lib from \"sap/ui/core/Lib\";\nimport { CSSSize } from \"sap/ui/core/library\";\nimport { $BaseContainerSettings } from \"./BaseContainer\";\nimport BaseContainerRenderer from \"./BaseContainerRenderer\";\nimport BaseLayout from \"./BaseLayout\";\nimport BasePanel from \"./BasePanel\";\nimport MenuItem from \"./MenuItem\";\nimport { OrientationType } from \"./library\";\nimport { getInvisibleText } from \"./utils/Accessibility\";\nimport { calculateDeviceType, DeviceType } from \"./utils/Device\";\nimport { addFESRId, addFESRSemanticStepName, FESR_EVENTS, getFESRId } from \"./utils/FESRUtil\";\nimport { recordElementLoadEnd, recordElementLoadStart, UIElements } from \"./utils/PerformanceUtils\";\n\ntype FullScreenElementRelation = {\n\tisFullScreenEnabled: boolean;\n\tcontrol: BaseContainer | BasePanel;\n\taggregation: string;\n\theaderElement: MenuItem | Button;\n};\n\n/**\n *\n * Abstract base class for all container controls in the Home Page Layout.\n *\n * @extends sap.ui.core.Control\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @abstract\n * @internal\n * @experimental Since 1.121\n * @public\n *\n * @ui5-metamodel\n * @alias sap.cux.home.BaseContainer\n */\nexport default abstract class BaseContainer extends Control {\n\tprotected _i18nBundle!: ResourceBundle;\n\tprivate _controlMap!: Map<string, Control | UI5Element>;\n\tprivate _wrapper!: FlexBox;\n\tprivate _iconTabBar!: IconTabBar;\n\tprivate _commonHeaderElementStates!: Map<string, boolean>;\n\tprivate _resizeObserver!: ResizeObserver;\n\tprivate _deviceType!: DeviceType;\n\tprivate _containerObserver!: IntersectionObserver;\n\tprivate _exemptedActions: string[] = [];\n\tpublic adjustLayout() {}\n\tprotected load() {}\n\tprivate _resizeTimeout!: number;\n\n\tconstructor(id?: string | $BaseContainerSettings);\n\tconstructor(id?: string, settings?: $BaseContainerSettings);\n\t/**\n\t * Constructor for a new Base Container.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $BaseContainerSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * Title of the container.\n\t\t\t */\n\t\t\ttitle: { type: \"string\", group: \"Data\", defaultValue: \"\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Orientation of the container.\n\t\t\t */\n\t\t\torientation: {\n\t\t\t\ttype: \"sap.cux.home.OrientationType\",\n\t\t\t\tgroup: \"Data\",\n\t\t\t\tdefaultValue: OrientationType.SideBySide,\n\t\t\t\tvisibility: \"hidden\"\n\t\t\t},\n\t\t\t/**\n\t\t\t * Key of the selected panel of the container.\n\t\t\t */\n\t\t\tselectedKey: { type: \"string\", group: \"Data\", defaultValue: \"\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Width to be set for the container.\n\t\t\t * @public\n\t\t\t */\n\t\t\twidth: { type: \"sap.ui.core.CSSSize\", group: \"Appearance\", defaultValue: \"100%\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Height to be set for the container.\n\t\t\t * @public\n\t\t\t */\n\t\t\theight: { type: \"sap.ui.core.CSSSize\", group: \"Appearance\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Whether the control is currently in blocked state.\n\t\t\t */\n\t\t\tblocked: { type: \"boolean\", group: \"Appearance\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Whether the layout is currently in busy state.\n\t\t\t */\n\t\t\tbusy: { type: \"boolean\", group: \"Appearance\", defaultValue: false, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * The delay in milliseconds, after which the busy indicator will show up for this control.\n\t\t\t */\n\t\t\tbusyIndicatorDelay: { type: \"int\", defaultValue: 1000, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * The size of the BusyIndicator.\n\t\t\t */\n\t\t\tbusyIndicatorSize: { type: \"sap.ui.core.BusyIndicatorSize\", defaultValue: \"Medium\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * The IDs of a logical field group that this control belongs to.\n\t\t\t */\n\t\t\tfieldGroupIds: { type: \"string[]\", defaultValue: [], visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * The visible property of the container.\n\t\t\t */\n\t\t\tvisible: { type: \"boolean\", group: \"Appearance\", defaultValue: true, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether home settings are enabled for this control.\n\t\t\t */\n\t\t\tenableSettings: { type: \"boolean\", group: \"Misc\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether full screen is enabled for this control.\n\t\t\t */\n\t\t\tenableFullScreen: { type: \"boolean\", group: \"Misc\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * The name of the URL parameter used to expand the container into full-screen mode.\n\t\t\t * This property specifies the parameter key expected in the URL query string\n\t\t\t * to identify the container to be expanded.\n\t\t\t */\n\t\t\tfullScreenName: { type: \"string\", group: \"Misc\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates whether lazy loading is enabled for this control.\n\t\t\t */\n\t\t\tenableLazyLoad: { type: \"boolean\", group: \"Misc\", defaultValue: true, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Indicates if the container is loaded.\n\t\t\t */\n\t\t\tloaded: { type: \"boolean\", group: \"Appearance\", defaultValue: false, visibility: \"hidden\" }\n\t\t},\n\t\tdefaultAggregation: \"content\",\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * The container content aggregation which should be of type BasePanel.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tcontent: { type: \"sap.cux.home.BasePanel\", singularName: \"content\", multiple: true, visibility: \"public\" },\n\t\t\t/**\n\t\t\t * This aggregation contains the actions that should be displayed within the container.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tactionButtons: { type: \"sap.m.Button\", multiple: true, singularName: \"actionButton\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * This aggregation holds the items that should be shown within the dropdown menu of the container.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tmenuItems: { type: \"sap.cux.home.MenuItem\", multiple: true, singularName: \"menuItem\", visibility: \"public\" }\n\t\t},\n\t\tassociations: {\n\t\t\tlayout: { type: \"sap.cux.home.BaseLayout\", multiple: false, singularName: \"layout\", visibility: \"hidden\" },\n\t\t\tfullScreenButton: { type: \"sap.m.Button\", multiple: false, singularName: \"fullScreenButton\", visibility: \"hidden\" },\n\t\t\tfullScreenMenuItem: { type: \"sap.cux.home.MenuItem\", multiple: false, singularName: \"fullScreenMenuItem\", visibility: \"hidden\" }\n\t\t},\n\t\tevents: {\n\t\t\t/**\n\t\t\t * Event is fired before the container is expanded.\n\t\t\t */\n\t\t\tonExpand: {}\n\t\t},\n\t\tdesigntime: true\n\t};\n\n\tstatic renderer: typeof BaseContainerRenderer = BaseContainerRenderer;\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tthis._controlMap = new Map();\n\t\tthis._commonHeaderElementStates = new Map();\n\t\tthis._i18nBundle = Lib.getResourceBundleFor(\"sap.cux.home.i18n\") as ResourceBundle;\n\t\tthis._createHeader(this);\n\n\t\t//create custom settings data\n\t\tconst containerCustomSettings = new CustomData(`${this.getId()}-custom-settings`, {\n\t\t\tkey: \"custom-settings\",\n\t\t\tvalue: {}\n\t\t});\n\t\tthis.addCustomData(containerCustomSettings);\n\t}\n\n\t/**\n\t * Returns the custom settings data associated with the container\n\t * @private\n\t */\n\tpublic getCustomSettings() {\n\t\treturn (this.data(\"custom-settings\") || {}) as Record<string, string>;\n\t}\n\n\t/**\n\t * Adds the Custom setting data for the Section\n\t * @private\n\t * @param {string} key - The key of the Custom setting data\n\t * @param {string} value - The value to set for the specified key\n\t */\n\tprotected addCustomSetting(key: string, value: string) {\n\t\t(this.data(\"custom-settings\") as Record<string, string>)[key] = value;\n\t}\n\n\t/**\n\t * Creates and returns header for both container as well as panels\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - can be a container or a panel\n\t * @returns {HBox} header for the given container or panel\n\t */\n\tprivate _createHeader(control: BaseContainer | BasePanel): HBox {\n\t\tconst controlId = control.getId();\n\t\tconst id = `${controlId}-header`;\n\t\tconst isPanel = control.isA(\"sap.cux.home.BasePanel\");\n\t\tconst hasContainerTitle = (this.getProperty(\"title\") as string)?.trim().length > 0;\n\n\t\tif (!this._controlMap.get(id)) {\n\t\t\t//create header elements\n\t\t\tthis._controlMap.set(`${controlId}-header-title`, new Title(`${controlId}-title`));\n\t\t\tthis._controlMap.set(\n\t\t\t\t`${controlId}-header-contentLeft`,\n\t\t\t\tnew HBox(`${controlId}-contentLeft`, { renderType: \"Bare\" }).addStyleClass(\"sapCuxSectionContentArea\")\n\t\t\t);\n\t\t\tthis._controlMap.set(\n\t\t\t\t`${controlId}-header-contentRight`,\n\t\t\t\tnew HBox(`${controlId}-contentRight`, { renderType: \"Bare\" }).addStyleClass(\"sapCuxSectionContentArea\")\n\t\t\t);\n\t\t\tthis._controlMap.set(\n\t\t\t\t`${controlId}-header-content`,\n\t\t\t\tnew HBox(`${controlId}-header-content`, {\n\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\tjustifyContent: \"SpaceBetween\",\n\t\t\t\t\trenderType: \"Bare\",\n\t\t\t\t\titems: [\n\t\t\t\t\t\tthis._controlMap.get(`${controlId}-header-contentLeft`) as Control,\n\t\t\t\t\t\tthis._controlMap.get(`${controlId}-header-contentRight`) as Control\n\t\t\t\t\t]\n\t\t\t\t}).addStyleClass(\"sapUiTinyMarginBegin\")\n\t\t\t);\n\n\t\t\t//create header container\n\t\t\tthis._controlMap.set(\n\t\t\t\tid,\n\t\t\t\tnew HBox(`${controlId}-header`, {\n\t\t\t\t\talignItems: \"Center\",\n\t\t\t\t\titems: [\n\t\t\t\t\t\tthis._controlMap.get(`${controlId}-header-title`) as Control,\n\t\t\t\t\t\tthis._controlMap.get(`${controlId}-header-content`) as Control\n\t\t\t\t\t]\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tthis.addDependent(this._controlMap.get(id) as Control);\n\t\t}\n\n\t\t//add control-specific styling\n\t\t(this._controlMap.get(id) as HBox)?.addStyleClass(isPanel && hasContainerTitle ? \"sapCuxPanelHeader\" : \"sapUiContainerHeader\");\n\t\t(this._controlMap.get(`${controlId}-header-title`) as Title).setTitleStyle(isPanel && hasContainerTitle ? \"H6\" : \"H4\");\n\n\t\treturn this._controlMap.get(id) as HBox;\n\t}\n\n\t/**\n\t * Returns container header\n\t *\n\t * @private\n\t * @returns {Object} container header\n\t */\n\tpublic _getHeader(): HBox {\n\t\treturn this._controlMap.get(`${this.getId()}-header`) as HBox;\n\t}\n\n\t/**\n\t * Returns inner control corresponding to the specified layout\n\t *\n\t * @private\n\t * @returns {IconTabBar | FlexBox} inner control based on the layout\n\t */\n\tpublic _getInnerControl(): IconTabBar | FlexBox {\n\t\treturn this.getProperty(\"orientation\") === OrientationType.SideBySide ? this._iconTabBar : this._wrapper;\n\t}\n\n\t/**\n\t * Handler for selection of panel in SideBySide layout\n\t *\n\t * @private\n\t * @param {Event} event - event object\n\t */\n\tprotected _onPanelSelect(event: IconTabBar$SelectEvent) {\n\t\t//suppress invalidation to prevent container re-rendering. render the specific header element instead\n\t\tthis.setProperty(\"selectedKey\", event.getParameter(\"selectedKey\"), true);\n\t\tthis._updateContainerHeader(this);\n\t}\n\n\t/**\n\t * Updates the count information of IconTabFilter of IconTabBar inner control\n\t * in case of SideBySide layout\n\t *\n\t * @private\n\t * @param {BasePanel} panel - associated panel\n\t * @param {string} count - updated count\n\t */\n\tpublic _setPanelCount(panel: BasePanel, count?: string) {\n\t\tif (this.getProperty(\"orientation\") === OrientationType.SideBySide) {\n\t\t\tthis._getIconTabFilter(panel).setCount(count);\n\t\t}\n\t}\n\n\t/**\n\t * Adds corresponding control to panel. The control would be added to the\n\t * corresponding target inner control based on the layout.\n\t *\n\t * @private\n\t * @param {BasePanel} panel - panel to which control must be added\n\t * @param {Control} control - control to be added\n\t */\n\tpublic _addToPanel(panel: BasePanel, control: Control): void {\n\t\tif (this.getProperty(\"orientation\") === OrientationType.SideBySide) {\n\t\t\tthis._getIconTabFilter(panel)?.addContent(control);\n\t\t} else {\n\t\t\t(this._controlMap.get(`${panel.getId()}-wrapper`) as FlexBox)?.addItem(control);\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns IconTabBarFilter for the specified panel to be placed\n\t * in the IconTabBar inner control in case of SideBySide layout\n\t *\n\t * @private\n\t * @param {BasePanel} panel - panel whose icon tab filter must be fetched\n\t * @returns {IconTabFilter} IconTabFilter for the specified panel\n\t */\n\tprivate _getIconTabFilter(panel: BasePanel): IconTabFilter {\n\t\tconst id = `${panel.getId()}-tabFilter`;\n\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tconst iconTabFilter = new IconTabFilter(id, {\n\t\t\t\tkey: panel.getProperty(\"key\") as string,\n\t\t\t\ttext: panel.getProperty(\"title\") as string,\n\t\t\t\ttooltip: panel.getProperty(\"tooltip\") as string\n\t\t\t});\n\t\t\ticonTabFilter.addCustomData(\n\t\t\t\tnew CustomData(`${panel.getId()}--customFilter`, {\n\t\t\t\t\tkey: \"sap-ui-fastnavgroup\",\n\t\t\t\t\tvalue: \"true\",\n\t\t\t\t\twriteToDom: true\n\t\t\t\t})\n\t\t\t);\n\t\t\tthis._controlMap.set(id, iconTabFilter);\n\t\t\taddFESRSemanticStepName(iconTabFilter, FESR_EVENTS.SELECT, panel.getProperty(\"key\") as string);\n\t\t}\n\n\t\t//Add panel content to the created filter\n\t\tpanel._getContent()?.forEach((content) => (this._controlMap.get(id) as IconTabFilter).addContent(content));\n\n\t\treturn this._controlMap.get(id) as IconTabFilter;\n\t}\n\n\t/**\n\t * onBeforeRendering lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic onBeforeRendering(): void {\n\t\t// set selected key to the first panel key if not set\n\t\tif (this.getProperty(\"selectedKey\") === \"\") {\n\t\t\tconst defaultKey = this.getContent()?.[0]?.getProperty(\"key\") as string;\n\t\t\tthis.setProperty(\"selectedKey\", defaultKey, true);\n\t\t}\n\n\t\t//create layout-specific inner control\n\t\tthis._createInnerControl();\n\n\t\t//fetch and update container header\n\t\tthis._updateContainerHeader(this);\n\n\t\t//add content from all panels to inner control\n\t\tthis._addAllPanelContent();\n\n\t\t//load content if lazy loading is disabled\n\t\tif (this.getProperty(\"enableLazyLoad\") === false && !this.getProperty(\"loaded\")) {\n\t\t\tthis._loadContent();\n\t\t}\n\n\t\t// mark performance metrics\n\t\tthis._markPerformanceMetrics();\n\t}\n\n\t/**\n\t * onAfterRendering lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic onAfterRendering(): void {\n\t\tthis._attachResizeHandler();\n\n\t\t//observe container for lazy loading if enabled\n\t\tif (this.getProperty(\"enableLazyLoad\") as boolean) {\n\t\t\tthis._observeContainer();\n\t\t}\n\t}\n\n\t/**\n\t * Loads the content for the container.\n\t *\n\t * @private\n\t */\n\tprivate _loadContent() {\n\t\tthis.setProperty(\"loaded\", true);\n\t\tthis.load?.();\n\t}\n\n\t/**\n\t * Attaches a resize handler to the container to adjust\n\t * the layout based on device size changes.\n\t *\n\t * @private\n\t */\n\tpublic _attachResizeHandler() {\n\t\tif (this.getDomRef() && this.getProperty(\"loaded\")) {\n\t\t\tthis._resizeObserver?.disconnect();\n\t\t\tthis._resizeObserver = new ResizeObserver((entries) => {\n\t\t\t\tif (this._resizeTimeout) {\n\t\t\t\t\tclearTimeout(this._resizeTimeout);\n\t\t\t\t}\n\n\t\t\t\t//debounce resize event to prevent multiple calls\n\t\t\t\tthis._resizeTimeout = window.setTimeout(() => {\n\t\t\t\t\tif (this.getVisible()) {\n\t\t\t\t\t\tthis._setDeviceType(entries);\n\t\t\t\t\t\tthis.adjustLayout();\n\t\t\t\t\t}\n\t\t\t\t}, 10) as unknown as number;\n\t\t\t});\n\t\t\tthis._resizeObserver?.observe(this.getDomRef() as Element);\n\t\t}\n\t}\n\n\t/**\n\t * Detaches the resize handler from the container.\n\t *\n\t * @private\n\t */\n\tpublic _detachResizeHandler() {\n\t\tthis._resizeObserver?.disconnect();\n\t}\n\n\t/**\n\t * Adds intersection observer for lazy loading of container\n\t *\n\t * @private\n\t */\n\tprivate _observeContainer(): void {\n\t\tconst target = this.getDomRef();\n\t\tif (!this._containerObserver) {\n\t\t\tthis._containerObserver = new IntersectionObserver(\n\t\t\t\t(entries) =>\n\t\t\t\t\tentries.forEach((entry) => {\n\t\t\t\t\t\tif (!this.getProperty(\"loaded\") && this.getVisible() && entry.isIntersecting) {\n\t\t\t\t\t\t\tthis._loadContent();\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t{ rootMargin: \"0px\", threshold: 0.1 }\n\t\t\t);\n\t\t}\n\t\tthis._containerObserver?.disconnect();\n\t\t//observe container\n\t\tif (target) {\n\t\t\tthis._containerObserver.observe(target);\n\t\t}\n\t}\n\n\t/**\n\t * Create inner control for storing content from panel\n\t *\n\t * @private\n\t */\n\tprivate _createInnerControl(): void {\n\t\tconst layout = this.getProperty(\"orientation\") as OrientationType;\n\n\t\tif (layout === OrientationType.Horizontal || layout === OrientationType.Vertical) {\n\t\t\tif (!this._wrapper) {\n\t\t\t\tthis._wrapper = new FlexBox(`${this.getId()}-wrapper`, {\n\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\trenderType: \"Bare\"\n\t\t\t\t}).addStyleClass(\"sapCuxBaseWrapper\");\n\t\t\t\tthis.addDependent(this._wrapper);\n\t\t\t}\n\t\t\tthis._wrapper.setDirection(layout === OrientationType.Horizontal ? \"Row\" : \"Column\");\n\t\t} else if (!this._iconTabBar) {\n\t\t\tthis._iconTabBar = new IconTabBar(`${this.getId()}-iconTabBar`, {\n\t\t\t\texpandable: true,\n\t\t\t\tbackgroundDesign: BackgroundDesign.Transparent,\n\t\t\t\theaderMode: \"Inline\",\n\t\t\t\theaderBackgroundDesign: BackgroundDesign.Transparent,\n\t\t\t\tselect: (event: Event) => this._onPanelSelect(event)\n\t\t\t});\n\t\t\tthis.addDependent(this._iconTabBar);\n\t\t}\n\t}\n\n\t/**\n\t * Update container header information\n\t *\n\t * @private\n\t */\n\tpublic _updateContainerHeader(control: BaseContainer | BasePanel): void {\n\t\tconst isSideBySideLayout = this.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst isContainer = control.isA(\"sap.cux.home.BaseContainer\");\n\t\tconst targetControl = !isContainer && isSideBySideLayout ? this : control;\n\n\t\t//clear container header elements\n\t\t(this._controlMap.get(targetControl.getId() + \"-header-contentLeft\") as HBox)?.removeAllItems();\n\t\t(this._controlMap.get(targetControl.getId() + \"-header-contentRight\") as HBox)?.removeAllItems();\n\n\t\t//update container header elements\n\t\tthis._updateHeader(control);\n\t}\n\n\t/**\n\t * Updates header information of a specified container or a panel\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - can be container or panel\n\t */\n\tprivate _updateHeader(control: BaseContainer | BasePanel): void {\n\t\tconst isSideBySideLayout = this.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst isContainer = control.isA(\"sap.cux.home.BaseContainer\");\n\n\t\t//Update Title\n\t\tconst headerTitle = this._controlMap.get(control.getId() + \"-header-title\") as Title;\n\t\theaderTitle?.setText(control.getProperty(\"title\") as string);\n\t\theaderTitle?.setVisible((control.getProperty(\"title\") as string)?.trim().length > 0);\n\n\t\t//Add common header elements\n\t\tif (this._getLayout()) {\n\t\t\tthis._addLayoutHeaderElements();\n\t\t}\n\n\t\tconst currentControl = isContainer && isSideBySideLayout ? this._getSelectedPanel() : control;\n\t\tconst targetControl = !isContainer && isSideBySideLayout ? this : control;\n\n\t\t//Update Menu Items\n\t\tconst menuItems = this._filterVisibleHeaderElements(currentControl?.getMenuItems());\n\t\tif (menuItems.length > 0) {\n\t\t\tthis._addMenuItems(targetControl, menuItems);\n\t\t}\n\n\t\t//Update Action Buttons\n\t\t(currentControl?.getAggregation(\"actionButtons\") as Button[])?.forEach((actionButton: Button) => {\n\t\t\t(this._controlMap.get(targetControl.getId() + \"-header-contentRight\") as HBox)?.addItem(this._getHeaderButton(actionButton));\n\t\t});\n\t}\n\n\t/**\n\t * Attaches layout header elements like settings menu and full screen action to each\n\t * panel in the container, if enabled.\n\t *\n\t * @private\n\t */\n\tprivate _addLayoutHeaderElements(): void {\n\t\tconst attachHeaderElements = (control: BaseContainer | BasePanel) => {\n\t\t\tconst elements = [\n\t\t\t\t{ property: \"enableFullScreen\", aggregation: \"menuItems\", headerElement: this._getFullScreenMenuItem(control) },\n\t\t\t\t{ property: \"enableSettings\", aggregation: \"menuItems\", headerElement: this._getHomeSettingsMenuItem(control) },\n\t\t\t\t{ property: \"enableFullScreen\", aggregation: \"actionButtons\", headerElement: this._getFullScreenButton(control) }\n\t\t\t];\n\n\t\t\telements.forEach(({ property, aggregation, headerElement }) => {\n\t\t\t\tconst currentPropertyValue = control.getProperty(property) as boolean;\n\t\t\t\tconst previousPropertyValue = this._commonHeaderElementStates.get(`${headerElement.getId()}-${property}`);\n\n\t\t\t\t//update common header elements only if there's a change in property value\n\t\t\t\tif (currentPropertyValue !== previousPropertyValue) {\n\t\t\t\t\tthis._commonHeaderElementStates.set(`${headerElement.getId()}-${property}`, currentPropertyValue);\n\n\t\t\t\t\tif (currentPropertyValue) {\n\t\t\t\t\t\tcontrol.addAggregation(aggregation, headerElement);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontrol.removeAggregation(aggregation, headerElement);\n\t\t\t\t\t}\n\n\t\t\t\t\t// set full screen element relations\n\t\t\t\t\tif (property === \"enableFullScreen\") {\n\t\t\t\t\t\tthis.setFullScreenElementRelations({\n\t\t\t\t\t\t\tisFullScreenEnabled: currentPropertyValue,\n\t\t\t\t\t\t\tcontrol,\n\t\t\t\t\t\t\taggregation,\n\t\t\t\t\t\t\theaderElement\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// Add common header elements for container\n\t\tattachHeaderElements(this);\n\n\t\t// Add common header elements for inner panels\n\t\tconst panels = this.getContent() || [];\n\t\tpanels.forEach(attachHeaderElements);\n\n\t\t// setup full screen elements if required\n\t\tthis._setupFullScreenElements();\n\t}\n\n\t/**\n\t * Register/Degister elements for full screen, if enabled.\n\t *\n\t * @private\n\t */\n\tprivate _setupFullScreenElements() {\n\t\tconst layout = this._getLayout();\n\t\tconst setupFullScreenElement = (control: BaseContainer | BasePanel) => {\n\t\t\tconst currentPropertyValue = control.getProperty(\"enableFullScreen\") as boolean;\n\t\t\tconst previousPropertyValue = this._commonHeaderElementStates.get(`${control.getId()}-enableFullScreen`);\n\n\t\t\tif (currentPropertyValue !== previousPropertyValue) {\n\t\t\t\tthis._commonHeaderElementStates.set(`${control.getId()}-enableFullScreen`, currentPropertyValue);\n\n\t\t\t\tif (currentPropertyValue) {\n\t\t\t\t\tlayout?.registerFullScreenElement(control);\n\t\t\t\t} else {\n\t\t\t\t\tlayout?.deregisterFullScreenElement(control);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// update index of full screen element\n\t\t\tif (currentPropertyValue) {\n\t\t\t\tlayout?.updateFullScreenElement(control, {\n\t\t\t\t\tindex: layout?.indexOfItem(this)\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\t// Register full screen elements for container\n\t\tsetupFullScreenElement(this);\n\n\t\t// Register full screen elements for inner panels\n\t\tconst panels = this.getContent() || [];\n\t\tpanels.forEach(setupFullScreenElement);\n\t}\n\n\t/**\n\t * Sets or removes the full screen element relations based on the provided configuration.\n\t *\n\t * @private\n\t * @param {FullScreenElementRelation} relation - The configuration object containing the full screen element relation details.\n\t * @param {boolean} relation.isFullScreenEnabled - Indicates whether full screen is enabled.\n\t * @param {Control} relation.control - The control to set or remove the association.\n\t * @param {string} relation.aggregation - The aggregation type (e.g., \"actionButtons\").\n\t * @param {Element} relation.headerElement - The header element to associate or disassociate.\n\t *\n\t * @returns {void}\n\t */\n\tprivate setFullScreenElementRelations(relation: FullScreenElementRelation): void {\n\t\tconst { isFullScreenEnabled, control, aggregation, headerElement } = relation;\n\t\tconst targetAggregation = aggregation === \"actionButtons\" ? \"fullScreenButton\" : \"fullScreenMenuItem\";\n\n\t\tif (isFullScreenEnabled) {\n\t\t\tcontrol.setAssociation(targetAggregation, headerElement, true);\n\t\t} else {\n\t\t\tcontrol.removeAssociation(targetAggregation, headerElement, true);\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the my home settings menu item for a given panel.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} panel - The panel for which to retrieve the home settings menu item.\n\t * @returns {MenuItem} The settings menu item for the given panel.\n\t */\n\tprivate _getHomeSettingsMenuItem(panel: BaseContainer | BasePanel): MenuItem {\n\t\tconst id = `${panel.getId()}-settings`;\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tconst menuItem = new MenuItem(id, {\n\t\t\t\ttitle: this._i18nBundle.getText(\"myHomeSettings\"),\n\t\t\t\ticon: \"sap-icon://user-settings\",\n\t\t\t\tpress: () => {\n\t\t\t\t\t//open settings dialog\n\t\t\t\t\tconst layout = this._getLayout();\n\t\t\t\t\tlayout?.openSettingsDialog();\n\t\t\t\t}\n\t\t\t});\n\t\t\taddFESRId(menuItem, \"myHomeSettings\");\n\t\t\tthis._controlMap.set(id, menuItem);\n\t\t}\n\n\t\treturn this._controlMap.get(id) as MenuItem;\n\t}\n\n\t/**\n\t * Retrieves the full screen menu item for a given panel.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} panel - The panel for which to retrieve the home settings menu item.\n\t * @returns {MenuItem} The settings menu item for the given panel.\n\t */\n\tprivate _getFullScreenMenuItem(panel: BaseContainer | BasePanel): MenuItem {\n\t\tconst id = `${panel.getId()}-showMore`;\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tconst fullScreenMenuItem = new MenuItem(id, {\n\t\t\t\ttitle: this._i18nBundle.getText(\"expand\"),\n\t\t\t\ticon: \"sap-icon://display-more\",\n\t\t\t\tpress: () => {\n\t\t\t\t\tconst layout = this._getLayout();\n\t\t\t\t\tlayout?.toggleFullScreen(panel);\n\t\t\t\t}\n\t\t\t});\n\t\t\taddFESRId(fullScreenMenuItem, \"toggleFullScreen\");\n\t\t\tthis._controlMap.set(id, fullScreenMenuItem);\n\t\t}\n\t\treturn this._controlMap.get(id) as MenuItem;\n\t}\n\n\t/**\n\t * Generates a full screen action button for a given control, which can be a panel or a container.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - The control for which the full screen button is generated.\n\t * @returns {Button} A Button instance configured to toggle full screen mode for the specified control.\n\t */\n\tprivate _getFullScreenButton(control: BaseContainer | BasePanel): Button {\n\t\tconst id = `${control.getId()}-fullScreen`;\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tconst fullScreenButton = new Button(id, {\n\t\t\t\ttext: this._i18nBundle.getText(\"expand\"),\n\t\t\t\ttype: ButtonType.Transparent,\n\t\t\t\tpress: () => {\n\t\t\t\t\tconst layout = this._getLayout();\n\t\t\t\t\tlayout?.toggleFullScreen(control);\n\t\t\t\t}\n\t\t\t});\n\t\t\taddFESRId(fullScreenButton, \"toggleFullScreen\");\n\t\t\tthis._controlMap.set(id, fullScreenButton);\n\t\t\tthis._exemptedActions.push(id);\n\t\t}\n\n\t\treturn this._controlMap.get(id) as Button;\n\t}\n\n\t/**\n\t * Returns the selected panel in the IconTabBar inner control in\n\t * case of SideBySide layout\n\t *\n\t * @private\n\t * @returns {BasePanel} selected panel\n\t */\n\tpublic _getSelectedPanel(): BasePanel {\n\t\tconst panel =\n\t\t\tthis.getContent()?.find((panel) => panel.getProperty(\"key\") === this.getProperty(\"selectedKey\")) || this.getContent()?.[0];\n\t\tthis.setProperty(\"selectedKey\", panel?.getProperty(\"key\"), true);\n\n\t\treturn panel;\n\t}\n\n\t/**\n\t * Add content from all panels to the layout-specific inner control\n\t *\n\t * @private\n\t */\n\tprivate _addAllPanelContent(): void {\n\t\tconst panels = this.getContent() || [];\n\n\t\tif (this.getProperty(\"orientation\") === OrientationType.SideBySide) {\n\t\t\tthis._iconTabBar.removeAllItems();\n\t\t\tpanels.forEach((panel) => this._iconTabBar.addItem(this._getIconTabFilter(panel)));\n\t\t\tthis._iconTabBar.setSelectedKey(this.getProperty(\"selectedKey\") as string);\n\t\t} else {\n\t\t\tthis._wrapper.removeAllItems();\n\t\t\tpanels.forEach((panel) => this._wrapper.addItem(this._getPanelContentWrapper(panel)));\n\t\t}\n\t}\n\n\t/**\n\t * Creates and returns a wrapper for containing the specified panel\n\t * content in case of Horizontal and Vertical layout\n\t *\n\t * @private\n\t * @param {BasePanel} panel - panel for which wrapper has to created\n\t * @returns {FlexBox} wrapper container for the given panel\n\t */\n\tprotected _getPanelContentWrapper(panel: BasePanel): FlexBox {\n\t\tconst id = `${panel.getId()}-contentWrapper`;\n\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tthis._controlMap.set(\n\t\t\t\tid,\n\t\t\t\tnew FlexBox(id, {\n\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\tdirection: \"Column\",\n\t\t\t\t\trenderType: \"Bare\"\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\n\t\t//Add header as the first item in case of Horizontal and Vertical layout\n\t\t(this._controlMap.get(id) as FlexBox).addItem(this._updatePanelHeader(panel));\n\t\tpanel._getContent()?.forEach((content) => (this._controlMap.get(id) as FlexBox).addItem(content));\n\n\t\treturn this._controlMap.get(id) as FlexBox;\n\t}\n\n\t/**\n\t * Returns header of the specified panel after updating it\n\t *\n\t * @private\n\t * @param {BasePanel} panel - panel to be updated\n\t * @returns {HBox} header associated with the panel\n\t */\n\tprivate _updatePanelHeader(panel: BasePanel): HBox {\n\t\tconst header = this._createHeader(panel);\n\t\tconst isTitleVisible = (panel.getProperty(\"title\") as string)?.trim().length > 0;\n\t\tconst hasContainerTitle = (this.getProperty(\"title\") as string)?.trim().length > 0;\n\n\t\t//update panel header elements\n\t\tthis._updateContainerHeader(panel);\n\n\t\t//add header styling only if any of the header elements are visible\n\t\theader.toggleStyleClass(\n\t\t\t\"sapCuxPanelHeader\",\n\t\t\thasContainerTitle &&\n\t\t\t\t(isTitleVisible ||\n\t\t\t\t\tthis._filterVisibleHeaderElements(panel.getMenuItems()).length > 0 ||\n\t\t\t\t\tthis._filterVisibleHeaderElements(panel.getActionButtons()).length > 0)\n\t\t);\n\n\t\treturn header;\n\t}\n\n\t/**\n\t * Filters the provided array of header elements to include only those that are visible.\n\t *\n\t * @private\n\t * @template T - The type of elements in the array, which can be either MenuItem or Button.\n\t * @param {T[]} [elements=[]] - The array of elements to filter. Defaults to an empty array if not provided.\n\t *\n\t * @returns {T[]} An array of elements that are visible.\n\t */\n\tprivate _filterVisibleHeaderElements<T extends MenuItem | Button>(elements: T[] = []): T[] {\n\t\treturn elements.filter((element) => element.getVisible());\n\t}\n\n\t/**\n\t * Setter for container title\n\t *\n\t * @private\n\t * @param {string} title - updated title\n\t * @returns {BaseContainer} BaseContainer instance for chaining\n\t */\n\tpublic _setTitle(title: string): BaseContainer {\n\t\t//suppress invalidate to prevent container re-rendering. re-render only the concerned element\n\t\tthis.setProperty(\"title\", title, true);\n\t\t(this._controlMap.get(`${this.getId()}-header-title`) as Title).setText(title);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds menu items to a control and sets up a menu button to display them.\n\t * If the menu for the control doesn't exist, it creates a new one.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} control - The control to which the menu items will be added.\n\t * @param {MenuItem[]} menuItems - An array of menu items to be added to the menu.\n\t */\n\tprivate _addMenuItems(control: BaseContainer | BasePanel, menuItems: MenuItem[]): void {\n\t\tif (!this._controlMap.get(`${control.getId()}-menu`)) {\n\t\t\t//create menu list\n\t\t\tconst list = new List(`${control.getId()}-list`, {\n\t\t\t\titemPress: (event) => (event.getSource<List>().getParent() as Popover).close()\n\t\t\t});\n\t\t\tthis._controlMap.set(`${control.getId()}-menu`, list);\n\t\t\tconst invisiblePopoverText = getInvisibleText(`${control.getId()}-popoverTitle`, this._i18nBundle.getText(\"actions\"));\n\t\t\t//create menu popover\n\t\t\tconst menuPopover = new Popover(`${control.getId()}-popover`, {\n\t\t\t\tplacement: PlacementType.VerticalPreferredBottom,\n\t\t\t\tshowHeader: false,\n\t\t\t\tariaLabelledBy: [invisiblePopoverText ? invisiblePopoverText?.getId() : \"\"],\n\t\t\t\tcontent: [list, invisiblePopoverText]\n\t\t\t});\n\n\t\t\t//create menu button\n\t\t\tconst menuButton = new Button(`${control.getId()}-menu-btn`, {\n\t\t\t\ticon: \"sap-icon://slim-arrow-down\",\n\t\t\t\ttype: ButtonType.Transparent,\n\t\t\t\ttooltip: this._i18nBundle.getText(\"more\"),\n\t\t\t\tpress: (event) => menuPopover.openBy(event.getSource<Button>())\n\t\t\t});\n\t\t\tthis._controlMap.set(`${control.getId()}-menu-btn`, menuButton);\n\t\t}\n\n\t\t//add menu button to header\n\t\t(this._controlMap.get(control.getId() + \"-header-contentLeft\") as HBox)?.addItem(\n\t\t\tthis._controlMap.get(`${control.getId()}-menu-btn`) as Button\n\t\t);\n\n\t\t//Clear existing menu items and add new ones\n\t\t(this._controlMap.get(`${control.getId()}-menu`) as List).removeAllItems();\n\t\tmenuItems.forEach((item) => (this._controlMap.get(`${control.getId()}-menu`) as List).addItem(this._getMenuListItem(item)));\n\t}\n\n\t/**\n\t * Creates and returns a button for the corresponding header ActionButton\n\t *\n\t * @private\n\t * @param {Button} headerButton - ActionButton element\n\t * @returns {Button} Button instance created for the header element\n\t */\n\tprivate _getHeaderButton(headerButton: Button): Button {\n\t\tconst id = `${headerButton.getId()}-btn`;\n\t\tif (!this._controlMap.get(id)) {\n\t\t\tthis._controlMap.set(\n\t\t\t\tid,\n\t\t\t\tnew Button(id, {\n\t\t\t\t\ttype: ButtonType.Transparent,\n\t\t\t\t\tpress: () => headerButton.firePress()\n\t\t\t\t})\n\t\t\t);\n\t\t\taddFESRSemanticStepName(this._controlMap.get(id) as Button, FESR_EVENTS.PRESS, getFESRId(headerButton));\n\t\t}\n\n\t\t//Update button details\n\t\tconst button = this._controlMap.get(id) as Button;\n\t\tbutton.setText(headerButton.getText());\n\t\tbutton.setTooltip(headerButton.getTooltip() as string);\n\t\tbutton.setIcon(headerButton.getIcon());\n\t\tbutton.setVisible(headerButton.getVisible());\n\t\tbutton.setEnabled(headerButton.getEnabled());\n\n\t\treturn button;\n\t}\n\n\t/**\n\t * Retrieves the layout associated with the container, if available.\n\t *\n\t * @private\n\t * @returns {BaseLayout} The layout associated with the BaseContainer.\n\t */\n\tpublic _getLayout(): BaseLayout {\n\t\treturn UI5Element.getElementById(this.getAssociation(\"layout\", null) as string) as BaseLayout;\n\t}\n\n\t/**\n\t * Retrieves or creates a menu list item for a given menu item.\n\t *\n\t * @private\n\t * @param {MenuItem} menuItem - The menu item for which to retrieve or create a list item.\n\t * @returns {StandardListItem} The menu list item associated with the provided menu item.\n\t */\n\tprivate _getMenuListItem(menuItem: MenuItem): StandardListItem {\n\t\tif (!this._controlMap.get(`${menuItem.getId()}-listItem`)) {\n\t\t\tthis._controlMap.set(\n\t\t\t\t`${menuItem.getId()}-listItem`,\n\t\t\t\tnew StandardListItem(`${menuItem.getId()}-listItem`, {\n\t\t\t\t\ttype: \"Active\",\n\t\t\t\t\ticon: menuItem.getIcon(),\n\t\t\t\t\ttitle: menuItem.getTitle(),\n\t\t\t\t\tpress: (event) => menuItem.firePress({ button: event.getSource<Button>() })\n\t\t\t\t})\n\t\t\t);\n\t\t\taddFESRSemanticStepName(\n\t\t\t\tthis._controlMap.get(`${menuItem.getId()}-listItem`) as StandardListItem,\n\t\t\t\tFESR_EVENTS.PRESS,\n\t\t\t\tgetFESRId(menuItem)\n\t\t\t);\n\t\t}\n\t\t//Update list item details\n\t\tconst menuListItem = this._controlMap.get(`${menuItem.getId()}-listItem`) as StandardListItem;\n\t\tmenuListItem.setIcon(menuItem.getIcon());\n\t\tmenuListItem.setTitle(menuItem.getTitle());\n\t\tmenuListItem.setVisible(menuItem.getVisible());\n\t\treturn menuListItem;\n\t}\n\n\t/**\n\t * Toggles the visibility of menu Item.\n\t *\n\t * @private\n\t * @param {boolean} show - Indicates whether to show or hide the menu item.\n\t * @returns {void}\n\t */\n\tpublic toggleMenuListItem(menuItem: MenuItem, show: boolean): void {\n\t\tif (menuItem) {\n\t\t\tconst menuListItem = this._getMenuListItem(menuItem);\n\t\t\tmenuListItem?.setVisible(show);\n\t\t\tmenuItem.setProperty(\"visible\", show, true);\n\t\t}\n\t}\n\n\t/**\n\t * Toggles the visibility of action button.\n\t *\n\t * @private\n\t * @param {boolean} show - Indicates whether to show or hide the action button.\n\t * @returns {void}\n\t */\n\tpublic toggleActionButton(actionButton: Button, show: boolean): void {\n\t\tif (actionButton) {\n\t\t\tconst actionButtonControl = this._getHeaderButton(actionButton);\n\t\t\tactionButtonControl?.setVisible(show);\n\t\t\tactionButton.setProperty(\"visible\", show, true);\n\t\t}\n\t}\n\n\tpublic removeContent(panel: BasePanel) {\n\t\tif (this.getProperty(\"selectedKey\") && this.getProperty(\"selectedKey\") === panel.getProperty(\"key\")) {\n\t\t\tthis.setProperty(\"selectedKey\", undefined, true);\n\t\t}\n\t\tthis.removeAggregation(\"content\", panel);\n\t}\n\n\t/**\n\t * Gets current value of property \"width\".\n\t *\n\t * Default value is: \"100%\"\n\t * @returns {CSSSize} Value of property \"width\"\n\t */\n\tpublic getWidth(): CSSSize {\n\t\treturn this.getProperty(\"width\") as CSSSize;\n\t}\n\n\t/**\n\t * Toggles the visibility of action buttons within the container and/or its inner panels.\n\t *\n\t * @private\n\t * @param {boolean} show - Indicates whether to show or hide the action buttons.\n\t * @returns {void}\n\t */\n\tpublic toggleActionButtons(show: boolean): void {\n\t\tconst isSideBySideLayout = this.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tlet visibilityChanged = false;\n\t\tconst toggleActionButtons = (control: BaseContainer | BasePanel) => {\n\t\t\tcontrol.getActionButtons()?.forEach((actionButton) => {\n\t\t\t\tconst currentVisibility = actionButton.getVisible();\n\t\t\t\tif (currentVisibility !== show && !this._exemptedActions.includes(actionButton.getId())) {\n\t\t\t\t\tactionButton.setProperty(\"visible\", show, true);\n\t\t\t\t\tvisibilityChanged = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (!isSideBySideLayout && visibilityChanged) {\n\t\t\t\tthis._updateContainerHeader(control);\n\t\t\t}\n\t\t};\n\n\t\t// Toggle action buttons for container\n\t\ttoggleActionButtons(this);\n\n\t\t// Toggle action buttons for inner panels\n\t\tconst panels = this.getContent() || [];\n\t\tpanels.forEach(toggleActionButtons);\n\n\t\t// Update Header Container if required\n\t\tif (isSideBySideLayout && visibilityChanged) {\n\t\t\tthis._updateContainerHeader(this);\n\t\t}\n\t}\n\n\t/**\n\t * Toggles the visibility of the full screen button for the specified element.\n\t *\n\t * @private\n\t * @param {BaseContainer | BasePanel} element - The element for which to toggle the full screen button.\n\t * @param {boolean} show - Indicates whether to show or hide the full screen button.\n\t */\n\tpublic toggleFullScreenElements(element: BaseContainer | BasePanel, show: boolean): void {\n\t\tconst fullScreenButton = UI5Element.getElementById(element.getAssociation(\"fullScreenButton\", null) as string) as Button;\n\t\tconst fullScreenMenuButton = UI5Element.getElementById(element.getAssociation(\"fullScreenMenuItem\", null) as string) as MenuItem;\n\t\tconst isSideBySideLayout = this.getProperty(\"orientation\") === OrientationType.SideBySide;\n\t\tconst isPhone = this.getDeviceType() === DeviceType.Mobile;\n\t\tconst parent = element.getParent() as BaseContainer;\n\t\tlet elementVisibilityChanged = false;\n\t\tshow = !isPhone ? show : false;\n\t\t[fullScreenButton, fullScreenMenuButton].forEach((fullScreenElement: Button | MenuItem) => {\n\t\t\tif (fullScreenElement && show !== fullScreenElement.getVisible()) {\n\t\t\t\telementVisibilityChanged = true;\n\t\t\t\tfullScreenElement.setProperty(\"visible\", show, true);\n\t\t\t}\n\t\t});\n\t\tconst elementKey = element instanceof BasePanel && element.getKey();\n\t\tif (elementVisibilityChanged && (!isSideBySideLayout || (isSideBySideLayout && this.getProperty(\"selectedKey\") === elementKey))) {\n\t\t\tthis._updateContainerHeader(\n\t\t\t\tparent.getContent().length === 1 && !isSideBySideLayout ? (element.getParent() as BaseContainer) : element\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the device type based on the width of the container element.\n\t *\n\t * @private\n\t * @param {ResizeObserverEntry[]} entries - The entries returned by the ResizeObserver.\n\t * @returns {void}\n\t */\n\tprivate _setDeviceType(entries: ResizeObserverEntry[]): void {\n\t\tconst [entry] = entries;\n\t\tconst parentLayout = entry.target.parentNode as Element;\n\t\tconst width = parentLayout.clientWidth;\n\t\tconst deviceType = calculateDeviceType(width);\n\n\t\t//when width is zero, dom is not rendered hence setting device type can cause wrong calculation\n\t\tif (this._deviceType !== deviceType && width > 0) {\n\t\t\tthis._deviceType = deviceType;\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the device type for the current instance.\n\t *\n\t * @private\n\t * @returns {DeviceType} - The device type. If the device type is not set, it calculates\n\t * and returns the device type based on the current device width.\n\t */\n\tpublic getDeviceType(): DeviceType {\n\t\treturn this._deviceType || calculateDeviceType();\n\t}\n\n\t/**\n\t * Records the performance metrics for the container.\n\t * This is applicable only if the container is part of a layout.\n\t *\n\t * @private\n\t */\n\tprivate _markPerformanceMetrics() {\n\t\tconst elementName = this.getMetadata().getName() as keyof typeof UIElements;\n\t\trecordElementLoadStart(elementName);\n\n\t\tthis.getContent()?.forEach((panel) => {\n\t\t\tpanel.attachEventOnce(\"loaded\", () => {\n\t\t\t\trecordElementLoadEnd(elementName);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Returns a UI5 `HTML` control that contains the generic placeholder content.\n\t *\n\t * @returns {Control} A `sap.ui.core.HTML` control displaying the placeholder content.\n\t */\n\tpublic getGenericPlaceholder(): Control | undefined {\n\t\tconst content = this.getGenericPlaceholderContent();\n\t\tif (!content) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn new HTML({ content });\n\t}\n\n\t/**\n\t * Default implementation: returns undefined.\n\t */\n\tprotected getGenericPlaceholderContent(): string | undefined {\n\t\treturn undefined;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}