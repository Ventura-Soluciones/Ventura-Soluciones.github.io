{"version":3,"file":"InsightsContainer-dbg-dbg.js","names":["sap","ui","define","__BaseContainer","__CardsPanel","__ErrorPanel","___InsightsContainerGenericPlaceholder","__TilesPanel","___utils_Device","___utils_InsightsUtils","_interopRequireDefault","obj","__esModule","default","BaseContainer","CardsPanel","cardsContainerActionButtons","cardsContainerMenuItems","ErrorPanel","getInsightsPlaceholder","TilesPanel","tilesContainerActionButtons","tilesContainerMenuItems","DeviceType","sortMenuItems","tilesPanelName","cardsPanelName","sortedMenuItems","REFRESH","ADD_APPS","EDIT_TILES","EDIT_CARDS","AI_INSIGHT_CARD","SHOW_MORE","InsightsContainer","extend","renderer","apiVersion","constructor","_constructor","id","settings","BaseContainer.prototype.constructor.call","_isInitialRender","init","_init","BaseContainer.prototype.init.call","setProperty","_i18nBundle","getText","panelLoaded","loaded","undefined","count","panelContext","setTooltip","String","addCustomSetting","load","_load","aContent","getContent","forEach","oContent","getMetadata","getName","addCommonMenuItems","getContainerMenuItems","addCommonActionButtons","getContainerActionButtons","_addContainerHeader","content","panel","handleHideHeader","attachHandleHidePanel","handleHidePanel","attachHandleUnhidePanel","unhidePanelIfHidden","renderPanel","_handleHidePanel","removeContent","panelName","handlePanelLoad","panels","_getLoadedPanelNames","visibleOrPendingPanels","getVisibleOrPendingPanels","panelCount","length","_errorPanel","getId","messageTitle","messageDescription","getData","addAggregation","hiddenMenuItems","hiddenActionButtons","_hideMenuItems","_hideActionButtons","_removeContainerHeader","getAggregation","menuItem","toggleMenuListItem","actionButton","toggleActionButton","handleAddHeader","containerMenuItems","includedInHiddenItems","some","hiddenItem","includes","containerActionButtons","updatePanelsItemCount","_updatePanelsItemCount","itemCount","_unhidePanelIfHidden","layout","_getLayout","panelExpandedName","_getCurrentExpandedElementName","processPanelVisibility","insertContentFn","panelWrapper","_getPanelContentWrapper","getProperty","hasStyleClass","removeStyleClass","listener","detachOnCollapse","attachOnCollapse","insertContent","addContent","_updateHeaderElements","adjustLayout","_adjustLayout","getDeviceType","Mobile","toggleActionButtons","ADD_TILES","_addCommonMenuItems","menuItems","_sortMenuItems","_addCommonActionButtons","actionButtons","_handlePanelLoad","oVal","updateActionButton","_updateActionButton","visibility","text","getVisible","setText","_updateContainerHeader","updateMenuItem","_updateMenuItem","getTitle","setTitle","Object","keys","filter","_getVisibleOrPendingPanels","removeAllAggregation","getGenericPlaceholderContent","_getGenericPlaceholderContent"],"sources":["InsightsContainer.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Button from \"sap/m/Button\";\nimport type { $BaseContainerSettings } from \"./BaseContainer\";\nimport BaseContainer from \"./BaseContainer\";\nimport BasePanel from \"./BasePanel\";\nimport CardsPanel, { cardsContainerActionButtons, cardsContainerMenuItems } from \"./CardsPanel\";\nimport ErrorPanel from \"./ErrorPanel\";\nimport { getInsightsPlaceholder } from \"./InsightsContainerGenericPlaceholder\";\nimport MenuItem from \"./MenuItem\";\nimport TilesPanel, { tilesContainerActionButtons, tilesContainerMenuItems } from \"./TilesPanel\";\nimport { DeviceType } from \"./utils/Device\";\nimport { sortMenuItems } from \"./utils/InsightsUtils\";\n\nconst tilesPanelName: string = \"sap.cux.home.TilesPanel\";\nconst cardsPanelName: string = \"sap.cux.home.CardsPanel\";\nconst sortedMenuItems: (tilesContainerMenuItems | cardsContainerMenuItems | string)[] = [\n\ttilesContainerMenuItems.REFRESH,\n\tcardsContainerMenuItems.REFRESH,\n\ttilesContainerMenuItems.ADD_APPS,\n\ttilesContainerMenuItems.EDIT_TILES,\n\tcardsContainerMenuItems.EDIT_CARDS,\n\tcardsContainerMenuItems.AI_INSIGHT_CARD,\n\ttilesContainerMenuItems.SHOW_MORE,\n\tcardsContainerMenuItems.SHOW_MORE,\n\t\"settings\"\n];\n\ninterface IpanelLoaded {\n\t[key: string]: { loaded: boolean | undefined; count: number };\n}\n\ninterface IpanelContext {\n\t[key: string]: TilesPanel | CardsPanel;\n}\n\n/**\n *\n * Container class for managing and storing Insights Tiles and Insights Cards.\n *\n * @extends sap.cux.home.BaseContainer\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @internal\n * @experimental Since 1.121\n * @public\n *\n * @alias sap.cux.home.InsightsContainer\n */\n\nexport default class InsightsContainer extends BaseContainer {\n\tstatic readonly renderer = {\n\t\t...BaseContainer.renderer,\n\t\tapiVersion: 2\n\t};\n\tprivate _errorPanel!: ErrorPanel;\n\tprivate _isInitialRender: boolean = true;\n\tprivate panelLoaded!: IpanelLoaded;\n\tprivate panelContext!: IpanelContext;\n\n\tconstructor(id?: string | $BaseContainerSettings);\n\tconstructor(id?: string, settings?: $BaseContainerSettings);\n\t/**\n\t * Constructor for a new Insights container.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $BaseContainerSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\t\tthis.setProperty(\"title\", this._i18nBundle?.getText(\"insights\"));\n\t\t/* As Container Level default value for enableSettings is false,\n\t\t\tthis needs to be added from container level.\n\t\t\t(default value cannot be true as News & Page Container header should be hidden)\n\t\t*/\n\t\tthis.setProperty(\"enableSettings\", true);\n\t\tthis.setProperty(\"orientation\", \"Vertical\");\n\t\tthis.panelLoaded = {\n\t\t\t[tilesPanelName]: { loaded: undefined, count: 0 },\n\t\t\t[cardsPanelName]: { loaded: undefined, count: 0 }\n\t\t};\n\t\tthis.panelContext = {};\n\t\tthis.setTooltip(String(this._i18nBundle.getText(\"insights\")));\n\t\tthis.addCustomSetting(\"title\", this._i18nBundle.getText(\"insightLayoutSectionTitle\") as string);\n\t\tthis.setTooltip(String(this._i18nBundle.getText(\"insightLayoutSectionTitle\")));\n\t}\n\n\t/**\n\t * Loads the Insights section.\n\t * Overrides the load method of the BaseContainer.\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic load() {\n\t\tif (this._isInitialRender) {\n\t\t\tconst aContent = this.getContent();\n\t\t\taContent.forEach((oContent) => {\n\t\t\t\tthis.panelContext[oContent.getMetadata().getName()] = oContent as TilesPanel | CardsPanel;\n\t\t\t\tthis.addCommonMenuItems((oContent as TilesPanel | CardsPanel).getContainerMenuItems?.());\n\t\t\t\tthis.addCommonActionButtons((oContent as TilesPanel | CardsPanel).getContainerActionButtons?.());\n\t\t\t});\n\n\t\t\tthis._addContainerHeader();\n\n\t\t\t// Render individual panels\n\t\t\taContent.forEach((content) => {\n\t\t\t\tconst panel = content as TilesPanel | CardsPanel;\n\t\t\t\tpanel.handleHideHeader();\n\t\t\t\tpanel.attachHandleHidePanel(() => this.handleHidePanel(panel));\n\t\t\t\tpanel.attachHandleUnhidePanel(() => this.unhidePanelIfHidden(panel));\n\t\t\t\tvoid panel.renderPanel();\n\t\t\t});\n\t\t\tthis._isInitialRender = false;\n\t\t}\n\t}\n\n\t/**\n\t * Handles the hiding of a panel by removing its content, updating the panel load status,\n\t * and managing the display of the container header and error panel.\n\t *\n\t * @param {BasePanel} panel - The panel to be hidden.\n\t * @private\n\t */\n\tpublic handleHidePanel(panel: BasePanel) {\n\t\tthis.removeContent(panel);\n\t\tconst panelName = panel.getMetadata().getName();\n\t\tthis.handlePanelLoad(panelName, { loaded: false, count: 0 });\n\t\tconst panels = this._getLoadedPanelNames() || [];\n\t\tconst visibleOrPendingPanels = this.getVisibleOrPendingPanels() || [];\n\t\tconst panelCount = panels?.length;\n\t\tthis._addContainerHeader();\n\t\t// only show error panel if all panels loaded state is false\n\t\tif (visibleOrPendingPanels.length === 0) {\n\t\t\tif (!this._errorPanel) {\n\t\t\t\tthis._errorPanel = new ErrorPanel(`${this.getId()}-errorPanel`, {\n\t\t\t\t\tmessageTitle: this._i18nBundle.getText(\"noAppsTitle\"),\n\t\t\t\t\tmessageDescription: this._i18nBundle.getText(\"noInsightsMsg\")\n\t\t\t\t});\n\t\t\t\tthis._errorPanel.getData();\n\t\t\t}\n\t\t\tthis.addAggregation(\"content\", this._errorPanel);\n\t\t} else if (panelCount === 1) {\n\t\t\tconst panel = this.getContent()[0];\n\t\t\tif (panel && !(panel instanceof ErrorPanel)) {\n\t\t\t\t(panel as TilesPanel | CardsPanel)?.handleHideHeader();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adds the container header based on the number of visible panels.\n\t *\n\t * @private\n\t */\n\tprivate _addContainerHeader() {\n\t\tconst panels: string[] = this._getLoadedPanelNames();\n\t\tlet hiddenMenuItems: string[] = [];\n\t\tlet hiddenActionButtons: string[] = [];\n\t\tthis.setProperty(\"title\", this._i18nBundle?.getText(\"insights\"));\n\t\tif (panels.length === 0 || this.getContent()[0] instanceof ErrorPanel) {\n\t\t\thiddenMenuItems = [\n\t\t\t\ttilesContainerMenuItems.REFRESH,\n\t\t\t\tcardsContainerMenuItems.REFRESH,\n\t\t\t\ttilesContainerMenuItems.SHOW_MORE,\n\t\t\t\tcardsContainerMenuItems.SHOW_MORE\n\t\t\t];\n\t\t\tthis._hideMenuItems(hiddenMenuItems);\n\t\t\thiddenActionButtons = [tilesContainerActionButtons.SHOW_MORE, cardsContainerActionButtons.SHOW_MORE];\n\t\t\tthis._hideActionButtons(hiddenActionButtons);\n\t\t} else if (panels.length === 1) {\n\t\t\tconst panelName = panels[0];\n\t\t\tthis.setProperty(\"title\", `${this._i18nBundle?.getText(\"insights\")} (${this.panelLoaded[panelName].count || 0})`);\n\t\t\tif (this.panelContext[panels[0]] instanceof TilesPanel) {\n\t\t\t\thiddenMenuItems = [cardsContainerMenuItems.REFRESH, cardsContainerMenuItems.SHOW_MORE];\n\t\t\t\thiddenActionButtons = [cardsContainerActionButtons.SHOW_MORE];\n\t\t\t}\n\t\t\tif (this.panelContext[panels[0]] instanceof CardsPanel) {\n\t\t\t\thiddenMenuItems = [tilesContainerMenuItems.REFRESH, tilesContainerMenuItems.SHOW_MORE];\n\t\t\t\thiddenActionButtons = [tilesContainerActionButtons.SHOW_MORE];\n\t\t\t}\n\t\t\tthis._hideMenuItems(hiddenMenuItems);\n\t\t\tthis._hideActionButtons(hiddenActionButtons);\n\t\t}\n\t}\n\n\t/**\n\t * Removes the container header.\n\t *\n\t * @private\n\t */\n\tprivate _removeContainerHeader() {\n\t\tthis.setProperty(\"title\", \"\");\n\t\t(this.getAggregation(\"menuItems\") as MenuItem[])?.forEach((menuItem) => this.toggleMenuListItem(menuItem, false));\n\t\t(this.getAggregation(\"actionButtons\") as Button[])?.forEach((actionButton) => this.toggleActionButton(actionButton, false));\n\t\tconst panels = this._getLoadedPanelNames();\n\t\tpanels.forEach((panelName) => {\n\t\t\tthis.panelContext[panelName]?.handleAddHeader?.();\n\t\t});\n\t}\n\n\t/**\n\t * Hides the specified menu items.\n\t *\n\t * @private\n\t * @param {string[]} hiddenMenuItems - The IDs of the menu items to hide.\n\t */\n\tprivate _hideMenuItems(hiddenMenuItems: string[]) {\n\t\tconst containerMenuItems = this.getAggregation(\"menuItems\") as MenuItem[];\n\t\tcontainerMenuItems?.forEach((menuItem) => {\n\t\t\tconst includedInHiddenItems = hiddenMenuItems.some((hiddenItem) => menuItem.getId().includes(hiddenItem));\n\t\t\tthis.toggleMenuListItem(menuItem, !includedInHiddenItems);\n\t\t});\n\t}\n\n\t/**\n\t * Hides the specified action buttons.\n\t *\n\t * @private\n\t * @param {string[]} hiddenActionButtons - The IDs of the action buttons to hide.\n\t */\n\tprivate _hideActionButtons(hiddenActionButtons: string[]) {\n\t\tconst containerActionButtons = this.getAggregation(\"actionButtons\") as Button[];\n\t\tcontainerActionButtons?.forEach((actionButton) => {\n\t\t\tconst includedInHiddenItems = hiddenActionButtons.some((hiddenItem) => actionButton.getId().includes(hiddenItem));\n\t\t\tthis.toggleActionButton(actionButton, !includedInHiddenItems);\n\t\t});\n\t}\n\n\t/**\n\t * Updates the item count for the specified panel.\n\t *\n\t * @param {number} itemCount - The new item count.\n\t * @param {string} panelName - The name of the panel.\n\t */\n\tpublic updatePanelsItemCount(itemCount: number, panelName: string) {\n\t\tthis.panelLoaded[panelName].count = itemCount;\n\t\tconst panels = this._getLoadedPanelNames();\n\t\t// Container Title Will be displayed only in case of only one panel is present\n\t\tif (panels.length === 1) {\n\t\t\tthis.setProperty(\"title\", `${this._i18nBundle?.getText(\"insights\")} (${itemCount || 0})`);\n\t\t}\n\t}\n\n\t/**\n\t * Unhides the specified panel if it is hidden.\n\t *\n\t * @param {TilesPanel | CardsPanel} panel - The panel to unhide.\n\t */\n\tpublic unhidePanelIfHidden(panel: TilesPanel | CardsPanel) {\n\t\tconst layout = this._getLayout();\n\t\tconst panelExpandedName = layout._getCurrentExpandedElementName();\n\n\t\tif (this._errorPanel) {\n\t\t\tthis.removeContent(this._errorPanel);\n\t\t}\n\n\t\t// Function to handle panel content insertion\n\t\tconst processPanelVisibility = (panelName: string, insertContentFn: () => void) => {\n\t\t\tconst panelWrapper = this._getPanelContentWrapper(panel);\n\t\t\tif (!panelExpandedName || panelExpandedName === panel.getProperty(\"fullScreenName\")) {\n\t\t\t\t/**\n                    loaded value can be false or undefined, false being hidden and undefined being loading\n                    if the panel is hidden then only unhide it\n                */\n\t\t\t\tif (this.panelLoaded[panelName].loaded === false) {\n\t\t\t\t\tinsertContentFn();\n\t\t\t\t\t// Remove hidden class if applied\n\t\t\t\t\tif (panelWrapper.hasStyleClass(\"sapCuxHidden\")) {\n\t\t\t\t\t\tpanelWrapper.removeStyleClass(\"sapCuxHidden\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.handlePanelLoad(panelName, { loaded: true, count: this.panelLoaded[panelName].count });\n\t\t\t} else {\n\t\t\t\tconst listener = () => {\n\t\t\t\t\tinsertContentFn();\n\t\t\t\t\t// Remove hidden class if applied\n\t\t\t\t\tif (panelWrapper.hasStyleClass(\"sapCuxHidden\")) {\n\t\t\t\t\t\tpanelWrapper.removeStyleClass(\"sapCuxHidden\");\n\t\t\t\t\t}\n\t\t\t\t\tlayout.detachOnCollapse(listener); // Remove the listener after execution\n\t\t\t\t};\n\t\t\t\tthis.handlePanelLoad(panelName, { loaded: true, count: this.panelLoaded[panelName].count });\n\t\t\t\tlayout.attachOnCollapse(listener);\n\t\t\t}\n\t\t};\n\n\t\t// Handling TilesPanel\n\t\tif (panel instanceof TilesPanel && !this.panelLoaded[tilesPanelName].loaded) {\n\t\t\tprocessPanelVisibility(tilesPanelName, () => this.insertContent(this.panelContext[tilesPanelName], 0));\n\t\t}\n\n\t\t// Handling CardsPanel\n\t\tif (panel instanceof CardsPanel && !this.panelLoaded[cardsPanelName].loaded) {\n\t\t\tprocessPanelVisibility(cardsPanelName, () => this.addContent(this.panelContext[cardsPanelName]));\n\t\t}\n\t}\n\n\t/**\n\t * Updates the container header based on the number of visible panels.\n\t *\n\t * @private\n\t * @param {TilesPanel | CardsPanel} panel - The panel being managed.\n\t */\n\n\tprivate _updateHeaderElements(panel: TilesPanel | CardsPanel) {\n\t\tconst panels = this._getLoadedPanelNames();\n\t\tif (panels.length > 1) {\n\t\t\tthis._removeContainerHeader();\n\t\t} else {\n\t\t\tthis._addContainerHeader();\n\t\t\tpanel.handleHideHeader();\n\t\t}\n\t}\n\n\t/**\n\t * Adjusts the layout of the container.\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic adjustLayout() {\n\t\t//hide actions if the device is a phone\n\t\tif (this.getDeviceType() === DeviceType.Mobile) {\n\t\t\tthis.toggleActionButtons(false);\n\t\t} else {\n\t\t\tconst panels = this._getLoadedPanelNames();\n\t\t\t// Unhide the Add Tiles button if the device is not a phone and header is visible\n\t\t\tif (panels.length < 2) {\n\t\t\t\t(this.getAggregation(\"actionButtons\") as Button[])?.forEach((actionButton) => {\n\t\t\t\t\tif (actionButton.getId().includes(tilesContainerActionButtons.ADD_TILES)) {\n\t\t\t\t\t\tthis.toggleActionButton(actionButton, true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t//adjust layout of all panels\n\t\t(this.getContent() as (TilesPanel | CardsPanel)[]).forEach((panel) => panel._adjustLayout?.());\n\t}\n\n\t/**\n\t * Add common Menu Items for Insights Container from Panel\n\t *\n\t * @private\n\t */\n\tpublic addCommonMenuItems(menuItems: MenuItem[]) {\n\t\tmenuItems.forEach((menuItem) => this.addAggregation(\"menuItems\", menuItem));\n\t\t// after adding menu items sort them based on the order\n\t\tthis._sortMenuItems(sortedMenuItems);\n\t}\n\n\t/**\n\t * Add common Action Buttons for Insights Container from Panel\n\t *\n\t * @private\n\t */\n\tpublic addCommonActionButtons(actionButtons: Button[]) {\n\t\tactionButtons.forEach((actionButton) => this.addAggregation(\"actionButtons\", actionButton));\n\t}\n\n\t/**\n\t * Handles the loading of a panel.\n\t *\n\t * @param {string} panelName - The name of the panel.\n\t * @param {object} oVal - The load status and count of the panel.\n\t * @param {boolean} oVal.loaded - The load status of the panel.\n\t * @param {number} oVal.count - The count of items in the panel.\n\t */\n\tpublic handlePanelLoad(panelName: string, oVal: { loaded: boolean; count: number }) {\n\t\tif (this.panelLoaded[panelName].loaded !== oVal.loaded) {\n\t\t\tthis.panelLoaded[panelName] = oVal;\n\t\t\tthis._updateHeaderElements(this.panelContext[panelName]);\n\t\t}\n\t\tthis.adjustLayout();\n\t}\n\n\t/**\n\t * Updates the visibility and text of an action button.\n\t *\n\t * @param {Button} actionButton - The action button to update.\n\t * @param {boolean} visibility - The visibility of the action button.\n\t * @param {string} text - The text of the action button.\n\t */\n\tpublic updateActionButton(actionButton: Button, visibility: boolean, text: string) {\n\t\tif (actionButton?.getVisible() !== visibility || actionButton?.getText() !== text) {\n\t\t\tthis.toggleActionButton(actionButton, visibility);\n\t\t\tactionButton?.setText(text);\n\t\t\tthis._updateContainerHeader(this);\n\t\t}\n\t}\n\n\t/**\n\t * Updates the visibility and text of a menu item.\n\t *\n\t * @param {MenuItem} menuItem - The menu item to update.\n\t * @param {boolean} visibility - The visibility of the menu item.\n\t * @param {string} text - The text of the menu item.\n\t */\n\tpublic updateMenuItem(menuItem: MenuItem, visibility: boolean, text: string) {\n\t\tif (menuItem?.getVisible() !== visibility || menuItem?.getTitle() !== text) {\n\t\t\tthis.toggleMenuListItem(menuItem, visibility);\n\t\t\tmenuItem?.setTitle(text);\n\t\t\tthis._updateContainerHeader(this);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the names of the loaded panels.\n\t *\n\t * @private\n\t * @returns {string[]} The names of the loaded panels.\n\t */\n\tprivate _getLoadedPanelNames() {\n\t\treturn Object.keys(this.panelLoaded).filter((panelName) => this.panelLoaded[panelName].loaded);\n\t}\n\n\t/**\n\t * Returns the names of panels that are still loading or in loaded true state\n\t *\n\t * @private\n\t * @private\n\t */\n\tprivate getVisibleOrPendingPanels() {\n\t\treturn Object.keys(this.panelLoaded).filter((panelName) => this.panelLoaded[panelName].loaded !== false);\n\t}\n\t/**\n\t * Sorts the menu items based on the provided order.\n\t *\n\t * @private\n\t * @param {string[]} menuItems - The order of the menu items.\n\t */\n\tprivate _sortMenuItems(menuItems: string[]) {\n\t\tconst containerMenuItems = this.getAggregation(\"menuItems\") as MenuItem[];\n\t\tlet sortedMenuItems = sortMenuItems(menuItems, containerMenuItems);\n\t\tthis.removeAllAggregation(\"menuItems\");\n\t\tsortedMenuItems?.forEach((menuItem) => this.addAggregation(\"menuItems\", menuItem));\n\t}\n\n\t/**\n\t * Retrieves the generic placeholder content for the Insights container.\n\t *\n\t * @returns {string} The HTML string representing the Insights container's placeholder content.\n\t */\n\tprotected getGenericPlaceholderContent(): string {\n\t\treturn getInsightsPlaceholder();\n\t}\n}\n"],"mappings":"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","ignoreList":[]}