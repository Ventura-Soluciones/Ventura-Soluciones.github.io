{"version":3,"file":"BasePanel-dbg-dbg.js","names":["sap","ui","define","DragDropInfo","Element","Lib","sap_ui_core_library","___utils_Device","___utils_DragDropUtils","dnd","calculateDeviceType","attachKeyboardHandler","BasePanel","extend","metadata","library","properties","title","type","group","defaultValue","key","tooltip","visibility","enableSettings","enableKeyUserSettings","enableFullScreen","fullScreenName","defaultAggregation","aggregations","content","multiple","singularName","actionButtons","menuItems","events","onExpand","loaded","associations","fullScreenButton","constructor","_constructor","id","settings","Element.prototype.constructor.call","init","_init","_content","_i18nBundle","getResourceBundleFor","_getContent","getAggregation","_addContent","control","push","insertAggregation","getParent","_addToPanel","_setCount","count","_setPanelCount","getDeviceType","_getDeviceType","container","addDragDropConfigTo","_addDragDropConfigTo","dropHandler","keyboardHandler","dropPositionType","arguments","length","undefined","DropPosition","Between","addDragDropConfig","getId","sourceAggregation","targetAggregation","dropPosition","dropLayout","DropLayout","Horizontal","drop","attachBrowserEvent","event","disableNavigation","metaKey","ctrlKey","dragDropEvent"],"sources":["BasePanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport GridContainer from \"sap/f/GridContainer\";\nimport FlexBox from \"sap/m/FlexBox\";\nimport HeaderContainer from \"sap/m/HeaderContainer\";\nimport Control from \"sap/ui/core/Control\";\nimport DragDropInfo from \"sap/ui/core/dnd/DragDropInfo\";\nimport { DropInfo$DropEvent } from \"sap/ui/core/dnd/DropInfo\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport Element from \"sap/ui/core/Element\";\nimport Lib from \"sap/ui/core/Lib\";\nimport { dnd } from \"sap/ui/core/library\";\nimport BaseContainer from \"./BaseContainer\";\nimport { $BasePanelSettings } from \"./BasePanel\";\nimport { DeviceType, calculateDeviceType } from \"./utils/Device\";\nimport { attachKeyboardHandler } from \"./utils/DragDropUtils\";\n\n/**\n *\n * Abstract base class for all panels placed in {@link sap.cux.home.BaseContainer}.\n *\n * @extends sap.ui.core.Element\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @abstract\n * @internal\n * @experimental Since 1.121\n * @public\n *\n * @alias sap.cux.home.BasePanel\n */\nexport default abstract class BasePanel extends Element {\n\tprotected _i18nBundle!: ResourceBundle;\n\tprivate _content!: Control[];\n\n\tconstructor(id?: string | $BasePanelSettings);\n\tconstructor(id?: string, settings?: $BasePanelSettings);\n\t/**\n\t * Constructor for a new Base Panel.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $BasePanelSettings) {\n\t\tsuper(id, settings);\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * Title for the panel.\n\t\t\t */\n\t\t\ttitle: { type: \"string\", group: \"Misc\", defaultValue: \"\" },\n\t\t\t/**\n\t\t\t * Key for the panel.\n\t\t\t */\n\t\t\tkey: { type: \"string\", group: \"Misc\", defaultValue: \"\" },\n\t\t\t/**\n\t\t\t * Tooltip for the panel.\n\t\t\t */\n\t\t\ttooltip: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Specifies whether settings should be enabled for the panel.\n\t\t\t */\n\t\t\tenableSettings: { type: \"boolean\", group: \"Misc\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Specifies whether key user settings should be enabled for the panel.\n\t\t\t */\n\t\t\tenableKeyUserSettings: { type: \"boolean\", group: \"Misc\", visibility: \"hidden\", defaultValue: true },\n\t\t\t/**\n\t\t\t * Indicates whether full screen is enabled for this control.\n\t\t\t */\n\t\t\tenableFullScreen: { type: \"boolean\", group: \"Misc\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * The name of the URL parameter used to expand the container into full-screen mode.\n\t\t\t * This property specifies the parameter key expected in the URL query string\n\t\t\t * to identify the container to be expanded.\n\t\t\t */\n\t\t\tfullScreenName: { type: \"string\", group: \"Misc\", visibility: \"hidden\" }\n\t\t},\n\t\tdefaultAggregation: \"content\",\n\t\taggregations: {\n\t\t\t/**\n\t\t\t * Specifies the content aggregation of the panel.\n\t\t\t */\n\t\t\tcontent: { multiple: true, singularName: \"content\", visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Specifies the actions to be shown within the panel.\n\t\t\t */\n\t\t\tactionButtons: { type: \"sap.m.Button\", multiple: true, singularName: \"actionButton\" },\n\t\t\t/**\n\t\t\t * Specifies the items that are shown within the dropdown menu of the panel.\n\t\t\t */\n\t\t\tmenuItems: { type: \"sap.cux.home.MenuItem\", multiple: true, singularName: \"menuItem\" }\n\t\t},\n\t\tevents: {\n\t\t\t/**\n\t\t\t * Event is fired before the container is expanded.\n\t\t\t */\n\t\t\tonExpand: {},\n\t\t\t/**\n\t\t\t * Event is fired after the panel is loaded.\n\t\t\t */\n\t\t\tloaded: {}\n\t\t},\n\t\tassociations: {\n\t\t\tfullScreenButton: { type: \"sap.m.Button\", multiple: false, singularName: \"fullScreenButton\", visibility: \"hidden\" }\n\t\t}\n\t};\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tthis._content = [];\n\t\tthis._i18nBundle = Lib.getResourceBundleFor(\"sap.cux.home.i18n\") as ResourceBundle;\n\t}\n\n\t/**\n\t * Cache and return panel content since the content would\n\t * have a different inner control as parent after rendering\n\t *\n\t * @private\n\t * @returns {Control[]} - array of panel content\n\t */\n\tpublic _getContent(): Control[] {\n\t\tthis._content = this._content || this.getAggregation(\"content\");\n\t\treturn this._content;\n\t}\n\n\t/**\n\t * Overridden method for adding content to a panel so that\n\t * it's added to the corresponding layout-specific inner\n\t * control as well\n\t *\n\t * @private\n\t * @param {Control} control - control to be added to the content\n\t */\n\tpublic _addContent(control: Control): void {\n\t\tthis._content = this._content || this.getAggregation(\"content\");\n\t\tthis._content.push(control);\n\t\tthis.insertAggregation(\"content\", control, 0);\n\n\t\t//Insert into parent's layout control\n\t\t(this.getParent() as BaseContainer)?._addToPanel(this, control);\n\t}\n\n\t/**\n\t * Updates the count information of IconTabFilter of IconTabBar inner control\n\t * in case of SideBySide layout\n\t *\n\t * @private\n\t * @param {string} count - updated count information\n\t */\n\tpublic _setCount(count?: string): void {\n\t\t(this.getParent() as BaseContainer)?._setPanelCount(this, count);\n\t}\n\n\t/**\n\t * Retrieves the device type for the current panel.\n\t *\n\t * @private\n\t * @returns {DeviceType} - The device type of the parent container if it exists,\n\t * otherwise calculates and returns the device type based on the current device width.\n\t */\n\tprotected getDeviceType(): DeviceType {\n\t\tconst container = this.getParent() as BaseContainer;\n\t\treturn container ? container.getDeviceType() : calculateDeviceType();\n\t}\n\n\tprotected addDragDropConfigTo(\n\t\tcontainer: GridContainer | FlexBox | HeaderContainer,\n\t\tdropHandler: (event: DropInfo$DropEvent) => void,\n\t\tkeyboardHandler?: (event: KeyboardEvent) => void,\n\t\tdropPositionType: dnd.DropPosition = dnd.DropPosition.Between\n\t): void {\n\t\tcontainer\n\t\t\t.addDragDropConfig(\n\t\t\t\tnew DragDropInfo(`${container.getId()}--addDragDropConfig`, {\n\t\t\t\t\tsourceAggregation: \"items\",\n\t\t\t\t\ttargetAggregation: \"items\",\n\t\t\t\t\tdropPosition: dropPositionType,\n\t\t\t\t\tdropLayout: dnd.DropLayout.Horizontal,\n\t\t\t\t\tdrop: dropHandler\n\t\t\t\t})\n\t\t\t)\n\t\t\t.attachBrowserEvent(\"keydown\", (event: KeyboardEvent) => {\n\t\t\t\tconst disableNavigation = event.metaKey || event.ctrlKey;\n\t\t\t\tvoid attachKeyboardHandler(event, disableNavigation, (dragDropEvent: DropInfo$DropEvent) => {\n\t\t\t\t\tdropHandler(dragDropEvent);\n\t\t\t\t});\n\t\t\t});\n\t\tif (keyboardHandler) {\n\t\t\tcontainer.attachBrowserEvent(\"keydown\", keyboardHandler);\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}