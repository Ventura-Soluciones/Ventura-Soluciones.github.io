{"version":3,"file":"SituationUtils-dbg.js","names":["sap","ui","define","Formatting","Log","NavigationHandler","SelectionVariant","DateFormat","NumberFormat","ODataModel","dateFormatter","decimalFormatter","situationsModel","_getDateFormatter","datePattern","getDatePattern","getDateInstance","pattern","_getNumberFormatter","getFloatInstance","decimalSeparator","getNumberSymbol","groupingSeparator","groupingEnabled","getSituationMessage","rawText","params","arguments","length","undefined","split","composedText","replaceAll","forEach","param","SitnInstceAttribName","attributeSource","SitnInstceAttribSource","paramName","matchedAttributes","_InstanceAttributeValue","reduce","attribute","push","formattedValues","attributeMatched","rawVal","SitnInstceAttribValue","trim","formattedVal","SitnInstceAttribEntityType","format","parse","endsWith","substring","Number","join","executeNavigation","oData","ownerComponent","Promise","resolve","reject","navigationHandler","oSelectionVariant","_NavigationParam","map","SituationNotifParamName","addSelectOption","SituationNotifParameterVal","sNavigationParameters","toJSONString","navigate","SitnSemanticObject","SitnSemanticObjectAction","error","fetchNavigationTargetData","instanceId","situationEngineType","oContextBindingNavigation","_getSituationsModel","bindContext","$expand","$select","requestObject","SitnInstanceID","Error","message","serviceUrl","__exports","__esModule"],"sources":["SituationUtils.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport Formatting from \"sap/base/i18n/Formatting\";\nimport Log from \"sap/base/Log\";\nimport NavigationHandler from \"sap/fe/navigation/NavigationHandler\";\nimport SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport Component from \"sap/ui/core/Component\";\nimport DateFormat from \"sap/ui/core/format/DateFormat\";\nimport NumberFormat from \"sap/ui/core/format/NumberFormat\";\nimport ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\n\nexport interface InstanceAttribute {\n\tSitnInstceKey: string;\n\tSitnInstceAttribName: string;\n\tSitnInstceAttribSource: string;\n\tSitnInstceAttribEntityType: string;\n\t_InstanceAttributeValue: InstanceAttributeValue[];\n}\n\nexport interface InstanceAttributeValue {\n\tSitnInstceKey: string;\n\tSitnInstceAttribName: string;\n\tSitnInstceAttribSource: string;\n\tSitnInstceAttribValue: string;\n}\n\nexport interface NavigationData {\n\tSitnInstanceID: string;\n\tSitnSemanticObject: string;\n\tSitnSemanticObjectAction: string;\n\t_NavigationParam: NavigationParam[];\n}\n\ninterface NavigationParam {\n\tSituationNotifParamName: string;\n\tSituationNotifParameterVal: string;\n}\n\nlet dateFormatter: DateFormat;\nlet decimalFormatter: NumberFormat;\nlet situationsModel!: ODataModel;\n\n/**\n * Gets the date formatter instance using the medium date pattern.\n *\n * @returns {DateFormat} The date formatter instance.\n */\nconst _getDateFormatter = (): DateFormat => {\n\tif (!dateFormatter) {\n\t\tconst datePattern = Formatting.getDatePattern(\"medium\") || \"dd/MM/yyyy\";\n\t\tdateFormatter = DateFormat.getDateInstance({ pattern: datePattern });\n\t}\n\n\treturn dateFormatter;\n};\n\n/**\n * Gets the number formatter instance using the settings retrieved from Configuration.\n *\n * @returns {NumberFormat} The number formatter instance.\n */\nconst _getNumberFormatter = (): NumberFormat => {\n\tif (!decimalFormatter) {\n\t\tdecimalFormatter = NumberFormat.getFloatInstance({\n\t\t\tdecimalSeparator: Formatting.getNumberSymbol(\"decimal\") || \".\",\n\t\t\tgroupingSeparator: Formatting.getNumberSymbol(\"group\") || \",\",\n\t\t\tgroupingEnabled: true\n\t\t});\n\t}\n\n\treturn decimalFormatter;\n};\n\n/**\n * Compose the situation message by replacing placeholders with formatted parameter values.\n *\n * @private\n * @param {string} rawText - The raw text containing placeholders.\n * @param {InstanceAttribute[]} params - An array of parameters to replace in the text.\n * @returns {string} The composed text with replaced placeholders.\n */\nexport const getSituationMessage = (rawText: string, params: InstanceAttribute[] = []): string => {\n\tif (!rawText?.split) {\n\t\treturn rawText;\n\t}\n\n\tlet composedText = rawText.replaceAll(\"\\n\", \" \");\n\n\tparams.forEach((param) => {\n\t\tif (param.SitnInstceAttribName?.length > 0) {\n\t\t\tconst attributeSource = `0${param.SitnInstceAttribSource}`;\n\t\t\tconst paramName = `${attributeSource}.${param.SitnInstceAttribName}`;\n\t\t\tconst matchedAttributes = param._InstanceAttributeValue.reduce(function (matchedAttributes, attribute) {\n\t\t\t\tif (\n\t\t\t\t\tattribute.SitnInstceAttribSource === param.SitnInstceAttribSource &&\n\t\t\t\t\tattribute.SitnInstceAttribName === param.SitnInstceAttribName\n\t\t\t\t) {\n\t\t\t\t\tmatchedAttributes.push(attribute);\n\t\t\t\t}\n\n\t\t\t\treturn matchedAttributes;\n\t\t\t}, [] as InstanceAttributeValue[]);\n\n\t\t\tconst formattedValues: string[] = [];\n\t\t\tmatchedAttributes.forEach((attributeMatched) => {\n\t\t\t\tlet rawVal = attributeMatched?.SitnInstceAttribValue?.trim() || \"\";\n\t\t\t\tlet formattedVal;\n\n\t\t\t\tswitch (param.SitnInstceAttribEntityType) {\n\t\t\t\t\tcase \"Edm.DateTime\":\n\t\t\t\t\t\tformattedVal = _getDateFormatter().format(_getDateFormatter().parse(rawVal));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Edm.Decimal\":\n\t\t\t\t\t\t// If the parameter string ends with a minus sign, move it to the first position\n\t\t\t\t\t\tif (rawVal.endsWith(\"-\")) {\n\t\t\t\t\t\t\trawVal = `-${rawVal.substring(0, rawVal.length - 1)}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tformattedVal = _getNumberFormatter().format(Number(rawVal));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tformattedVal = rawVal;\n\t\t\t\t}\n\n\t\t\t\tformattedValues.push(formattedVal);\n\t\t\t});\n\n\t\t\t// Replace placeholders with formatted values\n\t\t\tcomposedText = composedText.split(`{${paramName}}`).join(formattedValues.join(\", \"));\n\t\t}\n\t});\n\n\treturn composedText;\n};\n\n/**\n * Executes navigation based on provided data.\n *\n * @private\n * @param {NavigationData} oData - Data object containing navigation parameters.\n * @param {Component} ownerComponent - The owner component initiating the navigation.\n * @returns {Promise<void>} A promise that resolves or rejects based on the navigation result.\n */\nexport function executeNavigation(oData: NavigationData, ownerComponent: Component): Promise<void> {\n\treturn new Promise((resolve, reject) => {\n\t\t//@ts-expect-error: params\n\t\tconst navigationHandler = new NavigationHandler(ownerComponent);\n\t\tconst oSelectionVariant = new SelectionVariant();\n\t\toData._NavigationParam?.map(function (param) {\n\t\t\tif (param.SituationNotifParamName) {\n\t\t\t\toSelectionVariant.addSelectOption(param.SituationNotifParamName, \"I\", \"EQ\", param.SituationNotifParameterVal);\n\t\t\t}\n\t\t});\n\t\tconst sNavigationParameters = oSelectionVariant.toJSONString();\n\t\tnavigationHandler.navigate(\n\t\t\toData.SitnSemanticObject,\n\t\t\toData.SitnSemanticObjectAction,\n\t\t\tsNavigationParameters,\n\t\t\tresolve,\n\t\t\t(error: unknown) => reject(error as Error)\n\t\t);\n\t});\n}\n\n/**\n * Fetches navigation target data based on the provided instance ID.\n *\n * @private\n * @async\n * @param {string} instanceId - The instance ID for which to fetch navigation data.\n * @param {string} situationEngineType - Situation Engine Type\n * @returns {Promise<NavigationData>} A promise that resolves with an object containing navigation data.\n */\nexport function fetchNavigationTargetData(instanceId: string, situationEngineType: string): Promise<NavigationData> | undefined {\n\ttry {\n\t\tif (situationEngineType === \"1\") {\n\t\t\tconst oContextBindingNavigation = _getSituationsModel().bindContext(`/Navigation/${instanceId}`, undefined, {\n\t\t\t\t$expand: { _NavigationParam: { $select: [\"SituationNotifParamName\", \"SituationNotifParameterVal\"] } },\n\t\t\t\t$select: [\"SitnInstanceID\", \"SitnSemanticObject\", \"SitnSemanticObjectAction\"]\n\t\t\t});\n\t\t\treturn oContextBindingNavigation.requestObject();\n\t\t} else {\n\t\t\treturn Promise.resolve({\n\t\t\t\tSitnInstanceID: instanceId,\n\t\t\t\tSitnSemanticObject: \"SituationInstance\",\n\t\t\t\tSitnSemanticObjectAction: \"display\",\n\t\t\t\t_NavigationParam: [\n\t\t\t\t\t{\n\t\t\t\t\t\tSituationNotifParamName: \"ui-type\",\n\t\t\t\t\t\tSituationNotifParameterVal: \"extended\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tSituationNotifParamName: \"SitnInstceKey\",\n\t\t\t\t\t\tSituationNotifParameterVal: instanceId\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t});\n\t\t}\n\t} catch (error: unknown) {\n\t\tLog.error(error instanceof Error ? error.message : \"\");\n\t}\n}\n\n/**\n * Retrieves the Situations model. If the model does not exist, it creates a new one.\n *\n * @private\n * @returns {ODataModel} The Situations model instance.\n */\nfunction _getSituationsModel(): ODataModel {\n\tif (!situationsModel) {\n\t\tsituationsModel = new ODataModel({\n\t\t\tserviceUrl: \"/sap/opu/odata4/sap/a_sitn2mblinstce_v4/srvd/sap/a_sitn2mblinstce_srv/0002/\"\n\t\t});\n\t}\n\treturn situationsModel;\n}\n"],"mappings":"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","ignoreList":[]}