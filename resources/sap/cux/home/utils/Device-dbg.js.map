{"version":3,"file":"Device-dbg.js","names":["sap","ui","define","Device","DeviceWidth","Mobile","Tablet","Desktop","DeviceType","calculateDeviceType","width","arguments","length","undefined","resize","system","phone","LargeDesktop","fetchElementProperties","domRef","properties","oProperties","forEach","property","parseFloat","window","getComputedStyle","getPropertyValue","calculateCardWidth","cardLayoutConfig","gap","peekWidth","totalCards","Math","max","minWidth","min","containerWidth","maxWidth","mainCardWidth","cardCountToUse","totalGap","twoCardWidth","possibleCardCount","cardWidth","__exports","__esModule"],"sources":["Device.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Device from \"sap/ui/Device\";\n\ninterface CardLayoutConfig {\n\tcontainerWidth: number;\n\ttotalCards: number;\n\tminWidth: number;\n\tmaxWidth: number;\n}\n\n/** Device widths in px */\nconst DeviceWidth = {\n\tMobile: 624,\n\tTablet: 1024,\n\tDesktop: 1135\n};\n\nexport enum DeviceType {\n\tMobile = \"Mobile\",\n\tTablet = \"Tablet\",\n\tDesktop = \"Desktop\",\n\tLargeDesktop = \"LargeDesktop\"\n}\n\n/**\n * Calculates the device type based on the given width.\n *\n * @param {number} [width=Device.resize.width] - The width of the device. Defaults to the current device width.\n * @returns {DeviceType} - The calculated device type.\n */\nexport function calculateDeviceType(width: number = Device.resize.width): DeviceType {\n\tif (width < DeviceWidth.Mobile || Device.system.phone) {\n\t\treturn DeviceType.Mobile;\n\t} else if (width < DeviceWidth.Tablet) {\n\t\treturn DeviceType.Tablet;\n\t} else if (width < DeviceWidth.Desktop) {\n\t\treturn DeviceType.Desktop;\n\t} else {\n\t\treturn DeviceType.LargeDesktop;\n\t}\n}\n\n/**\n * Fetches the specified CSS properties of a given DOM element and returns them as a record.\n *\n * @param {Element} domRef - The DOM element from which to fetch the properties.\n * @param {string[]} properties - An array of property names to fetch.\n * @returns {Record<string, number>} - A record where the keys are property names and the values are the corresponding property values as numbers.\n */\nexport function fetchElementProperties(domRef: Element, properties: string[]): Record<string, number> {\n\tconst oProperties: Record<string, number> = {};\n\tproperties.forEach((property) => {\n\t\toProperties[property] = parseFloat(window.getComputedStyle(domRef).getPropertyValue(property));\n\t});\n\n\treturn oProperties;\n}\n\n/**\n * Calculates the card width based on the available width and certain constraints.\n *\n * @param {CardLayoutConfig} cardLayoutConfig - Card layout configuration containing container width, no. of cards, min and max width.\n * @returns {number} The calculated card width within specified constraints.\n */\nexport function calculateCardWidth(cardLayoutConfig: CardLayoutConfig): number {\n\tconst gap = 16;\n\n\tif (calculateDeviceType() === DeviceType.Mobile) {\n\t\tconst peekWidth = 76;\n\t\tif (cardLayoutConfig.totalCards === 1) {\n\t\t\t// Single card: full width, constrained\n\t\t\treturn Math.max(cardLayoutConfig.minWidth, Math.min(cardLayoutConfig.containerWidth, cardLayoutConfig.maxWidth));\n\t\t} else {\n\t\t\t// Calculate width of the first card, reserving space for the peek of the second\n\t\t\tconst mainCardWidth = cardLayoutConfig.containerWidth - peekWidth;\n\t\t\t// Clamp to min/max width\n\t\t\treturn Math.max(cardLayoutConfig.minWidth, Math.min(mainCardWidth, cardLayoutConfig.maxWidth));\n\t\t}\n\t}\n\n\tlet cardCountToUse: number;\n\n\t// Tablet mode: width between 600 and 1023\n\tif (calculateDeviceType() === DeviceType.Tablet && cardLayoutConfig.totalCards > 1) {\n\t\tconst totalGap = gap; // gap between 2 cards\n\t\tconst twoCardWidth = (cardLayoutConfig.containerWidth - totalGap) / 2;\n\n\t\tif (twoCardWidth >= cardLayoutConfig.minWidth && twoCardWidth <= cardLayoutConfig.maxWidth) {\n\t\t\tcardCountToUse = 2;\n\t\t} else {\n\t\t\tcardCountToUse = 1;\n\t\t}\n\t} else {\n\t\t// Step 1: How many cards *can* fit based on minWidth\n\t\tlet possibleCardCount = 1;\n\t\twhile (cardLayoutConfig.containerWidth / possibleCardCount >= cardLayoutConfig.minWidth + gap) {\n\t\t\tpossibleCardCount++;\n\t\t}\n\t\tpossibleCardCount--; // Last valid value\n\t\t// Step 2: If we have fewer cards than we *can* fit, stretch them\n\t\tcardCountToUse = Math.max(Math.min(possibleCardCount, cardLayoutConfig.totalCards), Math.min(cardLayoutConfig.totalCards, 3));\n\t}\n\tif (cardCountToUse <= 0) return cardLayoutConfig.minWidth;\n\tconst totalGap = (cardCountToUse - 1) * gap;\n\tconst cardWidth = (cardLayoutConfig.containerWidth - totalGap) / cardCountToUse;\n\treturn Math.min(Math.max(cardWidth, cardLayoutConfig.minWidth), cardLayoutConfig.maxWidth);\n}\n"],"mappings":";;;;AAAAA,IAAAC,GAAAC,OAAA,2BAAAC,GAAA,aAeA,MAAMC,EAAc,CACnBC,OAAQ,IACRC,OAAQ,KACRC,QAAS,MACR,IAEUC,EAAU,SAAVA,KAAU,mBAAVA,EAAU,mBAAVA,EAAU,qBAAVA,EAAU,sCAAVA,CAAU,EAAVA,GAAU,IAaf,SAASC,IAAqE,IAAjDC,EAAaC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAGR,EAAOW,OAAOJ,MACjE,GAAIA,EAAQN,EAAYC,QAAUF,EAAOY,OAAOC,MAAO,CACtD,OAAOR,EAAWH,MACnB,MAAO,GAAIK,EAAQN,EAAYE,OAAQ,CACtC,OAAOE,EAAWF,MACnB,MAAO,GAAII,EAAQN,EAAYG,QAAS,CACvC,OAAOC,EAAWD,OACnB,KAAO,CACN,OAAOC,EAAWS,YACnB,CACD,CASO,SAASC,EAAuBC,EAAiBC,GACvD,MAAMC,EAAsC,CAAC,EAC7CD,EAAWE,QAASC,IACnBF,EAAYE,GAAYC,WAAWC,OAAOC,iBAAiBP,GAAQQ,iBAAiBJ,GAAU,GAG/F,OAAOF,CACR,CAQO,SAASO,EAAmBC,GAClC,MAAMC,EAAM,GAEZ,GAAIrB,MAA0BD,EAAWH,OAAQ,CAChD,MAAM0B,EAAY,GAClB,GAAIF,EAAiBG,aAAe,EAAG,CAEtC,OAAOC,KAAKC,IAAIL,EAAiBM,SAAUF,KAAKG,IAAIP,EAAiBQ,eAAgBR,EAAiBS,UACvG,KAAO,CAEN,MAAMC,EAAgBV,EAAiBQ,eAAiBN,EAExD,OAAOE,KAAKC,IAAIL,EAAiBM,SAAUF,KAAKG,IAAIG,EAAeV,EAAiBS,UACrF,CACD,CAEA,IAAIE,EAGJ,GAAI/B,MAA0BD,EAAWF,QAAUuB,EAAiBG,WAAa,EAAG,CACnF,MAAMS,EAAWX,EACjB,MAAMY,GAAgBb,EAAiBQ,eAAiBI,GAAY,EAEpE,GAAIC,GAAgBb,EAAiBM,UAAYO,GAAgBb,EAAiBS,SAAU,CAC3FE,EAAiB,CAClB,KAAO,CACNA,EAAiB,CAClB,CACD,KAAO,CAEN,IAAIG,EAAoB,EACxB,MAAOd,EAAiBQ,eAAiBM,GAAqBd,EAAiBM,SAAWL,EAAK,CAC9Fa,GACD,CACAA,IAEAH,EAAiBP,KAAKC,IAAID,KAAKG,IAAIO,EAAmBd,EAAiBG,YAAaC,KAAKG,IAAIP,EAAiBG,WAAY,GAC3H,CACA,GAAIQ,GAAkB,EAAG,OAAOX,EAAiBM,SACjD,MAAMM,GAAYD,EAAiB,GAAKV,EACxC,MAAMc,GAAaf,EAAiBQ,eAAiBI,GAAYD,EACjE,OAAOP,KAAKG,IAAIH,KAAKC,IAAIU,EAAWf,EAAiBM,UAAWN,EAAiBS,SAClF,CAAC,IAAAO,EAAA,CAAAC,WAAA,MAAAD,EAAArC,aAAAqC,EAAApC,sBAAAoC,EAAA3B,yBAAA2B,EAAAjB,qBAAA,OAAAiB,CAAA","ignoreList":[]}