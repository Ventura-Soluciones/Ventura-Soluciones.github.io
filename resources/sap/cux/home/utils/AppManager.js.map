{"version":3,"file":"AppManager.js","names":["sap","ui","define","Log","ResourceBundle","VersionInfo","BaseObject","ODataModelV2","Config","Container","___AnalyticalCardSkeleton","___Constants","___DataFormatUtils","__HttpHelper","__RecommendedCardUtil","_interopRequireDefault","obj","__esModule","default","_iteratorSymbol","Symbol","iterator","_settle","pact","state","value","s","_Pact","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","this","callback","e","_this","_isSettledPact","thenable","_forTo","array","body","check","i","reject","_cycle","length","AnalyticalCardSkeleton","_forOf","target","step","next","done","return","_fixup","TypeError","values","push","COLUMN_LENGTH","_catch","recover","DEFAULT_BG_COLOR","FALLBACK_ICON","FEATURE_TOGGLES","FEATURE_TOGGLE_SRVC_URL","MYHOME_PAGE_ID","MYHOME_SPACE_ID","MYINSIGHT_SECTION_ID","RECOMMENDATION_SRVC_URL","RECOMMENDED_CARD_LIMIT","createBookMarkData","getLeanURL","HttpHelper","RecommendedCardUtil","CONSTANTS","MUST_INCLUDE_RECOMMEDED_APPS","_parseSBParameters","oParam","oParsedParams","JSON","parse","oError","error","Error","message","String","undefined","_getTileProperties","vizConfigFLP","oTileProperties","_instantiationData","chip","configuration","oConfig","tileConfiguration","oTileConfig","TILE_PROPERTIES","_getAppId","sAppId","semanticObject","action","semanticAction","_getTargetUrl","sTargetURL","evaluationId","_isSmartBusinessTile","oVisualization","vizType","startsWith","_getAppTitleSubTitle","oApp","oAppTileInfo","bags","sb_tileProperties","texts","title","subtitle","description","_linkDuplicateVizs","aVizs","forEach","oDuplicateViz","filter","oViz","appId","visualization","id","persConfig","sectionIndex","duplicateApps","_isGUIVisualization","parameters","_isMustIncludeRecommendation","recViz","fioriId","includes","_isVisualizationAlreadyAdded","favoriteVisualizations","some","favViz","AppManager","aRequestQueue","bInsightsSectionPresent","vizDataModified","_oVizCacheData","_favPageVisualizations","componentData","fioriAppData","constructor","super","recommendedUtilInstance","getInstance","Instance","_fetchRequestFromQueue","bForceRefresh","Promise","resolve","getServiceAsync","oSpaceContentService","oPageLoadPromise","oRequestedPage","find","oRequest","pageId","getPage","pageLoadPromise","_fetchDynamicVizs","fetchFavVizs","aFavApps","oDynApp","isCount","isSmartBusinessTile","_getSections","arguments","_this2","oPage","aSections","sections","iRecentAppSectionIndex","findIndex","oSection","_temp2","_temp","_oMoveAppsPromise","moveSection","_fetchMyHomeVizs","_this3","oVizInstantiationService","iSectionIndex","visualizations","iVisualizationIndex","vizConfig","oVizInfo","oldAppId","targetURL","url","leanURL","BGColor","key","isFav","isSection","icon","icons","indicatorDataSource","path","contentProviderId","instantiateVisualization","setActive","vizInstance","sectionTitle","sectionId","visualizationIndex","isDefaultSection","isPresetSection","preset","_copyDynamicVizs","_this4","aDynamicVizs","all","map","oDynViz","addVisualization","vizId","bPreventGrouping","_this5","aMyHomeVizs","aVisibleFavVizs","_filterDuplicateVizs","_addGroupInformation","fetchInsightApps","sSectionTitle","_this6","_temp5","fnFetchInsightsApps","_temp4","insightsSectionIndex","_temp3","last","addSection","sectionProperties","visualizationId","spaceContentService","removeVisualizations","_ref","vizIds","_this7","_temp7","targetSection","_temp6","deleteVisualization","updateVisualizations","_ref2","sourceSectionIndex","sourceVisualizationIndex","oVisualizationData","updateVisualization","createInsightSection","_exit","_this8","_temp9","_result","_temp8","iMyInsightSectionIndex","_this8$addSection","visible","mProperties","getSectionVisualizations","forceRefresh","_this9","aApps","apps","addBookMark","bookmark","moveConfig","_this10","oBookmarkService","getContentNodes","aContentNodes","oMyHomeSpace","contentNode","children","addBookmark","moveVisualization","getVisualization","_this11","sectionVisualizations","sectionVisualization","_this12","targetSectionIndex","targetVisualizationIndex","aVisibleFavoriteVizs","bReturnDuplicateVizs","iVizIndex","iFirstIndex","oTempApp","aFavoriteVizs","aRecentVizs","oExistingSection","index","badge","toString","oPagesService","iPageIndex","getPageIndex","_getFeatureToggles","sFeatureToggleUrl","FEATURE_TOGGLE_KEYS","Object","keys","toggleFilter","sToggleKey","join","GetJSON","_HttpHelper$GetJSON","oResponse","isFeatureEnabled","sToggleId","_this13","aFeatureToggles","oToggle","oFeatureToggle","ToggleId","State","isURLParamEnabled","param","urlParams","URLSearchParams","window","location","search","get","toLowerCase","_getRecommenedFioriIds","_exit2","_this14","_temp11","_result3","recommendedFioriIds","_temp10","_HttpHelper$GetJSON2","response","app_id","_Promise$resolve","_getCatalogApps","_exit3","_this15","_temp14","_result4","catalogAppData","_temp13","SearchableContent","getApps","includeAppsWithoutVisualizations","_this15$catalogAppDat","_temp12","isAddCardToInsightsHidden","page","component","settings","tableSettings","addCardtoInsightsHidden","_checkValidManifests","manifest","dataSources","hasRequiredDataSource","mainService","pages","Array","isArray","_isListReport","pageValues","_getOdataModel","oManifest","datasource","annotationUrls","annotations","name","uri","Boolean","oDataModel","annotationURI","loadAnnotationsJoined","attachMetadataLoaded","attachMetadataFailed","_getEntitySet","entitySet","loadI18n","manifestUrl","_this16","_temp16","_RBManifestMap","absoluteUrl","i18nBundleUrl","URL","href","_temp15","create","bundleUrl","async","terminologies","oResourceBundle","getI18nValueOrDefaultString","sValue","oRB","sPath","substring","getText","_getAnalyticalCardManifest","stringify","getProcessedManifest","metaModel","manifestObj","parentApp","versionInfo","_this17","_temp19","_createCardManifest","cardInput","suppressRowNavigation","mainEntitySetName","mainEntitySet","getODataEntitySet","lineItemDetails","getLineItemDetails","lineItem","entitySetName","entityType","getODataEntityType","lrSettings","hasMandatoryProperties","property","parameterDetails","_getParametersisedEntitySetParams","paramEntitySet","_getManifestCardData","columns","headerInfo","cardTitle","TypeNamePlural","_temp18","i18n","appTitle","_temp17","i18nResourceBundle","fetchMetaModels","validManifests","_this18","odataPromises","_this18$_getOdataMode","getMetaModel","combineManifestsAndMetaModels","aMetaModel","reduce","combined","processManifests","combinedDetails","aCSTR","_this19","item","resolutionResult","ui5ComponentName","processAppList","aList","aAppComponentIds","aComponent","list","oComponent","oData","matchingData","entry","_getCardManifest","_this20","getFioriAppData","_ref3","aCatalog","aFioriData","load","_VersionInfo$load","flat","processedList","fetchManifests","manifests","cards","card","appIdList","fioriData","catalogData","appPromises","_exit4","aApp","_temp20","catalog","applicationDependencies","fetch","json","_response$json","_url$manifest","_result6","results","_removeDuplicateCards","aCards","oCardDict","aResult","oCard","sCardTitle","descriptorContent","header","getRecommenedCards","_this21","aAppIds","aManifests","aRecManifests","slice","aRecommendedCards","rec","getRecommendedVisualizations","_this22","_temp23","_recommendedVisualizations","_temp22","_temp21","finalRecommendations","mustIncludeRecommendations","_getVisualizationsByFioriIds","_ref4","recommendedVisualizations","concat","_getInboundApps","service","_oAdapter","_aInbounds","_this23","_temp25","_temp24","inbounds","oItem","signature","defaultValue","componentId","semanticData","combinedData","fioriIds","_this24","visitedVisualizations","Map","_ref5","catalogApps","authorizedApps","inbound","app","matchingVizualizations","catalogApp","guiVisualizations","matchingVizualization","nonGuiVisualizations","recommendedVisualization","has","set","_getAllFavPageApps","shouldReload","_exit5","_this25","_temp27","_result7","_temp26","loadedPages","pageIDs","pageIds","shouldLoadMissingApps","every","_this25$_favPageVisua","_loadAllPageVisualizations","_this25$_loadAllPageV","_this25$_favPageVisua2","shouldFetchDistinctApps","getBgColor","favPageVisualizations","getPages","pageData","aPages","section","oVizApp"],"sources":["AppManager.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport VersionInfo from \"sap/ui/VersionInfo\";\nimport BaseObject from \"sap/ui/base/Object\";\nimport ODataMetaModel, { Property } from \"sap/ui/model/odata/ODataMetaModel\";\nimport ODataModelV2 from \"sap/ui/model/odata/v2/ODataModel\";\nimport Config from \"sap/ushell/Config\";\nimport Container from \"sap/ushell/Container\";\nimport Bookmark from \"sap/ushell/services/BookmarkV2\";\nimport ClientSideTargetResolution from \"sap/ushell/services/ClientSideTargetResolution\";\nimport SearchableContent, { AppData } from \"sap/ushell/services/SearchableContent\";\nimport SpaceContent from \"sap/ushell/services/SpaceContent\";\nimport VisualizationInstantiation from \"sap/ushell/services/VisualizationInstantiation\";\nimport {\n\tICustomVisualization,\n\tICustomVizInstance,\n\tIParseSBParameters,\n\tISection,\n\tISectionAndVisualization,\n\tIVisualization\n} from \"../interface/AppsInterface\";\nimport {\n\tIAppInfo,\n\tIAppInfoData,\n\tIAppManifest,\n\tICard,\n\tICardDetails,\n\tICardManifest,\n\tIEntitySet,\n\tIEntityType,\n\tIHeaderInfo,\n\tIPageType,\n\tIVersionInfo,\n\tPageRecord\n} from \"../interface/CardsInterface\";\nimport { IPage } from \"../interface/PageSpaceInterface\";\nimport { AnalyticalCardSkeleton } from \"./AnalyticalCardSkeleton\";\nimport {\n\tCOLUMN_LENGTH,\n\tDEFAULT_BG_COLOR,\n\tFALLBACK_ICON,\n\tFEATURE_TOGGLES,\n\tFEATURE_TOGGLE_SRVC_URL,\n\tMYHOME_PAGE_ID,\n\tMYHOME_SPACE_ID,\n\tMYINSIGHT_SECTION_ID,\n\tRECOMMENDATION_SRVC_URL,\n\tRECOMMENDED_CARD_LIMIT\n} from \"./Constants\";\nimport { createBookMarkData, getLeanURL } from \"./DataFormatUtils\";\nimport HttpHelper from \"./HttpHelper\";\nimport RecommendedCardUtil from \"./RecommendedCardUtil\";\n\nconst CONSTANTS = {\n\tMUST_INCLUDE_RECOMMEDED_APPS: [\"F0862\", \"F1823\"] //My Inbox and Manage Timesheet apps\n};\n\ninterface IFeatureToggles {\n\tTASK_ACTIONS: string;\n}\n\ninterface ICombinedManifestDetails {\n\tmanifest: IValidManifest;\n\tmetaModel: ODataMetaModel;\n}\n\ninterface IValidManifest {\n\turl: string;\n\tmanifest: IAppManifest;\n}\n\nconst _parseSBParameters = (oParam: object | string | undefined): IParseSBParameters | undefined => {\n\tlet oParsedParams: IParseSBParameters | undefined = {};\n\tif (oParam) {\n\t\tif (typeof oParam === \"object\") {\n\t\t\toParsedParams = oParam;\n\t\t} else {\n\t\t\ttry {\n\t\t\t\toParsedParams = JSON.parse(oParam) as object;\n\t\t\t} catch (oError) {\n\t\t\t\tLog.error(oError instanceof Error ? oError.message : String(oError));\n\t\t\t\toParsedParams = undefined;\n\t\t\t}\n\t\t}\n\t}\n\treturn oParsedParams;\n};\n\nconst _getTileProperties = (vizConfigFLP?: IVisualization): IParseSBParameters | undefined => {\n\tlet oTileProperties: IParseSBParameters | undefined = {};\n\tif (vizConfigFLP?._instantiationData?.chip?.configuration) {\n\t\tconst oConfig: IParseSBParameters | undefined = _parseSBParameters(vizConfigFLP._instantiationData.chip.configuration);\n\t\tif (oConfig?.tileConfiguration) {\n\t\t\tconst oTileConfig: IParseSBParameters | undefined = _parseSBParameters(oConfig.tileConfiguration);\n\t\t\tif (oTileConfig) {\n\t\t\t\toTileProperties = _parseSBParameters(oTileConfig.TILE_PROPERTIES);\n\t\t\t}\n\t\t}\n\t}\n\treturn oTileProperties;\n};\n\nconst _getAppId = (vizConfigFLP: IVisualization | undefined): string => {\n\tlet sAppId = \"\";\n\tlet oTileProperties: IParseSBParameters | undefined = {};\n\tif (vizConfigFLP?.target?.semanticObject && vizConfigFLP?.target?.action) {\n\t\tsAppId = `#${vizConfigFLP.target.semanticObject}-${vizConfigFLP.target.action}`;\n\t} else if (vizConfigFLP?._instantiationData?.chip?.configuration) {\n\t\toTileProperties = _getTileProperties(vizConfigFLP);\n\t\tif (oTileProperties?.semanticObject && oTileProperties?.semanticAction) {\n\t\t\tsAppId = `#${oTileProperties?.semanticObject}-${oTileProperties?.semanticAction}`;\n\t\t}\n\t}\n\treturn sAppId;\n};\n\nconst _getTargetUrl = (vizConfigFLP: IVisualization | undefined) => {\n\tlet sTargetURL = _getAppId(vizConfigFLP) || \"\";\n\tconst oTileProperties = _getTileProperties(vizConfigFLP);\n\tif (oTileProperties?.evaluationId) {\n\t\tsTargetURL += \"?EvaluationId=\" + oTileProperties.evaluationId;\n\t}\n\treturn sTargetURL;\n};\n\nconst _isSmartBusinessTile = (oVisualization: IVisualization): boolean => {\n\treturn oVisualization.vizType?.startsWith(\"X-SAP-UI2-CHIP:SSB\");\n};\n\n// get App Title in case of value not present at root level\nconst _getAppTitleSubTitle = (oApp: IVisualization, vizConfigFLP: IVisualization): { title: string; subtitle: string } => {\n\tconst oAppTileInfo = vizConfigFLP?._instantiationData?.chip?.bags?.sb_tileProperties?.texts;\n\treturn {\n\t\ttitle: oApp.title ? oApp.title : oAppTileInfo?.title || \"\",\n\t\tsubtitle: oApp.subtitle ? oApp.subtitle : oAppTileInfo?.description || \"\"\n\t};\n};\n\n/**\n * Link Duplicate Visualizations to a single visualization\n *\n * @param {object[]} aVizs - array of visualizations\n * @returns {object[]} arry of visualizations after linking duplicate visualizations\n * @private\n */\nconst _linkDuplicateVizs = (aVizs: ICustomVisualization[]) => {\n\taVizs.forEach((oDuplicateViz) => {\n\t\taVizs\n\t\t\t.filter(\n\t\t\t\t(oViz) =>\n\t\t\t\t\toViz.appId === oDuplicateViz.appId &&\n\t\t\t\t\toViz?.visualization?.id !== oDuplicateViz?.visualization?.id &&\n\t\t\t\t\toViz.persConfig?.sectionIndex === oDuplicateViz.persConfig?.sectionIndex\n\t\t\t)\n\t\t\t.forEach((oViz) => {\n\t\t\t\toViz?.persConfig?.duplicateApps?.push(oDuplicateViz);\n\t\t\t});\n\t});\n\n\treturn aVizs;\n};\n\nconst _isGUIVisualization = (visualization: AppData) => {\n\treturn visualization?.target?.parameters?.[\"sap-ui-tech-hint\"]?.value?.value === \"GUI\";\n};\n\nconst _isMustIncludeRecommendation = (recViz: ICustomVisualization) => {\n\treturn recViz.fioriId && CONSTANTS.MUST_INCLUDE_RECOMMEDED_APPS.includes(recViz.fioriId);\n};\n\nconst _isVisualizationAlreadyAdded = (visualization: ICustomVisualization, favoriteVisualizations: ICustomVisualization[]) => {\n\treturn !favoriteVisualizations.some(\n\t\t(favViz) =>\n\t\t\tfavViz.visualization?.target?.semanticObject === visualization.visualization?.target?.semanticObject &&\n\t\t\tfavViz.visualization?.target?.action === visualization.visualization?.target?.action\n\t);\n};\n\n/**\n *\n * @class Provides the AppManager Class used for fetch and process user apps.\n *\n * @extends sap.ui.BaseObject\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121.0\n *\n * @private\n * @experimental Since 1.121\n * @hidden\n *\n * @alias sap.cux.home.util.AppManager\n */\n\nexport default class AppManager extends BaseObject {\n\tprivate aRequestQueue: { pageId: string; pageLoadPromise: Promise<IPage> }[] = [];\n\tprivate _oMoveAppsPromise!: Promise<void>;\n\tprivate bInsightsSectionPresent: boolean = false;\n\tpublic insightsSectionIndex!: number;\n\tstatic Instance: AppManager;\n\tprivate recommendedFioriIds!: string[];\n\tprivate versionInfo!: IVersionInfo;\n\tprivate _RBManifestMap!: Record<string, ResourceBundle>;\n\tprivate _recommendedVisualizations!: ICustomVisualization[];\n\tprivate vizDataModified: boolean = false;\n\tprivate _oVizCacheData: { [key: string]: ICustomVizInstance } = {};\n\tprivate _favPageVisualizations: ICustomVisualization[] = [];\n\tprivate componentData: IAppInfo = {};\n\tprivate fioriAppData: IAppInfo = {};\n\tprivate recommendedUtilInstance: RecommendedCardUtil;\n\tprivate catalogAppData!: Promise<AppData[]> | undefined;\n\n\tprivate constructor() {\n\t\tsuper();\n\t\tthis.recommendedUtilInstance = RecommendedCardUtil.getInstance();\n\t}\n\n\tstatic getInstance() {\n\t\tif (!AppManager.Instance) {\n\t\t\tAppManager.Instance = new AppManager();\n\t\t}\n\t\treturn AppManager.Instance;\n\t}\n\t/**\n\t * Returns page load promise from the request queue if it exists, adds it to the queue if it doesn't\n\t *\n\t * @param {string} sPageId - page id\n\t * @param {boolean} bForceRefresh - force reload of data if true\n\t * @returns {Promise} - returns a promise which resolves with the requested page data\n\t * @private\n\t */\n\tprivate async _fetchRequestFromQueue(bForceRefresh: boolean): Promise<IPage> {\n\t\tconst oSpaceContentService = await Container.getServiceAsync<SpaceContent>(\"SpaceContent\");\n\t\tlet oPageLoadPromise: Promise<IPage>;\n\t\tthis.aRequestQueue = this.aRequestQueue || [];\n\n\t\t//Check if request already exists in the queue, if not add it\n\t\tconst oRequestedPage = this.aRequestQueue.find((oRequest) => oRequest.pageId === MYHOME_PAGE_ID);\n\t\tif (!oRequestedPage || bForceRefresh === true || this.vizDataModified === true) {\n\t\t\tthis.vizDataModified = false;\n\t\t\toPageLoadPromise = oSpaceContentService.getPage(MYHOME_PAGE_ID);\n\t\t\tif (oRequestedPage) {\n\t\t\t\toRequestedPage.pageLoadPromise = oPageLoadPromise;\n\t\t\t} else {\n\t\t\t\tthis.aRequestQueue.push({\n\t\t\t\t\tpageId: MYHOME_PAGE_ID,\n\t\t\t\t\tpageLoadPromise: oPageLoadPromise\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\toPageLoadPromise = oRequestedPage.pageLoadPromise;\n\t\t}\n\n\t\treturn oPageLoadPromise;\n\t}\n\t/**\n\t * Returns all dynamic visualizations present in MyHome page\n\t *\n\t * @param {boolean} bForceRefresh - force reload of visualizations data\n\t * @returns {Promise} - resolves to array of all dynamic visualizations in MyHome page\n\t * @private\n\t */\n\tprivate _fetchDynamicVizs(bForceRefresh: boolean) {\n\t\treturn this.fetchFavVizs(bForceRefresh, true).then((aFavApps: ICustomVisualization[]) =>\n\t\t\taFavApps.filter((oDynApp) => oDynApp.isCount || oDynApp.isSmartBusinessTile)\n\t\t);\n\t}\n\t/**\n\t * Returns all the sections that are available in the MyHome page\n\t *\n\t * @param {boolean} bForceRefresh - force reload of visualizations data\n\t * @returns {Promise} - resolves to array of all sections available in MyHome page\n\t * @private\n\t */\n\tpublic async _getSections(bForceRefresh: boolean = false): Promise<ISection[]> {\n\t\tconst oPage: IPage = await this._fetchRequestFromQueue(bForceRefresh);\n\t\tconst aSections = (oPage && oPage.sections) || [],\n\t\t\tiRecentAppSectionIndex: number = aSections.findIndex((oSection) => oSection.default);\n\t\tif (iRecentAppSectionIndex > 0) {\n\t\t\tif (this._oMoveAppsPromise !== undefined) {\n\t\t\t\tthis._oMoveAppsPromise = this.moveSection(iRecentAppSectionIndex, 0);\n\t\t\t\tawait this._oMoveAppsPromise;\n\t\t\t}\n\t\t\treturn this._getSections(true);\n\t\t} else {\n\t\t\treturn aSections;\n\t\t}\n\t}\n\t/**\n\t * Models and returns all visualizations available in MyHome page\n\t *\n\t * @param {bool} bForceRefresh - force reload of visualizations data\n\t * @returns {Promise} - resolves to array of all apps available in MyHome page\n\t * @private\n\t */\n\tprivate async _fetchMyHomeVizs(bForceRefresh: boolean): Promise<ICustomVisualization[]> {\n\t\tconst aVizs: ICustomVisualization[] = [];\n\t\tthis._oVizCacheData = this._oVizCacheData || {};\n\t\tconst aSections = await this._getSections(bForceRefresh);\n\t\tconst oVizInstantiationService = await Container.getServiceAsync<VisualizationInstantiation>(\"VisualizationInstantiation\");\n\t\taSections.forEach((oSection: ISection, iSectionIndex: number) => {\n\t\t\toSection?.visualizations?.forEach((oVisualization: IVisualization, iVisualizationIndex: number) => {\n\t\t\t\tconst vizConfig = oVisualization.vizConfig,\n\t\t\t\t\toVizInfo = vizConfig?.[\"sap.app\"] || ({ title: \"?\" } as IVisualization),\n\t\t\t\t\toViz = {} as ICustomVisualization;\n\n\t\t\t\toViz.oldAppId = _getAppId(vizConfig?.[\"sap.flp\"]);\n\t\t\t\toViz.appId = oVisualization?.targetURL; // Using targetURL as unique identifier as in certian scenario vizConfig can be empty.\n\t\t\t\toViz.url = oVisualization?.targetURL;\n\t\t\t\tif (!oViz.url && _isSmartBusinessTile(oVisualization)) {\n\t\t\t\t\toViz.url = _getTargetUrl(vizConfig?.[\"sap.flp\"]);\n\t\t\t\t}\n\t\t\t\toViz.leanURL = getLeanURL(oViz.url);\n\t\t\t\toViz.title = oVisualization?.title || _getAppTitleSubTitle(oVizInfo, oVisualization)?.title;\n\t\t\t\toViz.subtitle = oVisualization.subtitle || _getAppTitleSubTitle(oVizInfo, oVisualization).subtitle;\n\t\t\t\toViz.BGColor = DEFAULT_BG_COLOR().key;\n\t\t\t\toViz.isFav = true;\n\t\t\t\toViz.isSection = false;\n\t\t\t\toViz.icon = vizConfig?.[\"sap.ui\"]?.icons?.icon || FALLBACK_ICON;\n\t\t\t\tif (oVisualization?.indicatorDataSource) {\n\t\t\t\t\toViz.isCount = true;\n\t\t\t\t\toViz.indicatorDataSource = oVisualization.indicatorDataSource.path;\n\t\t\t\t\toViz.contentProviderId = oVisualization.contentProviderId;\n\t\t\t\t}\n\t\t\t\toViz.isSmartBusinessTile = _isSmartBusinessTile(oVisualization);\n\t\t\t\tif (oViz.isSmartBusinessTile) {\n\t\t\t\t\tif (!this._oVizCacheData[oViz.appId]) {\n\t\t\t\t\t\tthis._oVizCacheData[oViz.appId] = oVizInstantiationService.instantiateVisualization(\n\t\t\t\t\t\t\toVisualization\n\t\t\t\t\t\t) as ICustomVizInstance;\n\t\t\t\t\t\tthis._oVizCacheData[oViz.appId].setActive(true);\n\t\t\t\t\t}\n\t\t\t\t\toViz.vizInstance = this._oVizCacheData[oViz.appId];\n\t\t\t\t}\n\t\t\t\t// Add FLP Personalization Config\n\t\t\t\toViz.persConfig = {\n\t\t\t\t\tpageId: MYHOME_PAGE_ID,\n\t\t\t\t\tsectionTitle: oSection.title,\n\t\t\t\t\tsectionId: oSection.id,\n\t\t\t\t\tsectionIndex: iSectionIndex,\n\t\t\t\t\tvisualizationIndex: iVisualizationIndex,\n\t\t\t\t\tisDefaultSection: oSection.default,\n\t\t\t\t\tisPresetSection: oSection.preset,\n\t\t\t\t\tduplicateApps: []\n\t\t\t\t};\n\t\t\t\toViz.visualization = oVisualization;\n\t\t\t\t// Title and Subtitle in visualization are required in Insights Dialog.\n\t\t\t\toViz.visualization.title = oViz.title;\n\t\t\t\toViz.visualization.subtitle = oViz.subtitle;\n\t\t\t\taVizs.push(oViz);\n\t\t\t});\n\t\t});\n\t\treturn aVizs;\n\t}\n\t/**\n\t * Copies all Dynamic visualizations to Insights section\n\t *\n\t * @returns {Promise} - resolves to void and copy all the visualizations\n\t * @private\n\t */\n\tprivate async _copyDynamicVizs() {\n\t\tconst aDynamicVizs: ICustomVisualization[] = await this._fetchDynamicVizs(true);\n\t\treturn Promise.all(\n\t\t\taDynamicVizs.map((oDynViz: ICustomVisualization) => {\n\t\t\t\treturn this.addVisualization(oDynViz.visualization!.vizId, MYINSIGHT_SECTION_ID);\n\t\t\t})\n\t\t);\n\t}\n\t/**\n\t * Returns a list of all favorite vizualizations in MyHome page\n\t *\n\t * @param {boolean} bForceRefresh - force reload of vizualizations data\n\t * @param {boolean} bPreventGrouping - prevent vizualizations grouping\n\t * @returns {Promise} - resolves to array of favourite vizualizations in MyHome page\n\t * @private\n\t */\n\tpublic async fetchFavVizs(bForceRefresh: boolean, bPreventGrouping?: boolean): Promise<ISectionAndVisualization[]> {\n\t\tconst aMyHomeVizs = await this._fetchMyHomeVizs(bForceRefresh);\n\t\tconst aVisibleFavVizs = aMyHomeVizs.filter(\n\t\t\t(oViz) => oViz.persConfig && oViz.persConfig.sectionId !== MYINSIGHT_SECTION_ID && oViz.url && oViz.title\n\t\t);\n\n\t\tif (bPreventGrouping) {\n\t\t\treturn this._filterDuplicateVizs(_linkDuplicateVizs(aVisibleFavVizs), false);\n\t\t} else {\n\t\t\treturn this._addGroupInformation(aVisibleFavVizs);\n\t\t}\n\t}\n\t/**\n\t * Returns all vizualizations present in the Insights Section\n\t *\n\t * @param {boolean} bForceRefresh - force reload insights vizualizations data\n\t * @param {string} sSectionTitle - optional, title of insights section to be used while creating insights section\n\t * @returns {Promise} - resolves to an array with all vizualizations in Insights section\n\t */\n\tpublic async fetchInsightApps(bForceRefresh: boolean, sSectionTitle: string) {\n\t\tconst fnFetchInsightsApps = async () => {\n\t\t\tconst aVizs = await this._fetchMyHomeVizs(bForceRefresh);\n\t\t\treturn aVizs.filter((oViz) => oViz.persConfig?.sectionId === MYINSIGHT_SECTION_ID && oViz.url && oViz.title);\n\t\t};\n\n\t\tif (!this.bInsightsSectionPresent) {\n\t\t\tconst aSections: ISection[] = await this._getSections(bForceRefresh);\n\t\t\tthis.insightsSectionIndex = aSections.findIndex(function (oSection) {\n\t\t\t\treturn oSection.id === MYINSIGHT_SECTION_ID;\n\t\t\t});\n\n\t\t\tif (\n\t\t\t\tthis.insightsSectionIndex === -1 &&\n\t\t\t\t(Config.last(\"/core/shell/enablePersonalization\") || Config.last(\"/core/catalog/enabled\")) &&\n\t\t\t\tthis.bInsightsSectionPresent === false\n\t\t\t) {\n\t\t\t\tthis.bInsightsSectionPresent = true;\n\t\t\t\tawait this.addSection({\n\t\t\t\t\tsectionIndex: aSections?.length,\n\t\t\t\t\tsectionProperties: {\n\t\t\t\t\t\tid: MYINSIGHT_SECTION_ID,\n\t\t\t\t\t\ttitle: sSectionTitle\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tawait this._copyDynamicVizs();\n\t\t\t} else {\n\t\t\t\tthis.bInsightsSectionPresent = true;\n\t\t\t}\n\t\t}\n\n\t\treturn await fnFetchInsightsApps();\n\t}\n\n\t/**\n\t * Add visualization to a particular section\n\t *\n\t * @param {string} visualizationId - The id of the visualization to add.\n\t * @param {string} sectionId - The id of the section the visualization should be added to (optional parameter)\n\t * @returns {Promise} resolves to void after adding app to a section\n\t * @private\n\t */\n\tpublic async addVisualization(visualizationId: string, sectionId: string | undefined = undefined): Promise<void> {\n\t\tconst spaceContentService = await Container.getServiceAsync<SpaceContent>(\"SpaceContent\");\n\t\tawait spaceContentService.addVisualization(MYHOME_PAGE_ID, sectionId, visualizationId);\n\t}\n\n\t/**\n\t * @param {object} mProperties - map of properties\n\t * @param {string} mProperties.sectionId - section id from which visualizations should be removed\n\t * @param {object[]} mProperties.appIds - array of url of visualizations that has to be deleted\n\t * @param {boolean} mProperties.ignoreDuplicateApps - if true doesn't remove the duplicate apps, else removes the duplicate apps as well\n\t * @private\n\t * @returns {Promise} resolves after all visualizations are deleted\n\t */\n\tpublic async removeVisualizations({ sectionId, vizIds }: { sectionId: string; vizIds: string[] }) {\n\t\tconst spaceContentService = await Container.getServiceAsync<SpaceContent>(\"SpaceContent\");\n\t\tfor (const vizId of vizIds) {\n\t\t\tconst sections = await this._getSections(true);\n\t\t\tconst sectionIndex = sections.findIndex((oSection) => oSection.id === sectionId);\n\t\t\tconst targetSection = sectionIndex > -1 ? sections[sectionIndex] : null;\n\t\t\tconst visualizationIndex = targetSection?.visualizations?.findIndex((oVisualization) => oVisualization.id === vizId) ?? -1;\n\t\t\tif (visualizationIndex > -1) {\n\t\t\t\tawait spaceContentService.deleteVisualization(MYHOME_PAGE_ID, sectionIndex, visualizationIndex);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {object} mProperties - map of properties\n\t * @param {string} mProperties.pageId - page id from which visualizations should be updated\n\t * @param {object[]} mProperties.sourceSectionIndex - section index in which visualization that has to be updated\n\t * @param {boolean} mProperties.sourceVisualizationIndex - visualization index in the which should be updated\n\t * @param {boolean} mProperties.oVisualizationData - visualization data which will be updated for the vizualisation\n\t * @private\n\t * @returns {Promise} resolves to void\n\t */\n\tpublic async updateVisualizations({\n\t\tpageId,\n\t\tsourceSectionIndex,\n\t\tsourceVisualizationIndex,\n\t\toVisualizationData\n\t}: {\n\t\tpageId: string;\n\t\tsourceSectionIndex: number;\n\t\tsourceVisualizationIndex: number;\n\t\toVisualizationData: { displayFormatHint: string };\n\t}) {\n\t\tconst spaceContentService = await Container.getServiceAsync<SpaceContent>(\"SpaceContent\");\n\t\treturn spaceContentService.updateVisualization(pageId, sourceSectionIndex, sourceVisualizationIndex, oVisualizationData);\n\t}\n\n\t/**\n\t * Create Insight Section if not already present\n\t *\n\t * @param {string} sSectionTitle - optional, section title\n\t * @returns {Promise} - resolves to insight section created\n\t */\n\tpublic async createInsightSection(sSectionTitle: string) {\n\t\tif (!this.bInsightsSectionPresent) {\n\t\t\tconst aSections = await this._getSections();\n\t\t\tconst iMyInsightSectionIndex = aSections.findIndex(function (oSection) {\n\t\t\t\treturn oSection.id === MYINSIGHT_SECTION_ID;\n\t\t\t});\n\n\t\t\t//check if myinsight section exists, if not create one\n\t\t\tif (\n\t\t\t\tiMyInsightSectionIndex === -1 &&\n\t\t\t\t(Config.last(\"/core/shell/enablePersonalization\") || Config.last(\"/core/catalog/enabled\"))\n\t\t\t) {\n\t\t\t\treturn this.addSection({\n\t\t\t\t\tsectionIndex: aSections.length,\n\t\t\t\t\tsectionProperties: {\n\t\t\t\t\t\tid: MYINSIGHT_SECTION_ID,\n\t\t\t\t\t\ttitle: sSectionTitle,\n\t\t\t\t\t\tvisible: true\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Adds a section\n\t *\n\t * @param {object} mProperties - map of properties\n\t * @param {string} mProperties.sectionIndex - section index\n\t * @param {object} mProperties.sectionProperties - section properties\n\t * @returns {Promise} resolves to void and creates the section\n\t * @private\n\t */\n\tpublic async addSection(mProperties: ISection) {\n\t\tconst { sectionIndex, sectionProperties } = mProperties;\n\t\tconst oSpaceContentService = await Container.getServiceAsync<SpaceContent>(\"SpaceContent\");\n\t\tawait oSpaceContentService.addSection(MYHOME_PAGE_ID, sectionIndex, {\n\t\t\t...sectionProperties,\n\t\t\tvisible: true\n\t\t});\n\t}\n\n\t/**\n\t * Returns visualizations for a given section\n\t * @param {string} sectionId - section id\n\t * @param {boolean} [forceRefresh=false] - force reload of data if true\n\t * @returns {Promise} resolves to array of visualizations\n\t * @private\n\t */\n\tpublic async getSectionVisualizations(sectionId?: string, forceRefresh = false): Promise<ICustomVisualization[]> {\n\t\tconst aApps: ISectionAndVisualization[] = await this.fetchFavVizs(forceRefresh);\n\t\tif (sectionId) {\n\t\t\treturn aApps.find((oViz) => oViz.isSection && oViz.id === sectionId)?.apps || [];\n\t\t} else {\n\t\t\treturn aApps.filter((oViz) => !oViz.isSection); //return recently added apps\n\t\t}\n\t}\n\n\t/**\n\t * Adds a bookmark.\n\t * @private\n\t * @param {Object} bookmark - The bookmark data object.\n\t * @returns {Promise<void>} - A Promise that resolves once the bookmark is added.\n\t */\n\tpublic async addBookMark(\n\t\tbookmark: IVisualization,\n\t\tmoveConfig?: {\n\t\t\tsourceSectionIndex: number;\n\t\t\tsourceVisualizationIndex: number;\n\t\t\ttargetSectionIndex: number;\n\t\t\ttargetVisualizationIndex: number;\n\t\t}\n\t) {\n\t\tconst oBookmarkService: Bookmark = await Container.getServiceAsync(\"BookmarkV2\");\n\t\tconst aContentNodes = await oBookmarkService.getContentNodes();\n\t\tconst oMyHomeSpace = aContentNodes.find((contentNode) => contentNode.id === MYHOME_SPACE_ID);\n\t\tconst contentNode = oMyHomeSpace?.children?.find((contentNode) => contentNode.id === MYHOME_PAGE_ID);\n\t\tawait oBookmarkService.addBookmark(createBookMarkData(bookmark), contentNode);\n\t\tif (moveConfig) {\n\t\t\treturn this.moveVisualization(moveConfig);\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Retrieves the visualization with the specified appId within the specified section.\n\t * @param {string} appId - appId of the visualization for.\n\t * @param {string} sectionId - The ID of the section containing the visualization.\n\t * @param {boolean} [forceRefresh=false] - Whether to force a refresh of the section's cache.\n\t * @returns {Promise<object|null>} A promise that resolves with the visualization object if found, or null if not found.\n\t * @private\n\t */\n\tpublic async getVisualization(appId: string, sectionId?: string, forceRefresh = false) {\n\t\tconst sectionVisualizations = await this.getSectionVisualizations(sectionId, forceRefresh);\n\t\treturn sectionVisualizations.find((sectionVisualization) => sectionVisualization.appId === appId);\n\t}\n\n\t/**\n\t * Moves a visualization from source section to target section.\n\t * @param {object} moveConfig - Configuration object containing details for moving the visualization.\n\t * @param {number} moveConfig.sourceSectionIndex - Index of the source section.\n\t * @param {number} moveConfig.sourceVisualizationIndex - Index of the visualization within the source section.\n\t * @param {number} moveConfig.targetSectionIndex - Index of the target section.\n\t * @param {number} moveConfig.targetVisualizationIndex - Index at which the visualization will be placed within the target section.\n\t * @returns {Promise<void>} A promise that resolves to void after the move operation.\n\t * @private\n\t */\n\tpublic async moveVisualization(moveConfig: {\n\t\tsourceSectionIndex: number;\n\t\tsourceVisualizationIndex: number;\n\t\ttargetSectionIndex: number;\n\t\ttargetVisualizationIndex: number;\n\t}) {\n\t\tconst spaceContentService = await Container.getServiceAsync<SpaceContent>(\"SpaceContent\");\n\t\tthis.vizDataModified = true;\n\t\treturn spaceContentService.moveVisualization(\n\t\t\tMYHOME_PAGE_ID,\n\t\t\tmoveConfig.sourceSectionIndex,\n\t\t\tmoveConfig.sourceVisualizationIndex,\n\t\t\tmoveConfig.targetSectionIndex,\n\t\t\tmoveConfig.targetVisualizationIndex\n\t\t);\n\t}\n\n\t/**\n\t * Filters out duplicate visualizations from a list of all visualizations\n\t *\n\t * @param {object[]} aVisibleFavoriteVizs - array containing list of all visualizations\n\t * @param {boolean} bReturnDuplicateVizs - flag when set to true, returns only the duplicate apps\n\t * @returns {object[]} filtered array of vizualisations\n\t * @private\n\t */\n\tpublic _filterDuplicateVizs(aVisibleFavoriteVizs: ICustomVisualization[], bReturnDuplicateVizs: boolean) {\n\t\treturn aVisibleFavoriteVizs.filter((oViz, iVizIndex, aVizs) => {\n\t\t\tconst iFirstIndex = aVizs.findIndex((oTempApp) => oTempApp.appId === oViz.appId);\n\t\t\treturn bReturnDuplicateVizs ? iFirstIndex !== iVizIndex : iFirstIndex === iVizIndex;\n\t\t});\n\t}\n\n\t/**\n\t * Add Grouping Information to visualizations list, and return concatenated list.\n\t *\n\t * @param {object[]} aFavoriteVizs - list of all favorite visualizations\n\t * @returns {object[]} - concatenated list contaning grouping information as well\n\t * @private\n\t */\n\tprivate _addGroupInformation(aFavoriteVizs: ICustomVisualization[]) {\n\t\tconst aRecentVizs: ICustomVisualization[] = [],\n\t\t\taSections: ISection[] = [];\n\t\tlet oExistingSection: ISection | undefined;\n\n\t\t_linkDuplicateVizs(aFavoriteVizs).forEach((oViz) => {\n\t\t\tif (oViz.persConfig?.isDefaultSection) {\n\t\t\t\taRecentVizs.push(oViz);\n\t\t\t} else {\n\t\t\t\toExistingSection = aSections.find((oSection) => oSection.isSection && oSection.id === oViz.persConfig?.sectionId);\n\n\t\t\t\tif (!oExistingSection) {\n\t\t\t\t\taSections.push({\n\t\t\t\t\t\tid: oViz.persConfig?.sectionId,\n\t\t\t\t\t\tindex: oViz.persConfig?.sectionIndex,\n\t\t\t\t\t\ttitle: oViz.persConfig?.sectionTitle || \"\",\n\t\t\t\t\t\tbadge: \"1\",\n\t\t\t\t\t\tBGColor: DEFAULT_BG_COLOR().key,\n\t\t\t\t\t\ticon: \"sap-icon://folder-full\",\n\t\t\t\t\t\tisSection: true,\n\t\t\t\t\t\tisPresetSection: oViz.persConfig?.isPresetSection,\n\t\t\t\t\t\tapps: [oViz]\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\toExistingSection.apps?.push(oViz);\n\t\t\t\t\toExistingSection.badge = oExistingSection.apps?.length.toString();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t//filter out duplicate apps only from recent apps list\n\t\treturn [...aSections, ...this._filterDuplicateVizs(aRecentVizs, false)];\n\t}\n\n\t/**\n\t * Move a section within a page\n\t *\n\t * @param {number} sourceSectionIndex - source index (previous index of the section in the page before move)\n\t * @param {number} targetSectionIndex - target index (desired index of the section in the page after move)\n\t * @returns {Promise} resolves to void  and moves the section to desired index within the page\n\t * @private\n\t */\n\tpublic async moveSection(sourceSectionIndex: number, targetSectionIndex: number): Promise<void> {\n\t\treturn Container.getServiceAsync(\"Pages\").then(function (oPagesService: {\n\t\t\tgetPageIndex: (id: string) => number;\n\t\t\tmoveSection: (index: number, sourceIndex: number, targetIndex: number) => void;\n\t\t}) {\n\t\t\tconst iPageIndex: number = oPagesService.getPageIndex(MYHOME_PAGE_ID);\n\t\t\treturn oPagesService.moveSection(iPageIndex, sourceSectionIndex, targetSectionIndex);\n\t\t} as () => void);\n\t}\n\n\t/**\n\t * Returns array of all feature toggles\n\t *\n\t * @returns {object[]} - returns array of all feature toggles.\n\t */\n\tprivate async _getFeatureToggles() {\n\t\tlet sFeatureToggleUrl = FEATURE_TOGGLE_SRVC_URL + \"?$filter=\";\n\t\tconst FEATURE_TOGGLE_KEYS = Object.keys(FEATURE_TOGGLES);\n\t\tconst toggleFilter = FEATURE_TOGGLE_KEYS.map((sToggleKey) => {\n\t\t\treturn \"ToggleId eq '\" + FEATURE_TOGGLES[sToggleKey as keyof IFeatureToggles] + \"'\";\n\t\t}).join(\" or \");\n\t\tsFeatureToggleUrl = sFeatureToggleUrl + \"(\" + toggleFilter + \")\";\n\t\tconst oResponse = (await HttpHelper.GetJSON(sFeatureToggleUrl)) as {\n\t\t\terror: { message: string };\n\t\t\tvalue: Array<{ ToggleId: string; State: string }>;\n\t\t};\n\t\tif (oResponse?.error) {\n\t\t\tthrow new Error(oResponse.error.message);\n\t\t}\n\t\treturn oResponse?.value || [];\n\t}\n\n\t/**\n\t * Checks if feature is enabled or not.\n\t *\n\t * @param {string} sToggleId - feature toggle id\n\t * @returns {boolean} - returns true if feature is enabled.\n\t */\n\tpublic async isFeatureEnabled(sToggleId: string) {\n\t\ttry {\n\t\t\tconst aFeatureToggles = await this._getFeatureToggles();\n\t\t\tconst oToggle = aFeatureToggles.find((oFeatureToggle) => {\n\t\t\t\treturn oFeatureToggle.ToggleId === sToggleId;\n\t\t\t});\n\t\t\treturn !oToggle || oToggle.State === \"\" ? false : true;\n\t\t} catch (error) {\n\t\t\tLog.error(\"Unable to load feature toggles: \" + (error as Error).message);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if a specific URL parameter is enabled (set to \"true\").\n\t *\n\t * @param {string} param - The name of the URL parameter to check.\n\t * @returns {boolean} `true` if the URL parameter exists and is set to \"true\" (case-insensitive), otherwise `false`.\n\t */\n\tpublic isURLParamEnabled(param: string): boolean {\n\t\tconst urlParams = new URLSearchParams(window.location.search);\n\t\treturn urlParams?.get(param)?.toLowerCase() === \"true\" || false;\n\t}\n\n\t/**\n\t * Fetch Recommended Fiori IDs\n\t *\n\t * @returns {Promise} resolves to array of recommended fiori ids\n\t * @private\n\t */\n\tprivate async _getRecommenedFioriIds(bForceRefresh: boolean = false): Promise<string[]> {\n\t\tif (!this.recommendedFioriIds || bForceRefresh) {\n\t\t\ttry {\n\t\t\t\tconst response = (await HttpHelper.GetJSON(RECOMMENDATION_SRVC_URL)) as {\n\t\t\t\t\terror: { message: string };\n\t\t\t\t\tvalue: Array<{ app_id: string }>;\n\t\t\t\t};\n\t\t\t\tthis.recommendedFioriIds =\n\t\t\t\t\tresponse?.value?.map((oApp) => {\n\t\t\t\t\t\treturn oApp.app_id;\n\t\t\t\t\t}) || [];\n\t\t\t} catch (error) {\n\t\t\t\tLog.error(\"Unable to load recommendations: \" + (error as Error).message);\n\t\t\t\treturn Promise.resolve([]);\n\t\t\t}\n\t\t}\n\t\treturn this.recommendedFioriIds;\n\t}\n\n\t/**\n\t * Fetch Catalog Apps\n\t *\n\t * @returns {Promise} resolves to array of Catalog Apps\n\t * @private\n\t */\n\tpublic async _getCatalogApps() {\n\t\tif (!this.catalogAppData) {\n\t\t\ttry {\n\t\t\t\tconst SearchableContent = await Container.getServiceAsync<SearchableContent>(\"SearchableContent\");\n\t\t\t\tthis.catalogAppData = SearchableContent.getApps({ includeAppsWithoutVisualizations: false });\n\t\t\t\treturn this.catalogAppData;\n\t\t\t} catch (error) {\n\t\t\t\tthis.catalogAppData = undefined;\n\t\t\t\tLog.error(error instanceof Error ? \"Error while fetching catalog apps:\" + error.message : String(error));\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(this.catalogAppData);\n\t}\n\n\t/**\n\t * Checks whether page settings contains addCardtoInsightsHidden\n\t * @param {object} page - page object\n\t * @returns {boolean} returns boolean\n\t * @private\n\t */\n\tprivate isAddCardToInsightsHidden(page?: IPageType) {\n\t\treturn page?.component?.settings?.tableSettings?.addCardtoInsightsHidden;\n\t}\n\n\t/**\n\t * check Valid Manifests\n\t *\n\t * @returns {boolean} returns boolean\n\t * @private\n\t */\n\n\tprivate _checkValidManifests(manifest: IAppManifest): boolean {\n\t\tconst dataSources = manifest[\"sap.app\"]?.dataSources;\n\n\t\t// Ensure dataSources has the correct structure for `mainService`\n\t\tconst hasRequiredDataSource = manifest[\"sap.ui.generic.app\"] && dataSources?.mainService;\n\n\t\tif (!hasRequiredDataSource) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst pages = manifest[\"sap.ui.generic.app\"]?.pages;\n\t\t// if its not list report component or if listreport page settings has\n\t\t// isAddCardToInsightsHidden as true, then do not recommend the card\n\t\tif (Array.isArray(pages)) {\n\t\t\treturn this.recommendedUtilInstance._isListReport(pages[0]) && !this.isAddCardToInsightsHidden(pages[0]);\n\t\t}\n\n\t\tconst pageValues = Object.values(pages as PageRecord);\n\t\tif (pageValues.length > 0) {\n\t\t\treturn pageValues.some((page) => {\n\t\t\t\treturn (\n\t\t\t\t\ttypeof page === \"object\" && this.recommendedUtilInstance._isListReport(page) && !this.isAddCardToInsightsHidden(page)\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get OData Model\n\t *\n\t * @param {object} manifest - manifest object\n\t * @returns {ODataModelV2} returns OData Model\n\t * @private\n\t */\n\tprivate _getOdataModel(oManifest: IAppManifest): Promise<ODataModelV2> {\n\t\treturn new Promise(function (resolve) {\n\t\t\tconst datasource = oManifest?.[\"sap.app\"]?.dataSources;\n\t\t\tconst mainService = datasource?.mainService;\n\t\t\tlet annotationUrls: string[] = (mainService?.settings?.annotations || [])\n\t\t\t\t.map((name: string) => datasource?.[name]?.uri || \"\")\n\t\t\t\t.filter(Boolean);\n\n\t\t\tconst oDataModel = new ODataModelV2(mainService?.uri as string, {\n\t\t\t\tannotationURI: annotationUrls,\n\t\t\t\tloadAnnotationsJoined: true\n\t\t\t});\n\t\t\toDataModel.attachMetadataLoaded(() => {\n\t\t\t\tresolve(oDataModel);\n\t\t\t});\n\t\t\toDataModel.attachMetadataFailed(() => {\n\t\t\t\tresolve(oDataModel);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Get Entity Set\n\t *\n\t * @param {object} manifest - manifest object\n\t * @returns {string} returns entity set\n\t * @private\n\t */\n\tprivate _getEntitySet(manifest: IAppManifest): string | undefined {\n\t\tconst pages = manifest[\"sap.ui.generic.app\"]?.pages;\n\t\tif (Array.isArray(pages)) {\n\t\t\treturn pages[0].entitySet;\n\t\t} else if (pages) {\n\t\t\tfor (const key in pages) {\n\t\t\t\tconst oApp = pages[key] as IPageType;\n\t\t\t\tif (this.recommendedUtilInstance._isListReport(oApp)) {\n\t\t\t\t\treturn oApp.entitySet;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Load I18n\n\t *\n\t * @param {object} manifest - manifest object\n\t * @param {string} manifestUrl - manifest url\n\t * @returns {object} returns resource bundle\n\t * @private\n\t */\n\tprivate async loadI18n(manifest: IAppManifest, manifestUrl: string) {\n\t\t// construct abslute url for properties file relative to manifest url\n\t\tconst i18nBundleUrl = manifest?.[\"sap.app\"]?.[\"i18n\"]?.[\"bundleUrl\"] as string;\n\t\tconst absoluteUrl = new URL(i18nBundleUrl, manifestUrl).href;\n\t\tthis._RBManifestMap = this._RBManifestMap || {};\n\t\tif (!this._RBManifestMap[absoluteUrl]) {\n\t\t\tconst oResourceBundle = await ResourceBundle.create({\n\t\t\t\t// specify url of the base .properties file\n\t\t\t\tbundleUrl: absoluteUrl,\n\t\t\t\tasync: true,\n\t\t\t\tterminologies: manifest[\"sap.app\"]?.[\"i18n\"]?.[\"terminologies\"]\n\t\t\t});\n\t\t\tthis._RBManifestMap[absoluteUrl] = oResourceBundle;\n\t\t}\n\t\treturn this._RBManifestMap[absoluteUrl];\n\t}\n\n\t/**\n\t * Get I18n Value Or Default String\n\t *\n\t * @param {string} sValue - value\n\t * @param {object} oResourceBundle - resource bundle object\n\t * @returns {string} returns string\n\t * @private\n\t */\n\tprivate getI18nValueOrDefaultString(sValue: string, oRB: ResourceBundle) {\n\t\tlet sPath = \"\";\n\t\tif (sValue && sValue.startsWith(\"{{\")) {\n\t\t\tsPath = sValue.substring(2, sValue.length - 2);\n\t\t} else if (sValue && sValue.startsWith(\"{\")) {\n\t\t\tsPath = sValue.substring(1, sValue.length - 1);\n\t\t}\n\t\treturn sPath ? oRB.getText(sPath) : sValue;\n\t}\n\n\t/**\n\t * Retrieves a copy of the analytical card manifest.\n\t *\n\t *\n\t * @private\n\t * @returns {ICardManifest} A copy of the analytical card manifest.\n\t */\n\tpublic _getAnalyticalCardManifest() {\n\t\treturn JSON.parse(JSON.stringify(AnalyticalCardSkeleton)) as ICardManifest;\n\t}\n\n\t/**\n\t * Processes the app manifest and generates a recommended card manifest if the app meets the required conditions.\n\t *\n\t * @param {ODataMetaModel} metaModel - The OData meta model containing metadata about entities and properties.\n\t * @param {IValidManifest} manifestObj - An object containing the app manifest and its URL.\n\t * @param {AppInfoData | undefined} parentApp - The parent app information, if available.\n\t * @param {IVersionInfo} versionInfo - The version and build timestamp of the app.\n\t * @returns {Promise<ICardManifest | undefined>} A promise that resolves to the generated card manifest if the app is eligible,\n\t * or `undefined` if the app does not meet the required conditions.\n\t * @private\n\t */\n\tprivate async getProcessedManifest(\n\t\tmetaModel: ODataMetaModel,\n\t\tmanifestObj: IValidManifest,\n\t\tparentApp: IAppInfoData | undefined,\n\t\tversionInfo: IVersionInfo\n\t): Promise<ICardManifest | undefined> {\n\t\ttry {\n\t\t\tconst manifest = manifestObj.manifest;\n\t\t\tconst mainEntitySetName = this._getEntitySet(manifest);\n\t\t\tif (!mainEntitySetName) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst mainEntitySet = metaModel.getODataEntitySet(mainEntitySetName) as IEntitySet;\n\t\t\tconst lineItemDetails = this.recommendedUtilInstance.getLineItemDetails(metaModel, manifest, mainEntitySetName);\n\n\t\t\tif (!lineItemDetails?.lineItem) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst entitySetName = lineItemDetails.entitySet || mainEntitySetName;\n\t\t\tconst entitySet = (\n\t\t\t\tentitySetName === mainEntitySetName ? mainEntitySet : metaModel.getODataEntitySet(entitySetName)\n\t\t\t) as IEntitySet;\n\t\t\tconst entityType = metaModel.getODataEntityType(entitySet.entityType) as IEntityType;\n\t\t\tconst suppressRowNavigation = lineItemDetails?.lrSettings?.[\"bSupressCardRowNavigation\"];\n\n\t\t\t// Check for mandatory properties\n\t\t\tif (this.recommendedUtilInstance.hasMandatoryProperties(entitySet, entityType?.property)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// Check for parameterized entity sets\n\t\t\tconst parameterDetails = this.recommendedUtilInstance._getParametersisedEntitySetParams(metaModel, entitySetName, true);\n\t\t\tif (parameterDetails?.entitySetName && parameterDetails?.parameters?.length) {\n\t\t\t\tconst paramEntitySet = metaModel.getODataEntitySet(parameterDetails.entitySetName) as IEntitySet;\n\t\t\t\tif (this.recommendedUtilInstance.hasMandatoryProperties(paramEntitySet, parameterDetails.parameters as Property[])) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst cardInput = this.recommendedUtilInstance._getManifestCardData(manifest, lineItemDetails, parentApp!, metaModel);\n\n\t\t\t// Ensure the card has at least 3 columns\n\t\t\tif (cardInput.columns.length < COLUMN_LENGTH) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// Resolve card title\n\t\t\tconst headerInfo = lineItemDetails?.headerInfo as IHeaderInfo;\n\t\t\tconst cardTitle = headerInfo.TypeNamePlural?.String || \"\";\n\t\t\tcardInput.cardTitle = cardTitle || cardInput.cardTitle;\n\n\t\t\t// Resolve i18n title if necessary\n\t\t\tif (!cardTitle && manifest[\"sap.app\"]?.i18n) {\n\t\t\t\tconst i18nBundleUrl = manifest[\"sap.app\"].i18n.bundleUrl;\n\t\t\t\tconst appTitle = manifest[\"sap.app\"].title;\n\t\t\t\tif (i18nBundleUrl && (appTitle.startsWith(\"i18n>\") || appTitle.startsWith(\"{\"))) {\n\t\t\t\t\tconst i18nResourceBundle = await this.loadI18n(manifest, manifestObj.url);\n\t\t\t\t\tcardInput.cardTitle = this.getI18nValueOrDefaultString(cardInput.cardTitle!, i18nResourceBundle);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.recommendedUtilInstance._createCardManifest(cardInput, versionInfo, manifest, suppressRowNavigation);\n\t\t} catch (oError: unknown) {\n\t\t\tLog.error(\"Error while processing manifest\", oError instanceof Error ? oError.message : String(oError));\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Fetches the OData meta models for a given list of valid manifests.\n\t * @param {IValidManifest[]} validManifests - An array of valid manifest objects\n\t * @returns {Promise<(ODataMetaModel | undefined)[]>} A promise that resolves to an array of OData meta models.\n\t * Each element corresponds to a manifest in the input array, and may be `undefined` if the meta model could not be fetched.\n\t * @private\n\t */\n\tprivate async fetchMetaModels(validManifests: IValidManifest[]): Promise<(ODataMetaModel | undefined)[]> {\n\t\tconst odataPromises = validManifests.map(async (manifestObj) => {\n\t\t\ttry {\n\t\t\t\treturn (await this._getOdataModel(manifestObj.manifest))?.getMetaModel();\n\t\t\t} catch (oError: unknown) {\n\t\t\t\tLog.error(\"Error while fetching metamodel\", oError instanceof Error ? oError.message : String(oError));\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t});\n\n\t\treturn await Promise.all(odataPromises);\n\t}\n\n\t/**\n\t * Combines the valid manifests with their corresponding OData meta models.\n\t * @param {IValidManifest[]} validManifests - An array of valid manifest objects\n\t * @param {ODataMetaModel[]} aMetaModel - An array of OData meta models\n\t * @returns {ICombinedManifestDetails[]} An array of objects containing the manifest and the corresponding meta model.\n\t * @private\n\t */\n\tprivate combineManifestsAndMetaModels(\n\t\tvalidManifests: IValidManifest[],\n\t\taMetaModel: (ODataMetaModel | undefined)[]\n\t): ICombinedManifestDetails[] {\n\t\treturn validManifests.reduce<ICombinedManifestDetails[]>((combined, manifestObj, index) => {\n\t\t\tconst metaModel = aMetaModel[index];\n\t\t\tif (metaModel) {\n\t\t\t\tcombined.push({ manifest: manifestObj, metaModel });\n\t\t\t}\n\t\t\treturn combined;\n\t\t}, []);\n\t}\n\n\t/**\n\t * Process the manifest and meta model to get the card manifest\n\t * @param {ICombinedManifestDetails[]} combinedDetails - An array of objects containing the manifest and the corresponding meta model.\n\t * @param {IAppInfoData[]} aCSTR - An array of app info data\n\t * @returns {Promise<(ICardManifest | undefined)[]>} A promise that resolves to an array of recommended card manifests.\n\t * @private\n\t */\n\tprivate async processManifests(\n\t\tcombinedDetails: ICombinedManifestDetails[],\n\t\taCSTR: IAppInfoData[]\n\t): Promise<(ICardManifest | undefined)[]> {\n\t\treturn Promise.all(\n\t\t\tcombinedDetails.map((item) => {\n\t\t\t\tconst parentApp = aCSTR.find((oApp) => oApp.resolutionResult?.ui5ComponentName === item.manifest.manifest?.[\"sap.app\"]?.id);\n\t\t\t\treturn this.getProcessedManifest(item.metaModel, item.manifest, parentApp, this.versionInfo);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Processes the app list to generate a list of Fiori IDs.\n\t *\n\t * If `aList` is not provided, it uses `aAppComponentIds` and `aComponent` to generate the list of Fiori IDs.\n\t * It matches the `semanticObject` and `action` of each component in `aAppComponentIds` with the entries in `aComponent`.\n\t * If a match is found, the corresponding `fioriId` is added to the list.\n\t *\n\t * @param {string[]} [aList] - An optional array of Fiori IDs to return directly.\n\t * @param {ICardDetails[]} [aAppComponentIds] - An array of app component details to process.\n\t * @param {IAppInfo} [aComponent] - A mapping of component IDs to their corresponding data entries.\n\t * @returns {string[]} - A list of Fiori IDs.\n\t */\n\tprivate processAppList(aList?: string[], aAppComponentIds?: ICardDetails[], aComponent?: IAppInfo): string[] {\n\t\tif (!aList && aAppComponentIds && aAppComponentIds.length) {\n\t\t\treturn aAppComponentIds.reduce((list, oComponent) => {\n\t\t\t\tconst oData: IAppInfoData[] = aComponent?.[oComponent.id] || [];\n\t\t\t\tconst matchingData = oData.find(\n\t\t\t\t\t(entry) => entry.semanticObject === oComponent.target?.semanticObject && entry.action === oComponent.target?.action\n\t\t\t\t);\n\n\t\t\t\treturn matchingData ? [...list, matchingData.fioriId!] : list;\n\t\t\t}, [] as string[]);\n\t\t}\n\t\treturn aList || [];\n\t}\n\n\t/**\n\t * Fetch Card Mainfest\n\t *\n\t * @param {string[]} aAppIds - array of app ids\n\t * @returns {Promise} resolves to array of card manifest\n\t * @private\n\t */\n\tpublic async _getCardManifest(aList?: string[], aAppComponentIds?: ICardDetails[]): Promise<ICardManifest[]> {\n\t\ttry {\n\t\t\tconst [aCatalog, aFioriData] = await Promise.all([this._getCatalogApps(), this.getFioriAppData()]);\n\t\t\tthis.versionInfo = (await VersionInfo.load()) as IVersionInfo;\n\n\t\t\tconst aCSTR: IAppInfoData[] = Object.values(aFioriData).flat();\n\t\t\tconst aComponent = this.componentData;\n\t\t\t// in case of replacing old recommended cards fioriIds are not available hence make use of componnetname\n\t\t\t// and semanticobject and action to find fioriId, and populate aList to recreate recommended card again\n\t\t\tconst processedList = this.processAppList(aList, aAppComponentIds, aComponent);\n\n\t\t\tconst manifests = await this.fetchManifests(processedList, aFioriData, aCatalog);\n\t\t\tconst validManifests = manifests.filter((manifestObj) => this._checkValidManifests(manifestObj.manifest));\n\n\t\t\tconst aMetaModel = await this.fetchMetaModels(validManifests);\n\t\t\tconst combinedDetails = this.combineManifestsAndMetaModels(validManifests, aMetaModel);\n\n\t\t\tconst cards = await this.processManifests(combinedDetails, aCSTR);\n\t\t\treturn cards.filter((card) => card !== undefined);\n\t\t} catch (oError: unknown) {\n\t\t\tLog.error(\"Error while fetching card manifest\", oError instanceof Error ? oError.message : String(oError));\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Fetch the app manifest for the given app ids\n\t * @param {string[]} appIdList - array of app ids\n\t * @param {AppInfo} fioriData - fiori data\n\t * @param {AppData[]} catalogData - catalog data\n\t * @returns {Promise} resolves to array of manifests\n\t * @private\n\t */\n\tprivate async fetchManifests(appIdList: string[], fioriData: IAppInfo, catalogData: AppData[]): Promise<IValidManifest[]> {\n\t\ttry {\n\t\t\tconst appPromises = appIdList.map(async (appId) => {\n\t\t\t\tconst aApp: IAppInfoData[] = fioriData[appId] || [];\n\t\t\t\tfor (const oApp of aApp) {\n\t\t\t\t\tconst oViz = catalogData.find(\n\t\t\t\t\t\t(catalog) => oApp.semanticObject === catalog.target?.semanticObject && oApp.action === catalog.target?.action\n\t\t\t\t\t);\n\t\t\t\t\tconst manifestUrl = oApp?.resolutionResult?.applicationDependencies?.manifest;\n\t\t\t\t\tif (oViz && manifestUrl) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst response = await fetch(manifestUrl);\n\t\t\t\t\t\t\tconst manifest = (await response.json()) as IAppManifest;\n\t\t\t\t\t\t\treturn { url: response.url, manifest };\n\t\t\t\t\t\t} catch (error: unknown) {\n\t\t\t\t\t\t\tLog.error(\"Error while fetching manifest\", error instanceof Error ? error.message : String(error));\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// No valid manifest found in this appId's entries\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t\tconst results = await Promise.all(appPromises);\n\t\t\treturn results.filter((manifest): manifest is IValidManifest => manifest !== undefined);\n\t\t} catch (oError) {\n\t\t\tLog.error(\"Error while processing manifests\", oError instanceof Error ? oError.message : String(oError));\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Remove Duplicate Cards\n\t *\n\t * @param {object[]} aCards - array of cards\n\t * @returns {object[]} returns array of cards\n\t * @private\n\t */\n\tprivate _removeDuplicateCards(aCards: ICard[]): ICard[] {\n\t\tconst oCardDict: Record<string, boolean> = {};\n\t\tconst aResult: ICard[] = [];\n\t\taCards.forEach((oCard) => {\n\t\t\tconst sCardTitle = oCard?.descriptorContent?.[\"sap.card\"]?.header?.title || \"\";\n\t\t\tif (!oCardDict[sCardTitle]) {\n\t\t\t\taResult.push(oCard);\n\t\t\t\toCardDict[sCardTitle] = true;\n\t\t\t}\n\t\t});\n\t\treturn aResult;\n\t}\n\n\t/**\n\t * Fetch Recommended Cards\n\t *\n\t * @returns {Promise<ICard[] | []> } resolves to array of recommended cards\n\t * @private\n\t */\n\tpublic async getRecommenedCards(): Promise<ICard[] | []> {\n\t\ttry {\n\t\t\tconst aAppIds = await this._getRecommenedFioriIds();\n\t\t\tconst aManifests = await this._getCardManifest(aAppIds);\n\t\t\tconst aRecManifests = aManifests?.slice(0, RECOMMENDED_CARD_LIMIT);\n\t\t\tconst aRecommendedCards = aRecManifests?.map((manifest) => {\n\t\t\t\tlet id;\n\t\t\t\tif (manifest?.[\"sap.card\"]) {\n\t\t\t\t\tmanifest[\"sap.card\"].rec = true;\n\t\t\t\t\tid = manifest[\"sap.app\"]?.id;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tid,\n\t\t\t\t\tdescriptorContent: manifest\n\t\t\t\t};\n\t\t\t});\n\t\t\treturn this._removeDuplicateCards(aRecommendedCards as ICard[]);\n\t\t} catch (error) {\n\t\t\tLog.error(\"Error while fetching recommended cards:\", error instanceof Error ? error.message : String(error));\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves a list of recommended visualizations for the user.\n\t *\n\t * The final list is composed of up to 10 recommendations, with must-include visualizations prioritized.\n\t * If no recommended visualizations are available or if an error occurs, it returns an empty array.\n\t *\n\t * @private\n\t * @async\n\t * @param {boolean} [forceRefresh=false] - If `true`, forces a refresh of the recommended visualizations\n\t *                                         regardless of whether they are cached.\n\t * @returns {Promise<ICustomVisualization[]>} A promise that resolves to an array of recommended visualizations.\n\t *                                            The array is limited to 10 visualizations, including must-include recommendations.\n\t */\n\tpublic async getRecommendedVisualizations(forceRefresh: boolean = false) {\n\t\tif (!this._recommendedVisualizations || forceRefresh) {\n\t\t\tconst recommendedFioriIds = await this._getRecommenedFioriIds(forceRefresh);\n\t\t\tif (recommendedFioriIds.length) {\n\t\t\t\tlet finalRecommendations: ICustomVisualization[] = [];\n\t\t\t\tlet mustIncludeRecommendations: ICustomVisualization[] = [];\n\t\t\t\tlet [recommendedVisualizations, favoriteVisualizations] = await Promise.all([\n\t\t\t\t\tthis._getVisualizationsByFioriIds(recommendedFioriIds),\n\t\t\t\t\tthis._fetchMyHomeVizs(forceRefresh)\n\t\t\t\t]);\n\t\t\t\t//filter out recommendations that are already added\n\t\t\t\trecommendedVisualizations = recommendedVisualizations.filter((recViz) =>\n\t\t\t\t\t_isVisualizationAlreadyAdded(recViz, favoriteVisualizations)\n\t\t\t\t);\n\t\t\t\trecommendedVisualizations.forEach((recViz) => {\n\t\t\t\t\tif (_isMustIncludeRecommendation(recViz)) {\n\t\t\t\t\t\tmustIncludeRecommendations.push(recViz);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfinalRecommendations.push(recViz);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t//return only 10 recommended apps along with 'MyInbox' and 'Manage My Timesheet' if user has access to these apps.\n\t\t\t\tthis._recommendedVisualizations = finalRecommendations\n\t\t\t\t\t.slice(0, 10 - mustIncludeRecommendations.length)\n\t\t\t\t\t.concat(mustIncludeRecommendations);\n\t\t\t} else {\n\t\t\t\tthis._recommendedVisualizations = [];\n\t\t\t}\n\t\t}\n\t\treturn this._recommendedVisualizations;\n\t}\n\n\t/**\n\t * Asynchronously retrieves the list of inbound applications from the SAP Fiori client-side target resolution service.\n\t *\n\t * @private\n\t * @async\n\t * @returns {Promise<Array>} A promise that resolves to an array of inbound applications.\n\t *                            If an error occurs or the inbound applications are not available, it resolves to an empty array.\n\t */\n\tprivate async _getInboundApps() {\n\t\ttry {\n\t\t\tconst service = await Container.getServiceAsync<ClientSideTargetResolution>(\"ClientSideTargetResolution\");\n\t\t\treturn service?._oAdapter?._aInbounds || [];\n\t\t} catch (error) {\n\t\t\tLog.error(\"Error while fetching inbound apps: \" + (error as Error).message);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves Fiori app data and stores it in the `fioriAppData` and `componentData` properties.\n\t *\n\t * This method fetches inbound applications using the `_getInboundApps` method and processes them to extract\n\t * Fiori app IDs (`sap-fiori-id`) and their associated semantic data. It also maps UI5 component names to their\n\t * corresponding Fiori app IDs for later use.\n\t *\n\t * @returns {Promise<IAppInfo>} A promise that resolves to an object containing Fiori app data\n\t * @private\n\t */\n\tprivate async getFioriAppData(): Promise<IAppInfo> {\n\t\ttry {\n\t\t\tif (!Object.keys(this.componentData).length) {\n\t\t\t\tthis.componentData = {};\n\t\t\t\tthis.fioriAppData = {};\n\t\t\t\tconst inbounds = await this._getInboundApps();\n\t\t\t\tinbounds.forEach((oItem) => {\n\t\t\t\t\tconst fioriId = oItem?.signature?.parameters?.[\"sap-fiori-id\"]?.defaultValue?.value;\n\t\t\t\t\tconst componentId = oItem?.resolutionResult?.ui5ComponentName;\n\t\t\t\t\tif (fioriId) {\n\t\t\t\t\t\tconst semanticData: IAppInfoData = {\n\t\t\t\t\t\t\taction: oItem.action,\n\t\t\t\t\t\t\tsemanticObject: oItem.semanticObject,\n\t\t\t\t\t\t\tresolutionResult: oItem.resolutionResult\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.fioriAppData[fioriId] = this.fioriAppData[fioriId] || [];\n\t\t\t\t\t\tthis.fioriAppData[fioriId].push(semanticData);\n\n\t\t\t\t\t\t// store data along with fioriId in componentData, this can be used later to find the\n\t\t\t\t\t\t// fioriId for those apps when only ui5ComponentName is known\n\t\t\t\t\t\tif (componentId) {\n\t\t\t\t\t\t\tconst combinedData: IAppInfoData = { ...semanticData, fioriId };\n\n\t\t\t\t\t\t\tthis.componentData[componentId] = this.componentData[componentId] || [];\n\t\t\t\t\t\t\tthis.componentData[componentId].push(combinedData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn this.fioriAppData;\n\t\t} catch (oError) {\n\t\t\tLog.error(oError instanceof Error ? oError.message : String(oError));\n\t\t\treturn {};\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves visualizations based on a list of Fiori IDs.\n\t *\n\t * This function processes the given Fiori IDs to find associated visualizations. It does so by fetching\n\t * inbound applications and catalog apps, then matching the Fiori IDs to filter out and gather relevant visualizations.\n\t * The function distinguishes between GUI and non-GUI visualizations, prioritizing non-GUI visualizations if both types are found.\n\t * It also ensures that each visualization is unique based on its URL and title, avoiding duplicates.\n\t *\n\t * @private\n\t * @async\n\t * @param {string[]} fioriIds - An array of Fiori IDs to search for visualizations.\n\t * @returns {Promise<ICustomVisualization[]>} A promise that resolves to an array of unique visualizations associated with the provided Fiori IDs.\n\t */\n\tprivate async _getVisualizationsByFioriIds(fioriIds: string[]) {\n\t\tconst visualizations: ICustomVisualization[] = [];\n\t\tconst visitedVisualizations: Map<string, boolean> = new Map<string, boolean>();\n\t\tconst [inbounds, catalogApps] = await Promise.all([this._getInboundApps(), this._getCatalogApps()]);\n\t\tfioriIds.forEach((fioriId) => {\n\t\t\t// get all inbounds with the fiori id\n\t\t\tconst authorizedApps = inbounds.filter(function (inbound) {\n\t\t\t\treturn inbound?.signature.parameters[\"sap-fiori-id\"]?.defaultValue?.value === fioriId;\n\t\t\t});\n\t\t\tauthorizedApps.forEach((app) => {\n\t\t\t\t//filter apps that matched semantic object action\n\t\t\t\tlet matchingVizualizations = catalogApps.filter((catalogApp) => {\n\t\t\t\t\treturn catalogApp?.target?.semanticObject === app.semanticObject && catalogApp.target.action === app.action;\n\t\t\t\t});\n\n\t\t\t\tconst guiVisualizations = matchingVizualizations.filter((matchingVizualization) =>\n\t\t\t\t\t_isGUIVisualization(matchingVizualization)\n\t\t\t\t);\n\t\t\t\tconst nonGuiVisualizations = matchingVizualizations.filter(\n\t\t\t\t\t(matchingVizualization) => !_isGUIVisualization(matchingVizualization)\n\t\t\t\t);\n\t\t\t\t//if both gui and non-gui visualizations exists, then consider only non-gui visualizations for recommendation.\n\t\t\t\tif (guiVisualizations.length > 0 && nonGuiVisualizations.length > 0) {\n\t\t\t\t\tmatchingVizualizations = [...nonGuiVisualizations];\n\t\t\t\t}\n\n\t\t\t\tmatchingVizualizations.forEach((matchingVizualization) => {\n\t\t\t\t\tlet visualization = matchingVizualization.visualizations[0];\n\t\t\t\t\tlet recommendedVisualization: ICustomVisualization = {\n\t\t\t\t\t\ttitle: visualization.title,\n\t\t\t\t\t\tsubtitle: visualization.subtitle,\n\t\t\t\t\t\ticon: visualization.icon,\n\t\t\t\t\t\turl: visualization.targetURL,\n\t\t\t\t\t\tvizId: visualization.vizId,\n\t\t\t\t\t\tfioriId: fioriId,\n\t\t\t\t\t\tvisualization: visualization\n\t\t\t\t\t};\n\t\t\t\t\t//if app with same url or title already recommended, then don't consider it.\n\t\t\t\t\tif (\n\t\t\t\t\t\t!visitedVisualizations.has(recommendedVisualization.url!) ||\n\t\t\t\t\t\t!visitedVisualizations.has(recommendedVisualization.title!)\n\t\t\t\t\t) {\n\t\t\t\t\t\tvisitedVisualizations.set(recommendedVisualization.url!, true);\n\t\t\t\t\t\tvisitedVisualizations.set(recommendedVisualization.title!, true);\n\t\t\t\t\t\tvisualizations.push(recommendedVisualization);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\treturn visualizations;\n\t}\n\n\t/**\n\t * Retrieves visualizations for all favorite pages based on the provided parameters.\n\t * @param {Array} pages - An array of favorite pages.\n\t * @param {boolean} shouldReload - A flag indicating whether to reload page visualizations.\n\t * @returns {Promise<ICustomVisualization[]>} A promise that resolves with an array of favorite page visualizations.\n\t * @private\n\t */\n\tpublic async _getAllFavPageApps(pages: IPage[], shouldReload?: boolean): Promise<ICustomVisualization[]> {\n\t\ttry {\n\t\t\tif (pages) {\n\t\t\t\tthis._favPageVisualizations = this._favPageVisualizations || [];\n\t\t\t\t//Check to ensure that missing visualization data is loaded, if any\n\t\t\t\tconst loadedPages = this._favPageVisualizations.reduce((pageIDs: string[], visualization) => {\n\t\t\t\t\tif (visualization.pageId && !pageIDs.includes(visualization.pageId)) {\n\t\t\t\t\t\tpageIDs.push(visualization.pageId);\n\t\t\t\t\t}\n\t\t\t\t\treturn pageIDs;\n\t\t\t\t}, []);\n\t\t\t\tconst pageIds = pages.map((page) => page.pageId);\n\t\t\t\tconst shouldLoadMissingApps = loadedPages.length === 0 || !loadedPages.every((pageId) => pageIds.includes(pageId));\n\t\t\t\tif (!shouldReload && !shouldLoadMissingApps) {\n\t\t\t\t\treturn this._favPageVisualizations;\n\t\t\t\t} else {\n\t\t\t\t\tthis._favPageVisualizations = await this._loadAllPageVisualizations(pages);\n\t\t\t\t\treturn this._favPageVisualizations;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [];\n\t\t} catch (error) {\n\t\t\tLog.error(error as string);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Loads visualizations for all specified pages.\n\t * @param {Array} pages - An array of pages.\n\t * @param {boolean} [shouldFetchDistinctApps=false] - A flag indicating whether to fetch distinct pages.\n\t * @returns {Promise<ICustomVisualization[]>} A promise that resolves with an array of page visualizations.\n\t * @private\n\t */\n\tprivate async _loadAllPageVisualizations(pages: IPage[], shouldFetchDistinctApps = false): Promise<ICustomVisualization[]> {\n\t\tconst getBgColor = (pageId: string | undefined) => {\n\t\t\treturn pages.find((page) => page.pageId === pageId)?.BGColor ?? DEFAULT_BG_COLOR().key;\n\t\t};\n\n\t\ttry {\n\t\t\tconst favPageVisualizations: ICustomVisualization[] = [];\n\t\t\tconst spaceContentService = await Container.getServiceAsync<SpaceContent>(\"SpaceContent\");\n\t\t\tconst pageData = await spaceContentService.getPages(pages.map((oPage) => oPage.pageId) as string[]);\n\t\t\tconst aPages = Object.values(pageData);\n\n\t\t\tfor (const page of aPages) {\n\t\t\t\tconst sections = page.sections || [];\n\t\t\t\tfor (const section of sections) {\n\t\t\t\t\tconst visualizations = section.visualizations || [];\n\t\t\t\t\tfor (const visualization of visualizations) {\n\t\t\t\t\t\tconst app = {\n\t\t\t\t\t\t\tappId: visualization.targetURL,\n\t\t\t\t\t\t\tvizId: visualization.vizId,\n\t\t\t\t\t\t\ticon: visualization.icon,\n\t\t\t\t\t\t\tBGColor: getBgColor(page.id) as string,\n\t\t\t\t\t\t\tpageId: page.id\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (!shouldFetchDistinctApps || !favPageVisualizations.some((oVizApp) => oVizApp.appId === app.appId)) {\n\t\t\t\t\t\t\tfavPageVisualizations.push(app);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn favPageVisualizations;\n\t\t} catch (error) {\n\t\t\tLog.error(error as string);\n\t\t\treturn [];\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}