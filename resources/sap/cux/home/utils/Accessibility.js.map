{"version":3,"file":"Accessibility.js","names":["sap","ui","define","InvisibleText","getInvisibleText","id","text","arguments","length","undefined","Error","checkPanelExists","parentContainer","containerTypeName","panelTypeName","layout","_getLayout","items","getAggregation","targetContainer","Array","find","control","isA","containerContents","normalizedItems","some","__exports","__esModule"],"sources":["Accessibility.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport InvisibleText from \"sap/ui/core/InvisibleText\";\nimport BaseContainer from \"../BaseContainer\";\nimport BaseLayout from \"../BaseLayout\";\nimport BasePanel from \"../BasePanel\";\n\n/**\n * Creates an instance of `InvisibleText` with the given ID and text.\n *\n * @param {string} id - The unique id for the `InvisibleText` instance.\n * @param {string} [text=\"\"] - The text content for the `InvisibleText` instance. Defaults to an empty string.\n * @returns {InvisibleText} A new `InvisibleText` instance.\n * @throws {Error} If the `id` is not provided.\n */\nexport function getInvisibleText(id: string, text: string = \"\"): InvisibleText {\n\tif (id) {\n\t\treturn new InvisibleText({\n\t\t\tid: id,\n\t\t\ttext: text || \"\"\n\t\t});\n\t} else {\n\t\tthrow new Error(\"ID is required for InvisibleText.\");\n\t}\n}\n\n/**\n * Checks whether a specific panel type exists within a given container in the layout.\n *\n * @param {BaseContainer} parentContainer - The parent container from where the from which the function is called.\n * @param {string} containerTypeName - The name of the container to look for.\n * @param {string} panelTypeName - The name of the panel to verify inside the container.\n * @returns {boolean} - Returns `true` if the specified panel exists, otherwise `false`.\n */\nexport function checkPanelExists(\n\tparentContainer: BaseContainer | BasePanel | BaseLayout,\n\tcontainerTypeName: string,\n\tpanelTypeName: string\n): boolean {\n\tconst layout = (parentContainer as BaseContainer)?._getLayout?.() ?? parentContainer;\n\tconst items = layout?.getAggregation(\"items\");\n\tconst targetContainer = items instanceof Array ? items.find((control) => control.isA(containerTypeName)) : null;\n\tconst containerContents = targetContainer?.getAggregation(\"content\");\n\tconst normalizedItems = (containerContents && (containerContents instanceof Array ? containerContents : [containerContents])) || [];\n\treturn normalizedItems.some((control) => control.isA(panelTypeName));\n}\n"],"mappings":";;;;AAAAA,IAAAC,GAAAC,OAAA,uCAAAC,GAAA,aAiBO,SAASC,EAAiBC,GAA8C,IAAlCC,EAAYC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,GAC3D,GAAIF,EAAI,CACP,OAAO,IAAIF,EAAc,CACxBE,GAAIA,EACJC,KAAMA,GAAQ,IAEhB,KAAO,CACN,MAAM,IAAII,MAAM,oCACjB,CACD,CAUO,SAASC,EACfC,EACAC,EACAC,GAEA,MAAMC,EAAUH,GAAmCI,gBAAkBJ,EACrE,MAAMK,EAAQF,GAAQG,eAAe,SACrC,MAAMC,EAAkBF,aAAiBG,MAAQH,EAAMI,KAAMC,GAAYA,EAAQC,IAAIV,IAAsB,KAC3G,MAAMW,EAAoBL,GAAiBD,eAAe,WAC1D,MAAMO,EAAmBD,IAAsBA,aAA6BJ,MAAQI,EAAoB,CAACA,KAAwB,GACjI,OAAOC,EAAgBC,KAAMJ,GAAYA,EAAQC,IAAIT,GACtD,CAAC,IAAAa,EAAA,CAAAC,WAAA,MAAAD,EAAAvB,mBAAAuB,EAAAhB,mBAAA,OAAAgB,CAAA","ignoreList":[]}