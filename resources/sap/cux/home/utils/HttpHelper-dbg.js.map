{"version":3,"file":"HttpHelper-dbg.js","names":["sap","ui","define","Log","BaseObject","___Constants","REPO_BASE_URL","HttpHelper","constructor","super","fetchCSRFToken","fetch","method","headers","then","response","token","get","ok","Error","catch","error","message","Post","url","payload","csrfToken","body","JSON","stringify","json","GetJSON"],"sources":["HttpHelper.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport Log from \"sap/base/Log\";\nimport BaseObject from \"sap/ui/base/Object\";\nimport { REPO_BASE_URL } from \"./Constants\";\n\n/**\n *\n * @class Provides the HttpHelper Class used for Get and Post Calls.\n *\n * @extends sap.ui.BaseObject\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121.0\n *\n * @private\n * @experimental Since 1.121\n * @hidden\n *\n * @alias sap.cux.home.utils.HttpHelper\n */\n\nexport default class HttpHelper extends BaseObject {\n\tprivate constructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Fetches the CSRF Token\n\t * @returns {Promise<string | void>} Promise that resolves with the CSRF Token\n\t */\n\tprivate static fetchCSRFToken(): Promise<string | void> {\n\t\treturn fetch(REPO_BASE_URL, {\n\t\t\tmethod: \"HEAD\",\n\t\t\theaders: {\n\t\t\t\t\"X-CSRF-Token\": \"Fetch\"\n\t\t\t}\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tconst token = response.headers.get(\"X-CSRF-Token\");\n\t\t\t\tif (response.ok && token) {\n\t\t\t\t\treturn token;\n\t\t\t\t}\n\t\t\t\tthrow new Error(\"Cannot fetch X-CSRF-Token.\");\n\t\t\t})\n\t\t\t.catch((error: Error) => {\n\t\t\t\tLog.error(error.message);\n\t\t\t});\n\t}\n\n\t/**\n\t * Post Method\n\t * @param {string} url - The URL to post to\n\t * @param {object} payload - The payload to post\n\t * @returns {Promise<unknown>} Promise that resolves with the response\n\t */\n\tpublic static Post(url: string, payload: object): Promise<unknown> {\n\t\treturn HttpHelper.fetchCSRFToken()\n\t\t\t.then((csrfToken) => {\n\t\t\t\treturn fetch(url, {\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t\"X-CSRF-Token\": csrfToken as string,\n\t\t\t\t\t\t\"content-type\": \"application/json\"\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify(payload)\n\t\t\t\t});\n\t\t\t})\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.catch((error: Error) => {\n\t\t\t\tLog.error(error.message);\n\t\t\t});\n\t}\n\n\t/**\n\t * Get Method for JSON Data\n\t * @param {string} url - The URL to get from\n\t * @returns {Promise<unknown>} Promise that resolves with the JSON data response\n\t */\n\tpublic static GetJSON(url: string): Promise<unknown> {\n\t\treturn fetch(url)\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.catch((error: Error) => {\n\t\t\t\tLog.error(error.message);\n\t\t\t});\n\t}\n}\n"],"mappings":";;;;AAAAA,IAAAC,GAAAC,OAAA,6DAAAC,EAAAC,EAAAC,GAAA,mBAMSC,EAAaD,EAAA,iBAmBP,MAAME,UAAmBH,EAC/BI,cACPC,OACD,CAMA,qBAAeC,GACd,OAAOC,MAAML,EAAe,CAC3BM,OAAQ,OACRC,QAAS,CACR,eAAgB,WAGhBC,KAAMC,IACN,MAAMC,EAAQD,EAASF,QAAQI,IAAI,gBACnC,GAAIF,EAASG,IAAMF,EAAO,CACzB,OAAOA,CACR,CACA,MAAM,IAAIG,MAAM,6BAA6B,GAE7CC,MAAOC,IACPlB,EAAIkB,MAAMA,EAAMC,QAAQ,EAE3B,CAQA,WAAcC,CAAKC,EAAaC,GAC/B,OAAOlB,EAAWG,iBAChBI,KAAMY,GACCf,MAAMa,EAAK,CACjBZ,OAAQ,OACRC,QAAS,CACR,eAAgBa,EAChB,eAAgB,oBAEjBC,KAAMC,KAAKC,UAAUJ,MAGtBX,KAAMC,GACCA,EAASe,QAEhBV,MAAOC,IACPlB,EAAIkB,MAAMA,EAAMC,QAAQ,EAE3B,CAOA,cAAcS,CAAQP,GACrB,OAAOb,MAAMa,GACXV,KAAMC,GACCA,EAASe,QAEhBV,MAAOC,IACPlB,EAAIkB,MAAMA,EAAMC,QAAQ,EAE3B,EACA,OAAAf,CAAA","ignoreList":[]}