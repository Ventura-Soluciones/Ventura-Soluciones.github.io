{"version":3,"file":"ToDoPanel-dbg.js","names":["sap","ui","define","Log","Card","GridContainer","GridContainerSettings","Button","GenericTile","HeaderContainer","IllustratedMessage","Text","TileContent","VBox","sap_m_library","Device","UI5Element","DateFormat","JSONModel","__BasePanel","__MenuItem","__ToDosContainer","__BatchHelper","___utils_Device","___utils_FESRUtil","_interopRequireDefault","obj","__esModule","default","_catch","body","recover","result","e","then","Priority","_finallyRethrows","finalizer","bind","URLHelper","_iteratorSymbol","Symbol","iterator","_settle","pact","state","value","s","_Pact","v","o","observer","prototype","onFulfilled","onRejected","this","callback","_this","_isSettledPact","thenable","_forTo","array","check","i","reject","_cycle","length","BasePanel","_forOf","target","step","next","done","return","_fixup","TypeError","values","push","MenuItem","ToDosContainer","BatchHelper","calculateCardWidth","DeviceType","fetchElementProperties","addFESRId","Constants","SITUATION_ICON","PLACEHOLDER_ITEMS_COUNT","TODO_CARDS_LIMIT","TODO_SECTION_LIMIT","TODOS_REFRESH_INTERVAL","MOBILE_DEVICE_MAX_WIDTH","DEFAULT_TITLE_HEIGHT","DEFAULT_CARD_HEIGHT","DEFAULT_TAB_HEADER_HEIGHT","ToDoPanel","extend","metadata","library","properties","baseUrl","type","group","defaultValue","visibility","countUrl","dataUrl","targetAppUrl","minCardWidth","maxCardWidth","constructor","_constructor","id","settings","BasePanel.prototype.constructor.call","batchHelper","init","_init","BasePanel.prototype.init.call","_oData","isLoaded","hasError","cardWidth","getSupported","isExpandedOnce","isCountCalledOnce","illustrationType","refreshInfo","_toRelativeDateTime","Date","horizontalCardCount","illustrationTitle","_i18nBundle","getText","illustrationDescription","isPhone","resize","width","system","phone","tiles","Array","fill","loadState","displayTiles","_controlModel","requests","_toDoWrapper","getId","renderType","items","_generateCardContainer","_generateMobileCardContainer","_generateErrorMessage","setModel","_addContent","menuItem","title","icon","press","_onPressRefresh","addAggregation","_refreshBtn","text","setProperty","attachEvent","Promise","resolve","_beforePanelExpand","_cardContainer","inlineBlockLayout","snapToRow","visible","layout","columns","columnSize","gap","addStyleClass","_mobileCardContainer","scrollStep","gridLayout","scrollTime","showDividers","_errorCard","_errorMessage","illustrationSize","description","content","getParent","_getSelectedPanel","_loadCards","forceRefresh","_this2","_loadToDos","undefined","_bindInnerControls","selectedKey","getProperty","_isElementExpanded","_setCount","_getSupported","setTimeout","_generatePlaceHolderTiles","_generateRequestObject","onlyCount","concat","_submitBatch","fireEvent","_setSectionRefreshInterval","lastRefreshedTime","_updateRefreshInformation","_switchTabIfRequired","_updateHeaderIfExclusive","catch","error","Error","message","finally","refresh","_adjustLayout","toDosWrapper","_getContent","hasStyleClass","_handleError","getTargetAppUrl","removeContent","_isExclusivePanel","_setTitle","String","_innerControlsBound","bindAggregation","path","factory","context","generateCardTemplate","bindProperty","_generateCardTemplate","mode","frameType","pressEnabled","header","tileContent","priority","priorityText","_toPriorityText","footer","key","VeryHigh","High","Medium","Low","_cardCount","_getVisibleCardCount","isPlaceholder","calculationProperties","_getLayout","isElementExpanded","targetDomRef","getDomRef","isHeaderVisible","containerDomRef","_getFullScreenContainer","sectionNodeIndex","childNodes","isMobileDevice","cardCount","getHorizontalCardCount","getVerticalCardCount","toDosContainer","_getCurrentExpandedElementName","_getHorizontalCardCount","domRef","domProperties","availableWidth","Object","slice","reduce","propertyValue","actualCardCount","minWidth","maxWidth","cardLayoutConfig","containerWidth","totalCards","Math","max","floor","_getVerticalCardCount","sectionDomProperties","parentDomProperties","parentElement","titleHeight","calculateTitleHeight","availableHeight","height","margin","cardHeight","verticalCardCount","_calculateTitleHeight","container","containerHeaderRef","getElementById","iconTabBarHeaderRef","_getInnerControl","defaultHeight","clientHeight","options","_this3","urls","generateRequestUrls","splice","baseURL","getBaseUrl","requestURLs","success","args","onDataReceived","Number","_handleEmptyCards","_generateRequestUrls","queryString","getDataUrl","includes","getCountUrl","_onDataReceived","results","arguments","_this4","getNoDataText","allPanels","getContent","supportedPanels","filter","panel","clearInterval","refreshFn","setInterval","_updateContainerHeader","displayCards","getDeviceType","Mobile","toggleFullScreenElements","date","inputDate","isNaN","relativeDateFormatter","format","_getNoDataText","_parseResponse","response","d","numericD","numericResponse","_this5","all","map","request","createMultipartRequest","responses","processedResponses","JSON","parse","_temp","_wasThrown","_result","_clearRequests","_isLoaded","parentContainer","isContainerExpanded","_setLoaded","_setSupported","isSupported","_getAppIntent","pattern","match","semanticObject","action","params","paramsArray","split","param","_this6","_interrupt","_temp5","_temp3","nextAvailablePanel","panels","getAggregation","_temp4","_temp2","_getCardCount","_onPressViewAll","redirect","_this7","_temp6","getDateTimeInstance","style","relative","relativeStyle"],"sources":["ToDoPanel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\n\nimport Log from \"sap/base/Log\";\nimport Card from \"sap/f/Card\";\nimport GridContainer from \"sap/f/GridContainer\";\nimport GridContainerSettings from \"sap/f/GridContainerSettings\";\nimport Button from \"sap/m/Button\";\nimport GenericTile from \"sap/m/GenericTile\";\nimport HeaderContainer from \"sap/m/HeaderContainer\";\nimport IllustratedMessage from \"sap/m/IllustratedMessage\";\nimport Text from \"sap/m/Text\";\nimport TileContent from \"sap/m/TileContent\";\nimport VBox from \"sap/m/VBox\";\nimport { LoadState, Priority, URLHelper } from \"sap/m/library\";\nimport Device from \"sap/ui/Device\";\nimport Control from \"sap/ui/core/Control\";\nimport type { MetadataOptions } from \"sap/ui/core/Element\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport DateFormat from \"sap/ui/core/format/DateFormat\";\nimport Context from \"sap/ui/model/Context\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport BaseContainer from \"./BaseContainer\";\nimport BasePanel from \"./BasePanel\";\nimport IToDoPanel from \"./IToDoPanel\";\nimport MenuItem from \"./MenuItem\";\nimport { $ToDoPanelSettings } from \"./ToDoPanel\";\nimport ToDosContainer from \"./ToDosContainer\";\nimport BatchHelper from \"./utils/BatchHelper\";\nimport { calculateCardWidth, DeviceType, fetchElementProperties } from \"./utils/Device\";\nimport { addFESRId } from \"./utils/FESRUtil\";\n\ninterface Request {\n\tbaseURL: string;\n\trequestURLs: string[];\n\tsuccess(args: unknown[]): Promise<void>;\n}\n\nexport interface CalculationProperties {\n\tisPlaceholder?: boolean;\n}\n\nexport interface Intent {\n\ttarget: {\n\t\tsemanticObject: string;\n\t\taction: string;\n\t};\n\tparams: {\n\t\t[key: string]: string;\n\t};\n}\n\nexport interface RequestOptions {\n\ttype: string;\n\tonlyCount?: boolean;\n}\n\nexport interface Response {\n\td?: {\n\t\tresults?: unknown[];\n\t};\n\tresults?: unknown[];\n\tvalue?: unknown[];\n}\n\nconst Constants = {\n\tSITUATION_ICON: \"sap-icon://message-warning\",\n\tPLACEHOLDER_ITEMS_COUNT: 5,\n\tTODO_CARDS_LIMIT: 100,\n\tTODO_SECTION_LIMIT: 6,\n\tTODOS_REFRESH_INTERVAL: 65000,\n\tMOBILE_DEVICE_MAX_WIDTH: 600,\n\tDEFAULT_TITLE_HEIGHT: 33,\n\tDEFAULT_CARD_HEIGHT: 168,\n\tDEFAULT_TAB_HEADER_HEIGHT: 44\n};\n\n/**\n *\n * Abstract Panel class for managing and storing To-Do cards.\n *\n * @extends BasePanel\n *\n * @author SAP SE\n * @version 0.0.1\n * @since 1.121\n *\n * @abstract\n * @internal\n * @experimental Since 1.121\n * @public\n *\n * @alias sap.cux.home.ToDoPanel\n */\nexport default abstract class ToDoPanel extends BasePanel implements IToDoPanel {\n\tprotected _oData!: Record<string, unknown>;\n\tprotected requests!: Request[];\n\tprivate _controlModel!: JSONModel;\n\tprivate _toDoWrapper!: VBox;\n\tprivate _cardContainer!: GridContainer;\n\tprivate _mobileCardContainer!: HeaderContainer;\n\tprivate _errorCard!: Card;\n\tprivate _errorMessage!: IllustratedMessage;\n\tprivate _refreshBtn!: Button;\n\tprivate _loadToDos!: Promise<void> | undefined;\n\tprivate _innerControlsBound!: boolean;\n\tprivate _cardCount!: number;\n\tprivate batchHelper!: BatchHelper;\n\n\tconstructor(id?: string | $ToDoPanelSettings);\n\tconstructor(id?: string, settings?: $ToDoPanelSettings);\n\t/**\n\t * Constructor for a new To-Dos Panel.\n\t *\n\t * @param {string} [id] ID for the new control, generated automatically if an ID is not provided\n\t * @param {object} [settings] Initial settings for the new control\n\t */\n\tpublic constructor(id?: string, settings?: $ToDoPanelSettings) {\n\t\tsuper(id, settings);\n\t\tthis.batchHelper = new BatchHelper();\n\t}\n\n\tstatic readonly metadata: MetadataOptions = {\n\t\tlibrary: \"sap.cux.home\",\n\t\tproperties: {\n\t\t\t/**\n\t\t\t * Specifies the base URL for batching requests sent from the panel.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tbaseUrl: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Specifies the URL for fetching the count of requested to-do cards.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tcountUrl: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Specifies the URL from where the to-do cards should be fetched.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\tdataUrl: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Specifies the URL of the target application associated with the to-do cards.\n\t\t\t *\n\t\t\t * @public\n\t\t\t */\n\t\t\ttargetAppUrl: { type: \"string\", group: \"Misc\", defaultValue: \"\", visibility: \"public\" },\n\t\t\t/**\n\t\t\t * Specifies the minimum width of the card in pixels.\n\t\t\t *\n\t\t\t * @private\n\t\t\t */\n\t\t\tminCardWidth: { type: \"int\", group: \"Misc\", defaultValue: 304, visibility: \"hidden\" },\n\t\t\t/**\n\t\t\t * Specifies the maximum width of the card in pixels.\n\t\t\t *\n\t\t\t * @private\n\t\t\t */\n\t\t\tmaxCardWidth: { type: \"int\", group: \"Misc\", defaultValue: 583, visibility: \"hidden\" }\n\t\t}\n\t};\n\n\tstatic relativeDateFormatter = DateFormat.getDateTimeInstance({\n\t\tstyle: \"medium\",\n\t\trelative: true,\n\t\trelativeStyle: \"short\"\n\t});\n\n\t/**\n\t * Init lifecycle method\n\t *\n\t * @private\n\t * @override\n\t */\n\tpublic init(): void {\n\t\tsuper.init();\n\n\t\t//Initialise ToDos Model\n\t\tthis._oData = {\n\t\t\tlength: 0,\n\t\t\tisLoaded: false,\n\t\t\thasError: false,\n\t\t\tcardWidth: \"20rem\",\n\t\t\tgetSupported: false,\n\t\t\tisExpandedOnce: false,\n\t\t\tisCountCalledOnce: false,\n\t\t\tillustrationType: \"sapIllus-NoTasks\",\n\t\t\trefreshInfo: this._toRelativeDateTime(new Date()),\n\t\t\thorizontalCardCount: Constants.PLACEHOLDER_ITEMS_COUNT,\n\t\t\tillustrationTitle: this._i18nBundle.getText(\"noToDoTitle\"),\n\t\t\tillustrationDescription: this._i18nBundle.getText(\"noToDoDesc\"),\n\t\t\tisPhone: Device.resize.width < Constants.MOBILE_DEVICE_MAX_WIDTH || Device.system.phone,\n\t\t\ttiles: new Array(Constants.PLACEHOLDER_ITEMS_COUNT).fill({ loadState: \"Loading\" }),\n\t\t\tdisplayTiles: new Array(Constants.PLACEHOLDER_ITEMS_COUNT).fill({ loadState: \"Loading\" })\n\t\t};\n\t\tthis._controlModel = new JSONModel(this._oData);\n\n\t\t//Initialize Request Queue\n\t\tthis.requests = [];\n\n\t\t//Add Wrapper Container to Panel\n\t\tthis._toDoWrapper = new VBox(`${this.getId()}-toDosWrapper`, {\n\t\t\trenderType: \"Bare\",\n\t\t\titems: [this._generateCardContainer(), this._generateMobileCardContainer(), this._generateErrorMessage()]\n\t\t});\n\t\tthis._toDoWrapper.setModel(this._controlModel);\n\t\tthis._addContent(this._toDoWrapper);\n\n\t\t//Setup Common Menu Items\n\t\tconst menuItem = new MenuItem(`${this.getId()}-refresh`, {\n\t\t\ttitle: this._i18nBundle.getText(\"refresh\"),\n\t\t\ticon: \"sap-icon://refresh\",\n\t\t\tpress: () => this._onPressRefresh()\n\t\t});\n\t\tthis.addAggregation(\"menuItems\", menuItem);\n\t\taddFESRId(menuItem, \"todosRefresh\");\n\n\t\t//Setup Common Action Buttons\n\t\tthis._refreshBtn = new Button(`${this.getId()}-refreshBtn`, {\n\t\t\ticon: \"sap-icon://refresh\",\n\t\t\ttext: this._toRelativeDateTime(new Date()),\n\t\t\tpress: () => this._onPressRefresh()\n\t\t});\n\t\taddFESRId(this._refreshBtn, \"manualTodoRefresh\");\n\t\tthis.addAggregation(\"actionButtons\", this._refreshBtn);\n\n\t\t//Configure Full Screen and Expand Event handlers\n\t\tthis.setProperty(\"enableFullScreen\", true);\n\t\tthis.attachEvent(\"onExpand\", async () => {\n\t\t\tawait this._beforePanelExpand();\n\t\t});\n\t}\n\n\t/**\n\t * Generates the card container (GridContainer) for displaying cards.\n\t *\n\t * @private\n\t * @returns {GridContainer} The generated card container.\n\t */\n\tprivate _generateCardContainer(): GridContainer {\n\t\t//create container\n\t\tif (!this._cardContainer) {\n\t\t\tthis._cardContainer = new GridContainer(`${this.getId()}-flexContainer`, {\n\t\t\t\tinlineBlockLayout: true,\n\t\t\t\tsnapToRow: true,\n\t\t\t\tvisible: \"{= !${/isPhone} && !${/hasError} && (!${/isLoaded} || ${/length} > 0) }\",\n\t\t\t\tlayout: new GridContainerSettings(`${this.getId()}-layout`, {\n\t\t\t\t\tcolumns: \"{/horizontalCardCount}\",\n\t\t\t\t\tcolumnSize: \"{/cardWidth}\",\n\t\t\t\t\tgap: \"1rem\"\n\t\t\t\t})\n\t\t\t}).addStyleClass(\"sapCuxToDoCardsContainer\");\n\t\t}\n\n\t\treturn this._cardContainer;\n\t}\n\n\t/**\n\t * Generates the mobile card container (HeaderContainer) for displaying cards on mobile devices.\n\t *\n\t * @private\n\t * @returns {HeaderContainer} The generated mobile card container.\n\t */\n\tprivate _generateMobileCardContainer(): HeaderContainer {\n\t\t// Create a HeaderContainer for mobile devices\n\t\tif (!this._mobileCardContainer) {\n\t\t\tthis._mobileCardContainer = new HeaderContainer(`${this.getId()}-headerContainer`, {\n\t\t\t\tvisible: \"{/isPhone}\",\n\t\t\t\tscrollStep: 0,\n\t\t\t\tgridLayout: true,\n\t\t\t\tscrollTime: 1000,\n\t\t\t\tshowDividers: false,\n\t\t\t\tsnapToRow: true\n\t\t\t});\n\n\t\t\tthis._mobileCardContainer.addStyleClass(\"sapMHeaderContainerAlign sapMHeaderContainerToDoAlign toDoCardHeight\");\n\t\t}\n\n\t\treturn this._mobileCardContainer;\n\t}\n\n\t/**\n\t * Generates the error message card for displaying error messages.\n\t *\n\t * @private\n\t * @returns {Card} The generated error message card.\n\t */\n\tprivate _generateErrorMessage(): Card {\n\t\tif (!this._errorCard) {\n\t\t\tthis._errorMessage = new IllustratedMessage(`${this.getId()}-errorMessage`, {\n\t\t\t\tillustrationSize: \"Base\",\n\t\t\t\ttitle: \"{/illustrationTitle}\",\n\t\t\t\tdescription: \"{/illustrationDescription}\",\n\t\t\t\tillustrationType: \"{/illustrationType}\"\n\t\t\t});\n\t\t\tthis._errorCard = new Card(`${this.getId()}-errorCard`, {\n\t\t\t\tcontent: this._errorMessage,\n\t\t\t\tvisible: \"{= ${/tiles/length} === 0 || ${/hasError} === true }\"\n\t\t\t});\n\t\t}\n\n\t\treturn this._errorCard;\n\t}\n\n\t/**\n\t * Handler for the Refresh button for each panel.\n\t * Reloads the selected panel\n\t *\n\t * @async\n\t * @private\n\t */\n\tprivate _onPressRefresh(): void {\n\t\tvoid ((this.getParent() as ToDosContainer)?._getSelectedPanel() as ToDoPanel)?._loadCards(true);\n\t}\n\n\t/**\n\t * Loads the To-Do cards for the panel.\n\t *\n\t * @private\n\t * @param {boolean} forceRefresh - force refresh cards\n\t * @returns {Promise<void>} A promise that resolves when the cards are loaded.\n\t */\n\tpublic async _loadCards(forceRefresh?: boolean): Promise<void> {\n\t\tif (this._loadToDos !== undefined && !forceRefresh) {\n\t\t\treturn this._loadToDos;\n\t\t} else {\n\t\t\tthis._bindInnerControls();\n\t\t\tthis._loadToDos = new Promise((resolve) => {\n\t\t\t\tconst selectedKey = (this.getParent() as BaseContainer)?._getSelectedPanel()?.getProperty(\"key\") as string;\n\t\t\t\tconst requests: Request[] = [];\n\n\t\t\t\tthis._oData.isLoaded = false;\n\t\t\t\tthis._oData.isCountCalledOnce = false;\n\t\t\t\tthis._oData.isExpandedOnce = this._isElementExpanded();\n\t\t\t\tthis._setCount();\n\n\t\t\t\tif (this._getSupported()) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t// Load Placeholder Cards\n\t\t\t\t\t\tthis._generatePlaceHolderTiles();\n\n\t\t\t\t\t\t// Add Initial Batch Requests\n\t\t\t\t\t\trequests.push(\n\t\t\t\t\t\t\tthis._generateRequestObject({ type: selectedKey, onlyCount: selectedKey !== this.getProperty(\"key\") })\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.requests = this.requests.concat(requests);\n\n\t\t\t\t\t\t//Submit Batch Requests\n\t\t\t\t\t\tthis._submitBatch()\n\t\t\t\t\t\t\t.then(async () => {\n\t\t\t\t\t\t\t\tthis._oData.isLoaded = selectedKey === this.getProperty(\"key\");\n\t\t\t\t\t\t\t\tthis.fireEvent(\"loaded\");\n\n\t\t\t\t\t\t\t\tthis._oData.isCountCalledOnce = true;\n\t\t\t\t\t\t\t\tthis._setCount(this._oData.length as string);\n\n\t\t\t\t\t\t\t\tthis._setSectionRefreshInterval();\n\t\t\t\t\t\t\t\tthis._oData.refreshInfo = this._toRelativeDateTime(new Date());\n\t\t\t\t\t\t\t\tthis._oData.lastRefreshedTime = new Date();\n\t\t\t\t\t\t\t\tthis._updateRefreshInformation();\n\n\t\t\t\t\t\t\t\tawait this._switchTabIfRequired();\n\t\t\t\t\t\t\t\tthis._updateHeaderIfExclusive();\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch((error: unknown) => {\n\t\t\t\t\t\t\t\tLog.error(error instanceof Error ? error.message : \"\");\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.finally(() => {\n\t\t\t\t\t\t\t\tthis._controlModel.refresh();\n\t\t\t\t\t\t\t\tthis._adjustLayout();\n\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t * This class is initially added for Desktop and Tablet. If not added (In case of Mobile) add it.\n\t\t\t\t\t\t\t\t * This is temporary code (to be removed later), this will be handled by GenericTile.\n\t\t\t\t\t\t\t\t * */\n\t\t\t\t\t\t\t\tconst toDosWrapper = this._getContent()?.[0];\n\t\t\t\t\t\t\t\tif (toDosWrapper && !toDosWrapper.hasStyleClass(\"sapUiGridTaskLayout\")) {\n\t\t\t\t\t\t\t\t\ttoDosWrapper.addStyleClass(\"sapUiGridTaskLayout\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis._handleError(`User not authorized to access: + ${this.getTargetAppUrl()}`);\n\n\t\t\t\t\t// Remove Item from IconTabBar\n\t\t\t\t\t(this.getParent() as ToDosContainer)?.removeContent(this);\n\n\t\t\t\t\t//resolve the promise\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn this._loadToDos;\n\t}\n\n\t/**\n\t * Update Container Header if the panel is exclusive\n\t *\n\t * @private\n\t */\n\tprivate _updateHeaderIfExclusive() {\n\t\tif (this._isExclusivePanel()) {\n\t\t\t(this.getParent() as ToDosContainer)._setTitle(`${this._i18nBundle.getText(\"toDosTitle\")} (${String(this._oData.length)})`);\n\t\t}\n\t}\n\n\t/**\n\t * Creates a one-time binding of inner controls for the ToDoPanel.\n\t * @private\n\t */\n\tprivate _bindInnerControls(): void {\n\t\tif (!this._innerControlsBound) {\n\t\t\t//bind card container\n\t\t\tthis._cardContainer.bindAggregation(\"items\", {\n\t\t\t\tpath: \"/displayTiles\",\n\t\t\t\tlength: Constants.TODO_CARDS_LIMIT,\n\t\t\t\tfactory: (id, context) => this.generateCardTemplate(id, context)?.bindProperty?.(\"width\", { path: \"/cardWidth\" })\n\t\t\t});\n\n\t\t\t//bind mobile card container\n\t\t\tthis._mobileCardContainer.bindAggregation(\"content\", {\n\t\t\t\tpath: \"/displayTiles\",\n\t\t\t\tlength: Constants.TODO_CARDS_LIMIT,\n\t\t\t\tfactory: (id, context) => this.generateCardTemplate(id, context)?.bindProperty?.(\"width\", { path: \"/cardWidth\" })\n\t\t\t});\n\n\t\t\tthis._innerControlsBound = true;\n\t\t}\n\t}\n\n\t/**\n\t * Generates the card template for the Current Panel.\n\t *\n\t * @public\n\t * @param {string} id The ID for the template.\n\t * @param {object} context The context for the template.\n\t * @returns {object} The generated card template.\n\t */\n\tpublic generateCardTemplate(id: string, context: Context): Control {\n\t\treturn new GenericTile(`${id}-tile`, {\n\t\t\tmode: \"ActionMode\",\n\t\t\tframeType: \"TwoByOne\",\n\t\t\tpressEnabled: true,\n\t\t\theader: context.getProperty(\"title\") as string,\n\t\t\twidth: context.getProperty(\"/cardWidth\") as string,\n\t\t\tstate: context.getProperty(\"loadState\") as LoadState,\n\t\t\ttileContent: [\n\t\t\t\tnew TileContent(`${id}-tileContent`, {\n\t\t\t\t\tpriority: context.getProperty(\"priority\") as Priority,\n\t\t\t\t\tpriorityText: this._toPriorityText(context.getProperty(\"priority\") as Priority),\n\t\t\t\t\tfooter: context.getProperty(\"footerText\") as string,\n\t\t\t\t\tcontent: new Text(`${id}-situationContent`, {\n\t\t\t\t\t\ttext: context.getProperty(\"message\") as string\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t]\n\t\t});\n\t}\n\n\t/**\n\t * Convert a priority string to a corresponding priority text.\n\t *\n\t * @private\n\t * @param {Priority} priority - The priority string.\n\t * @returns {string} The corresponding priority text.\n\t */\n\tpublic _toPriorityText(priority: Priority): string {\n\t\tlet key;\n\t\tif (priority === Priority.VeryHigh) {\n\t\t\tkey = \"veryHighPriority\";\n\t\t} else if (priority === Priority.High) {\n\t\t\tkey = \"highPriority\";\n\t\t} else if (priority === Priority.Medium) {\n\t\t\tkey = \"mediumPriority\";\n\t\t} else if (priority === Priority.Low) {\n\t\t\tkey = \"lowPriority\";\n\t\t} else {\n\t\t\tkey = \"nonePriority\";\n\t\t}\n\n\t\treturn this._i18nBundle.getText(key) as string;\n\t}\n\n\t/**\n\t * Generates placeholder tiles for the panel.\n\t *\n\t * @private\n\t */\n\tprivate _generatePlaceHolderTiles(): void {\n\t\tthis._cardCount = this._getVisibleCardCount({ isPlaceholder: true });\n\t\tthis._oData.displayTiles = this._oData.tiles = new Array(this._cardCount).fill({ loadState: \"Loading\" });\n\t\tthis._oData.isLoaded = this._oData.hasError = false;\n\t\tthis._controlModel.refresh();\n\t}\n\n\t/**\n\t * Calculates the number of visible cards that can fit within the available space of the To-Dos panel.\n\t *\n\t * @private\n\t * @param {CalculationProperties} [calculationProperties] - Optional properties to assist in the calculation.\n\t * @returns {number} - The number of visible cards.\n\t */\n\tprivate _getVisibleCardCount(calculationProperties?: CalculationProperties): number {\n\t\tconst layout = (this.getParent() as ToDosContainer)?._getLayout();\n\t\tlet isElementExpanded = false;\n\t\tlet targetDomRef = this._toDoWrapper?.getDomRef();\n\n\t\tif (layout) {\n\t\t\tisElementExpanded = this._isElementExpanded();\n\t\t\tconst isHeaderVisible = layout.getProperty(\"showHeader\") as boolean;\n\t\t\tconst containerDomRef = (isElementExpanded ? layout._getFullScreenContainer() : layout).getDomRef();\n\t\t\tconst sectionNodeIndex = isHeaderVisible && !isElementExpanded ? 1 : 0;\n\t\t\ttargetDomRef = containerDomRef?.childNodes[sectionNodeIndex] as Element;\n\t\t}\n\n\t\tconst isMobileDevice = this._controlModel.getProperty(\"/isPhone\") as boolean;\n\t\tlet cardCount = isMobileDevice ? Constants.TODO_SECTION_LIMIT : 1;\n\n\t\tif (targetDomRef) {\n\t\t\t// @ts-expect-error Calculate Horizontal Card Count\n\t\t\tcardCount = this.getHorizontalCardCount(targetDomRef, calculationProperties);\n\n\t\t\tif (isElementExpanded) {\n\t\t\t\t// @ts-expect-error Calculate Vertical Card Count\n\t\t\t\tcardCount *= this.getVerticalCardCount(targetDomRef, calculationProperties);\n\t\t\t}\n\n\t\t\t//Restrict cards to the maximum limit\n\t\t\tcardCount = cardCount > Constants.TODO_CARDS_LIMIT ? Constants.TODO_CARDS_LIMIT : cardCount;\n\t\t}\n\n\t\treturn cardCount;\n\t}\n\n\t/**\n\t * Checks if the current element is expanded to full screen.\n\t *\n\t * @private\n\t * @returns {boolean} - True if the element is expanded, otherwise false.\n\t */\n\tprivate _isElementExpanded(): boolean {\n\t\tconst toDosContainer = this.getParent() as ToDosContainer;\n\t\tconst layout = toDosContainer._getLayout();\n\t\treturn layout?._getCurrentExpandedElementName() === toDosContainer.getProperty(\"fullScreenName\");\n\t}\n\n\t/**\n\t * Calculates the number of horizontal cards that can fit within the available width of the given DOM element.\n\t *\n\t * @private\n\t * @param {Element} domRef - The DOM element to calculate the horizontal card count for.\n\t * @returns {number} - The number of horizontal cards that can fit within the available width.\n\t */\n\tprotected getHorizontalCardCount(domRef: Element): number {\n\t\tconst domProperties = fetchElementProperties(domRef, [\"width\", \"padding-left\", \"padding-right\", \"margin-left\", \"margin-right\"]);\n\t\tconst availableWidth = Object.values(domProperties)\n\t\t\t.slice(1)\n\t\t\t.reduce((width, propertyValue) => width - propertyValue, domProperties[\"width\"]);\n\t\tconst actualCardCount = this._oData.length as number;\n\t\tconst isMobileDevice = this._controlModel.getProperty(\"/isPhone\") as boolean;\n\t\tlet horizontalCardCount;\n\t\tconst minWidth = this.getProperty(\"minCardWidth\") as number;\n\t\tconst maxWidth = this.getProperty(\"maxCardWidth\") as number;\n\t\tconst cardLayoutConfig = { containerWidth: availableWidth, totalCards: actualCardCount, minWidth: minWidth, maxWidth: maxWidth };\n\t\tconst cardWidth = calculateCardWidth(cardLayoutConfig);\n\t\tif (isMobileDevice) {\n\t\t\thorizontalCardCount = Constants.TODO_SECTION_LIMIT;\n\t\t} else {\n\t\t\thorizontalCardCount = Math.max(Math.floor(availableWidth / cardWidth), 1);\n\t\t}\n\n\t\t// Calculate Horizontal Card Count\n\t\tthis._controlModel.setProperty(\"/cardWidth\", `${cardWidth / 16}rem`);\n\t\tthis._controlModel.setProperty(\"/horizontalCardCount\", horizontalCardCount);\n\n\t\treturn horizontalCardCount;\n\t}\n\n\t/**\n\t * Calculates the number of vertical cards that can fit within the available height of the given DOM element.\n\t *\n\t * @private\n\t * @param {Element} domRef - The DOM element to calculate the vertical card count for.\n\t * @returns {number} - The number of vertical cards that can fit within the available height.\n\t */\n\tprotected getVerticalCardCount(domRef: Element): number {\n\t\tconst sectionDomProperties = fetchElementProperties(domRef, [\"padding-top\"]);\n\t\tconst parentDomProperties = fetchElementProperties(domRef.parentElement as Element, [\"height\"]);\n\t\tconst titleHeight = this.calculateTitleHeight();\n\t\tconst availableHeight = parentDomProperties.height - sectionDomProperties[\"padding-top\"] * 2 - titleHeight;\n\t\tconst margin = 14;\n\t\tconst cardHeight = Constants.DEFAULT_CARD_HEIGHT + margin;\n\t\tconst verticalCardCount = Math.max(Math.floor(availableHeight / cardHeight), 2); //minimum of 2 rows should be displayed\n\n\t\treturn verticalCardCount;\n\t}\n\n\t/**\n\t * Calculates the combined height of the title and tab header for the To-Dos panel.\n\t *\n\t * @private\n\t * @returns {number} - The combined height of the title and tab header.\n\t */\n\tprotected calculateTitleHeight(): number {\n\t\tconst container = this.getParent() as ToDosContainer;\n\t\tconst containerHeaderRef = UI5Element.getElementById(`${container.getId()}-header`)?.getDomRef();\n\t\tconst iconTabBarHeaderRef = UI5Element.getElementById(`${container._getInnerControl().getId()}--header`)?.getDomRef();\n\t\tconst defaultHeight = Constants.DEFAULT_TITLE_HEIGHT + Constants.DEFAULT_TAB_HEADER_HEIGHT;\n\t\tlet titleHeight = 0;\n\n\t\tif (containerHeaderRef && iconTabBarHeaderRef) {\n\t\t\ttitleHeight = containerHeaderRef.clientHeight + iconTabBarHeaderRef.clientHeight;\n\t\t}\n\n\t\treturn Math.max(titleHeight, defaultHeight);\n\t}\n\n\t/**\n\t * Generates a request object for batch requests.\n\t *\n\t * @private\n\t * @param {RequestOptions} options - Additional properties for generating the request object.\n\t * @param {boolean} [options.onlyCount] - Whether to include only the count in the request.\n\t * @returns {Object} The generated request object.\n\t */\n\tprivate _generateRequestObject(options: RequestOptions): Request {\n\t\tconst cardCount = this._getVisibleCardCount();\n\t\tconst urls = this.generateRequestUrls?.(cardCount);\n\n\t\tif (options?.onlyCount) {\n\t\t\turls.splice(1);\n\t\t}\n\n\t\treturn {\n\t\t\tbaseURL: this.getBaseUrl(),\n\t\t\trequestURLs: urls,\n\t\t\tsuccess: async (args: unknown[]): Promise<void> => {\n\t\t\t\t//data process extension for panels\n\t\t\t\tawait this.onDataReceived(args.splice(1), options);\n\n\t\t\t\t//set card count and handle empty cards\n\t\t\t\tthis._oData.length = Number(args[0]);\n\t\t\t\tthis._handleEmptyCards();\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Generates request URLs for fetching data based on the specified card count.\n\t *\n\t * @public\n\t * @param {number} cardCount - The number of cards to retrieve.\n\t * @returns {string[]} An array of request URLs.\n\t */\n\tpublic generateRequestUrls(cardCount: number): string[] {\n\t\tconst queryString = `$skip=0&$top=${cardCount}`;\n\t\tlet dataUrl = this.getDataUrl();\n\t\tdataUrl = dataUrl.includes(\"?\") ? `${dataUrl}&${queryString}` : `${dataUrl}?${queryString}`;\n\n\t\treturn [this.getCountUrl(), dataUrl];\n\t}\n\n\t/**\n\t * A promise that resolves when the data has been processed.\n\t * This method can be overridden to perform additional data processing operations.\n\t *\n\t * @public\n\t * @async\n\t * @param {unknown[]} results - Data retrieved from the batch call.\n\t * @param {RequestOptions} options - Additional options for parsing the data.\n\t * Structure may vary based on the backend service.\n\t */\n\tpublic async onDataReceived(results: unknown[] = [], options?: RequestOptions): Promise<void> {\n\t\tif (!options || (options && !options.onlyCount)) {\n\t\t\tthis._oData.displayTiles = this._oData.tiles = results[0] || [];\n\t\t}\n\n\t\tawait Promise.resolve();\n\t}\n\n\t/**\n\t * Handles the scenario when there are no cards to display.\n\t * Updates the illustration and description based on the selected panel and card count.\n\t *\n\t * @private\n\t */\n\tprivate _handleEmptyCards() {\n\t\tif (Number(this._oData.length) === 0) {\n\t\t\tthis._oData.illustrationType = \"sapIllus-EmptyPlanningCalendar\";\n\t\t\tthis._oData.illustrationTitle = this._isExclusivePanel()\n\t\t\t\t? this._i18nBundle.getText(\"noToDoTitle\")\n\t\t\t\t: this._i18nBundle.getText(this.getNoDataText());\n\t\t\tthis._oData.illustrationDescription = this._isExclusivePanel()\n\t\t\t\t? this._i18nBundle.getText(\"noToDoDesc\")\n\t\t\t\t: this._i18nBundle.getText(\"emptyToDoDesc\");\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the panel is exclusive based on support and the number of panels.\n\t *\n\t * @private\n\t * @returns {boolean} True if the panel is exclusive, otherwise false.\n\t */\n\tprivate _isExclusivePanel(): boolean {\n\t\tconst allPanels = (this.getParent() as ToDosContainer).getContent() as ToDoPanel[];\n\t\tconst supportedPanels = allPanels.filter((panel) => panel._getSupported());\n\n\t\treturn supportedPanels.length === 1 || (allPanels.length === 1 && this._getSupported());\n\t}\n\n\t/**\n\t * Sets the interval for refreshing the section.\n\t *\n\t * @private\n\t */\n\tprivate _setSectionRefreshInterval(): void {\n\t\tclearInterval(this._oData.refreshFn as number);\n\t\tthis._oData.refreshFn = setInterval(() => {\n\t\t\tthis._oData.lastRefreshedTime = this._oData.lastRefreshedTime || new Date();\n\t\t\tthis._oData.refreshInfo = this._toRelativeDateTime(this._oData.lastRefreshedTime as Date);\n\t\t\tthis._updateRefreshInformation();\n\t\t}, Constants.TODOS_REFRESH_INTERVAL);\n\t}\n\n\t/**\n\t * Updates the refresh information and adjusts the layout.\n\t *\n\t * @private\n\t */\n\tpublic _updateRefreshInformation(): void {\n\t\tconst container = this.getParent() as ToDosContainer;\n\t\tif (container.getProperty(\"selectedKey\") === this.getProperty(\"key\")) {\n\t\t\tthis._refreshBtn.setProperty(\"text\", this._oData.refreshInfo, true);\n\t\t\tcontainer._updateContainerHeader(this);\n\t\t}\n\n\t\tthis._adjustLayout();\n\t}\n\n\t/**\n\t * Adjusts the layout based on card count and device type.\n\t *\n\t * @private\n\t */\n\tpublic _adjustLayout() {\n\t\t// Update visible cards\n\t\tconst cardCount = this._getVisibleCardCount();\n\t\tif ((this._oData.tiles as object[]).length && !this._oData.hasError) {\n\t\t\tconst displayCards = (this._oData.tiles as object[]).slice(0, cardCount);\n\t\t\tthis._controlModel.setProperty(\"/displayTiles\", displayCards);\n\t\t}\n\n\t\t// Update if device type is phone\n\t\tthis._controlModel.setProperty(\"/isPhone\", this.getDeviceType() === DeviceType.Mobile);\n\n\t\t// Show/Hide Full Screen Button if available\n\t\t(this.getParent() as ToDosContainer)?.toggleFullScreenElements(\n\t\t\tthis,\n\t\t\tthis._isElementExpanded() || Number(this._oData.length) > cardCount\n\t\t);\n\t}\n\n\t/**\n\t * Formats the given date to a relative date.\n\t *\n\t * @private\n\t * @param {Date} date Date object or Date String\n\t * @returns {string} Formatted Date\n\t */\n\tpublic _toRelativeDateTime(date: Date): string {\n\t\tconst inputDate = new Date(date);\n\t\treturn isNaN(Number(inputDate)) ? \"\" : ToDoPanel.relativeDateFormatter.format(inputDate);\n\t}\n\n\t/**\n\t * Get the text for the \"No Data\" message.\n\t *\n\t * @public\n\t * @returns {string} The text for the \"No Data\" message.\n\t */\n\tpublic getNoDataText(): string {\n\t\treturn this._i18nBundle.getText(\"noData\") as string;\n\t}\n\n\t/**\n\t * Parses the response object and returns the appropriate value.\n\t *\n\t * @private\n\t * @param {Object} response - The response object.\n\t * @param {Object} [response.d] - The 'd' property of the response object.\n\t * @param {Array} [response.d.results] - The results array.\n\t * @param {string|number} [response.d] - The 'd' property of the response object which may contain a numeric value.\n\t * @param {string|number} [response] - The response object which may contain a numeric value.\n\t * @param {string|number} [response.value] - The 'value' property of the response object which may contain a numeric value.\n\t * @returns {Response} - The parsed value extracted from the response object.\n\t */\n\tprivate _parseResponse(response: Response): Response {\n\t\tconst { d = {}, value } = response || {};\n\t\tconst results = d?.results;\n\t\tconst numericD = !isNaN(+d) && +d;\n\t\tconst numericResponse = !isNaN(+response) && +response;\n\n\t\treturn (results || numericD || numericResponse || value || 0) as Response;\n\t}\n\n\t/**\n\t * Submits a batch request for multiple URLs and processes the responses.\n\t *\n\t * @private\n\t * @returns {Promise} A Promise that resolves when all batch requests are completed.\n\t */\n\tprotected _submitBatch(): Promise<unknown[]> {\n\t\treturn Promise.all(\n\t\t\tthis.requests.map(async (request: Request) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst responses = await this.batchHelper.createMultipartRequest(request.baseURL, request.requestURLs);\n\n\t\t\t\t\tif (responses.length) {\n\t\t\t\t\t\tconst processedResponses = responses.map((response: string | Response) => {\n\t\t\t\t\t\t\tif (typeof response === \"string\") {\n\t\t\t\t\t\t\t\tresponse = JSON.parse(response) as Response;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn this._parseResponse(response);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Call success callback, if any\n\t\t\t\t\t\tif (request.success && typeof request.success === \"function\") {\n\t\t\t\t\t\t\tawait request.success(processedResponses);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn processedResponses;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(\"Invalid response\");\n\t\t\t\t\t}\n\t\t\t\t} catch (error: unknown) {\n\t\t\t\t\tthis._handleError(error);\n\t\t\t\t} finally {\n\t\t\t\t\tthis._clearRequests();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Handles errors by updating the data and logging the error.\n\t *\n\t * @private\n\t * @param {Error} error - The error object to handle.\n\t */\n\tprivate _handleError(error: unknown) {\n\t\tthis._oData.displayTiles = this._oData.tiles = [];\n\t\tthis._oData.getSupported = this._oData.isLoaded = this._oData.hasError = true;\n\t\tthis._oData.illustrationType = \"sapIllus-UnableToLoad\";\n\t\tthis._oData.illustrationTitle = this._oData.illustrationDescription = \"\";\n\n\t\tLog.error(error as string);\n\t\tthis._controlModel.refresh();\n\t}\n\n\t/**\n\t * Clears the list of requests.\n\t *\n\t * @private\n\t */\n\tprotected _clearRequests() {\n\t\tthis.requests = [];\n\t}\n\n\t/**\n\t * Checks if the panel is loaded.\n\t *\n\t * @private\n\t * @returns {boolean} true if the panel is loaded, false otherwise.\n\t */\n\tpublic _isLoaded(): boolean {\n\t\tconst parentContainer = this.getParent() as ToDosContainer;\n\t\tconst isContainerExpanded = parentContainer?._getLayout()?.getProperty(\"expanded\") as boolean;\n\n\t\tconst { isLoaded, isExpandedOnce } = this._oData;\n\n\t\tif (!isContainerExpanded) {\n\t\t\treturn isLoaded as boolean;\n\t\t}\n\n\t\treturn (isExpandedOnce && isLoaded) as boolean;\n\t}\n\n\t/**\n\t * Set the loaded status of the ToDoPanel.\n\t *\n\t * @private\n\t * @param {boolean} isLoaded - The new loaded status to set for the ToDoPanel.\n\t */\n\tpublic _setLoaded(isLoaded: boolean): void {\n\t\tthis._oData.isLoaded = isLoaded;\n\t}\n\n\t/**\n\t * Gets the supported status of the panel.\n\t *\n\t * @private\n\t * @returns {boolean} The supported status of the panel.\n\t */\n\tpublic _getSupported(): boolean {\n\t\treturn this._oData.getSupported as boolean;\n\t}\n\n\t/**\n\t * Sets the supported status of the panel.\n\t *\n\t * @private\n\t * @param {boolean} value - The value to set for supported status.\n\t */\n\tpublic _setSupported(isSupported: boolean): void {\n\t\tthis._oData.getSupported = isSupported;\n\t}\n\n\t/**\n\t * Extracts the app intent from the target app URL.\n\t *\n\t * @private\n\t * @returns {Intent | null} The app intent object with target and parameters, or null if not found.\n\t */\n\tpublic _getAppIntent(): Intent | null {\n\t\tconst pattern = /#([^?-]+)-([^?#]+)(?:\\?([^#]+))?(?:#.*)?/;\n\t\tconst match = this.getTargetAppUrl().match(pattern);\n\n\t\tif (match) {\n\t\t\tconst target = {\n\t\t\t\tsemanticObject: match[1],\n\t\t\t\taction: match[2]\n\t\t\t};\n\t\t\tconst params = {} as Record<string, string>;\n\n\t\t\tif (match[3]) {\n\t\t\t\tconst paramsArray = match[3].split(\"&\");\n\t\t\t\tfor (const param of paramsArray) {\n\t\t\t\t\tconst [key, value] = param.split(\"=\");\n\t\t\t\t\tparams[key] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttarget,\n\t\t\t\tparams\n\t\t\t};\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Switch to available tab if current panel has empty cards or has error\n\t *\n\t * @private\n\t * @async\n\t */\n\tprivate async _switchTabIfRequired() {\n\t\tconst container = this.getParent() as ToDosContainer;\n\t\tconst selectedKey = container?.getProperty(\"selectedKey\") as string;\n\n\t\tif (selectedKey === this.getProperty(\"key\") && (this._oData.length === 0 || this._oData.hasError)) {\n\t\t\tlet nextAvailablePanel;\n\t\t\tconst panels = container?.getAggregation(\"content\") as ToDoPanel[];\n\n\t\t\tfor (const panel of panels) {\n\t\t\t\tif (panel !== this) {\n\t\t\t\t\t//ensure that panel is loaded first\n\t\t\t\t\tawait panel._loadCards();\n\n\t\t\t\t\tif (panel._getSupported() && !panel._isLoaded() && panel._getCardCount() > 0) {\n\t\t\t\t\t\tnextAvailablePanel = panel;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (nextAvailablePanel) {\n\t\t\t\tcontainer?.setProperty(\"selectedKey\", nextAvailablePanel.getProperty(\"key\"));\n\t\t\t\tToDosContainer.cardCount = this._cardCount;\n\t\t\t\tawait nextAvailablePanel._loadCards(true);\n\t\t\t\tToDosContainer.cardCount = undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles the press event to view all items.\n\t *\n\t * @private\n\t */\n\tpublic _onPressViewAll() {\n\t\tURLHelper.redirect(this.getTargetAppUrl(), false);\n\t}\n\n\t/**\n\t * Retrieves the count of cards in the panel.\n\t *\n\t * @private\n\t * @returns {number} The number of cards.\n\t */\n\tpublic _getCardCount(): number {\n\t\treturn Number(this._oData.length);\n\t}\n\n\t/**\n\t * Handles actions to be performed before the To-Dos panel is expanded.\n\t * If the panel has not been expanded before in full screen, the cards will be loaded once.\n\t *\n\t * @private\n\t */\n\tprivate async _beforePanelExpand() {\n\t\tif (!this._oData.isExpandedOnce) {\n\t\t\tthis._oData.isExpandedOnce = true;\n\t\t\tawait this._loadCards(true);\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}