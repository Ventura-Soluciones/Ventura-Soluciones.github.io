{"version":3,"file":"PagosMasivosManager-dbg.js","names":["PagosMasivosManager","constructor","oOriginalModel","JSONModel","oFilteredModel","initializeModels","console","log","planillasUrl","loadData","undefined","getData","error","loadFallbackData","sortPlanillasByDocEntry","setData","getFilteredModel","getOriginalModel","data","PlanillasCollection","Array","isArray","sort","a","b","docEntryA","parseInt","DocEntry","docEntryB","fallbackData","onDateRangeChange","oEvent","getParameter","applyFilters","onStatusChange","onBancoChange","onClearFilters","dateRangeFilter","getControlById","setValue","statusFilter","setSelectedKey","bancoFilter","MessageToast","show","duration","onNuevaPlanillaButtonPress","createNewPlanilla","navigateToDetailPage","newDocEntry","generateNewDocEntry","newPlanillaData","Date","getMonth","toISOString","split","toTimeString","oModelPlanilla","oView","getController","getView","setModel","loadSeriesData","now","timestamp","getTime","Math","floor","onSerieChange","getParameters","selectedItem","selectedKey","getKey","newValue","key","planillaModel","getModel","getProperty","setProperty","refresh","onGuardarPlanilla","planillaData","isNewPlanilla","createPlanillaInMockDatabase","updatePlanillaInMockDatabase","newPlanilla","planillaDetailUrl","fetch","then","response","json","planillaToSave","planillas","push","simulateServerCreate","navigateBackToList","catch","MessageBox","updatedPlanilla","planillaIndex","findIndex","item","simplifiedData","U_SERIE","U_FECHAP","U_NOPBAN","simulateServerUpdate","information","JSON","stringify","title","details","onFechaEjecucionChange","selectedDate","datePicker","getSource","originalValue","preventDefault","dateStr","dateParts","length","day","monthStr","toLowerCase","year","monthMap","month","isNaN","date","tiposCambioUrl","exchangeRate","ExchangeRates","find","rate","Currency","startsWith","Rate","formattedOriginalValue","originalDate","toLocaleDateString","message","onDownloadPlanilla","oModel","jsonData","substring","blob","Blob","type","size","url","URL","createObjectURL","link","document","createElement","href","download","Id","style","display","body","appendChild","click","setTimeout","removeChild","revokeObjectURL","newWindow","window","open","write","fallbackError","onListItemPress","oItem","oContext","getBindingContext","getObject","list","items","getItems","i","model","handlePlanillaSelection","oPlanilla","planillaId","loadPlanillaById","oComponent","getOwnerComponent","oRouter","getRouter","navTo","oDetailModel","oData","planillaIdNum","planilla","VS_PMP1Collection","forEach","line","index","LineId","DocNum","NumAtCard","CardCode","CardName","DocDate","DocDueDate","TaxDate","TaxCode","TaxAmount","TaxAmountFC","DocTotal","DocTotalFC","WithholdingTax","loadFallbackPlanillaData","seriesUrl","status","oModelSeries","aFilters","getValue","dateRangeValue","includes","startDateStr","endDateStr","startDate","path","operator","value","endDate","getSelectedKey","originalData","filteredData","filterData","filters","filteredItems","filter","every","filterValue","itemDate","controlId","setController","controller","control","byId","onAddDocumentos","loadAvailableDocuments","dialog","documentsUrl","currentLines","U_NUMDOC","U_IDSN","documents","slice","doc","selected","alreadyInPlanilla","isAlreadyAdded","some","matches","modelData","selectedTotal","selectedCount","existingCount","oModelDocuments","onDocumentSearch","searchTerm","documentsModel","filteredDocuments","onDocumentBankFilterChange","selectedBank","BankCode","onDocumentSelectionChange","table","selectedItems","getSelectedItems","context","selectedDocuments","reduce","sum","Balance","selectedButExisting","onDocumentDialogCancel","close","onDocumentDialogConfirm","validDocuments","isAlreadyInPlanilla","duplicateCount","addDocumentsToPlanilla","newLines","map","lineId","DueDate","Total","U_NMSN","U_FDOCU","U_FVENC","U_IMPORTE","U_SALDO","U_RETLOC","U_PAGLOC0","U_CTAINF","U_CCORRI","AccountCode","U_MONINF","updatedLines","recalculatePlanillaTotals","lines","total","reten","subtotal","U_TOTAL","U_RETEN","U_SUBTOTAL","__exports","__esModule"],"sources":["PagosMasivosManager.ts"],"sourcesContent":["import JSONModel from \"sap/ui/model/json/JSONModel\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport type UIComponent from \"sap/ui/core/UIComponent\";\n\n/**\n * PagosMasivosManager - Handles all PagosMasivos-related logic\n */\nexport class PagosMasivosManager {\n    private oOriginalModel: JSONModel;\n    private oFilteredModel: JSONModel;\n    private controller: any;\n\n    constructor() {\n        this.oOriginalModel = new JSONModel();\n        this.oFilteredModel = new JSONModel();\n    }\n\n    public initializeModels(): void {\n        console.log(\"PagosMasivosManager - Initializing models...\");\n        // Cargar datos originales\n        const planillasUrl = \"./model/mock/planillas.json\";\n        \n        try {\n            this.oOriginalModel.loadData(planillasUrl, undefined, false);\n            console.log(\"PagosMasivosManager - Data loaded from URL:\", this.oOriginalModel.getData());\n        } catch (error) {\n            console.log(\"PagosMasivosManager - Error loading data, using fallback:\", error);\n            this.loadFallbackData();\n            return;\n        }\n\n        // Ordenar los datos por DocEntry descendente\n        this.sortPlanillasByDocEntry();\n\n        // Crear modelo filtrado\n        this.oFilteredModel.setData(this.oOriginalModel.getData());\n        console.log(\"PagosMasivosManager - Filtered model data:\", this.oFilteredModel.getData());\n    }\n\n    public getFilteredModel(): JSONModel {\n        return this.oFilteredModel;\n    }\n\n    public getOriginalModel(): JSONModel {\n        return this.oOriginalModel;\n    }\n\n    private sortPlanillasByDocEntry(): void {\n        const data = this.oOriginalModel.getData();\n        if (data && data.PlanillasCollection && Array.isArray(data.PlanillasCollection)) {\n            // Ordenar por DocEntry descendente\n            data.PlanillasCollection.sort((a: any, b: any) => {\n                const docEntryA = parseInt(a.DocEntry) || 0;\n                const docEntryB = parseInt(b.DocEntry) || 0;\n                return docEntryB - docEntryA; // Descendente (mayor a menor)\n            });\n            \n            // Actualizar el modelo con los datos ordenados\n            this.oOriginalModel.setData(data);\n            console.log(\"PagosMasivosManager - Planillas ordenadas por DocEntry descendente\");\n        }\n    }\n\n    private loadFallbackData(): void {\n        const fallbackData = {\n            \"PlanillasCollection\": [\n                {\n                    \"Id\": \"HT-1000\",\n                    \"Name\": \"Planilla Pago Proveedor 10003\",\n                    \"DateOfSale\": \"2025-03-26\",\n                    \"Status\": \"Ejecutada\",\n                    \"Quantity\": 10,\n                    \"Price\": 1000.34,\n                    \"CurrencyCode\": \"SOL\",\n                    \"Bank\": \"BCP\"\n                },\n                {\n                    \"Id\": \"HT-1001\",\n                    \"Name\": \"Planilla Pago Proveedor 10004\",\n                    \"DateOfSale\": \"2024-04-17\",\n                    \"Status\": \"Creada\",\n                    \"Quantity\": 20,\n                    \"Price\": 1249,\n                    \"CurrencyCode\": \"USD\",\n                    \"Bank\": \"BBVA\"\n                },\n                {\n                    \"Id\": \"HT-1003\",\n                    \"Name\": \"Planilla Pago Proveedor 10005\",\n                    \"DateOfSale\": \"2024-04-09\",\n                    \"Status\": \"Anulada\",\n                    \"Quantity\": 15,\n                    \"Price\": 1650,\n                    \"CurrencyCode\": \"SOL\",\n                    \"Bank\": \"Interbank\"\n                },\n                {\n                    \"Id\": \"HT-1007\",\n                    \"Name\": \"Planilla Pago Proveedor 10006\",\n                    \"DateOfSale\": \"2024-05-17\",\n                    \"Status\": \"Creada\",\n                    \"Quantity\": 15,\n                    \"Price\": 299,\n                    \"CurrencyCode\": \"USD\",\n                    \"Bank\": \"Scotiabank\"\n                },\n                {\n                    \"Id\": \"HT-1010\",\n                    \"Name\": \"Planilla Pago Proveedor 10007\",\n                    \"DateOfSale\": \"2024-02-22\",\n                    \"Status\": \"Ejecutada\",\n                    \"Quantity\": 16,\n                    \"Price\": 1999,\n                    \"CurrencyCode\": \"SOL\",\n                    \"Bank\": \"BCP\"\n                },\n                {\n                    \"Id\": \"HT-1011\",\n                    \"Name\": \"Planilla Pago Proveedor 10008\",\n                    \"DateOfSale\": \"2024-03-15\",\n                    \"Status\": \"Creada\",\n                    \"Quantity\": 12,\n                    \"Price\": 850,\n                    \"CurrencyCode\": \"SOL\",\n                    \"Bank\": \"BBVA\"\n                },\n                {\n                    \"Id\": \"HT-1012\",\n                    \"Name\": \"Planilla Pago Proveedor 10009\",\n                    \"DateOfSale\": \"2024-06-10\",\n                    \"Status\": \"Ejecutada\",\n                    \"Quantity\": 8,\n                    \"Price\": 1200,\n                    \"CurrencyCode\": \"USD\",\n                    \"Bank\": \"Interbank\"\n                },\n                {\n                    \"Id\": \"HT-1013\",\n                    \"Name\": \"Planilla Pago Proveedor 10010\",\n                    \"DateOfSale\": \"2024-07-22\",\n                    \"Status\": \"Anulada\",\n                    \"Quantity\": 25,\n                    \"Price\": 2100,\n                    \"CurrencyCode\": \"SOL\",\n                    \"Bank\": \"Scotiabank\"\n                },\n                {\n                    \"Id\": \"HT-1014\",\n                    \"Name\": \"Planilla Pago Proveedor 10011\",\n                    \"DateOfSale\": \"2024-08-05\",\n                    \"Status\": \"Creada\",\n                    \"Quantity\": 18,\n                    \"Price\": 950,\n                    \"CurrencyCode\": \"BCP\",\n                    \"Bank\": \"BCP\"\n                },\n                {\n                    \"Id\": \"HT-1015\",\n                    \"Name\": \"Planilla Pago Proveedor 10012\",\n                    \"DateOfSale\": \"2024-09-12\",\n                    \"Status\": \"Ejecutada\",\n                    \"Quantity\": 22,\n                    \"Price\": 1750,\n                    \"CurrencyCode\": \"USD\",\n                    \"Bank\": \"BBVA\"\n                }\n            ]\n        };\n        \n        this.oOriginalModel.setData(fallbackData);\n        this.oFilteredModel.setData(fallbackData);\n    }\n\n    // Manejadores de eventos para PagosMasivos\n    public onDateRangeChange(oEvent: any): void {\n        console.log(\"PagosMasivos - Rango de fechas cambiado:\", oEvent.getParameter(\"value\"));\n        this.applyFilters();\n    }\n\n    public onStatusChange(oEvent: any): void {\n        this.applyFilters();\n    }\n\n    public onBancoChange(oEvent: any): void {\n        this.applyFilters();\n    }\n\n    public onClearFilters(): void {\n        // Limpiar filtro de rango de fechas\n        const dateRangeFilter = this.getControlById(\"pagosMasivosDateRangeFilter\");\n        if (dateRangeFilter) {\n            dateRangeFilter.setValue(\"\");\n        }\n        \n        // Limpiar filtro de estado\n        const statusFilter = this.getControlById(\"pagosMasivosStatusFilter\");\n        if (statusFilter) {\n            statusFilter.setSelectedKey(\"\");\n        }\n\n        // Limpiar filtro de banco\n        const bancoFilter = this.getControlById(\"pagosMasivosBancoFilter\");\n        if (bancoFilter) {\n            bancoFilter.setSelectedKey(\"\");\n        }\n\n        // Restablecer datos originales\n        this.oFilteredModel.setData(this.oOriginalModel.getData());\n        \n        MessageToast.show(\"Filtros limpiados desde Pagos Masivos Controller\", { duration: 2000 });\n    }\n\n    public onNuevaPlanillaButtonPress(): void {\n        console.log(\"PagosMasivosManager - onNuevaPlanillaButtonPress triggered!\");\n        \n        // Crear una nueva planilla con datos por defecto\n        this.createNewPlanilla();\n        \n        // Navegar a la página de detalle en modo creación\n        this.navigateToDetailPage();\n    }\n\n    public createNewPlanilla(): void {\n        console.log(\"PagosMasivosManager - Creating new planilla...\");\n        \n        // Generar un nuevo DocEntry (en un entorno real, esto vendría del backend)\n        const newDocEntry = this.generateNewDocEntry();\n        \n\n        \n        // Crear datos de planilla por defecto\n        const newPlanillaData = {\n            \"DocEntry\": newDocEntry,\n            \"DocNum\": newDocEntry,\n            \"Period\": new Date().getMonth() + 1,\n            \"Instance\": 0,\n            \"Series\": -1,\n            \"Handwrtten\": \"N\",\n            \"Status\": \"O\",\n            \"RequestStatus\": \"W\",\n            \"Creator\": \"manager\",\n            \"Remark\": null,\n            \"Canceled\": \"N\",\n            \"Object\": \"VS_OPMP\",\n            \"LogInst\": null,\n            \"UserSign\": 1,\n            \"Transfered\": \"N\",\n            \"CreateDate\": new Date().toISOString().split('T')[0] + \"T00:00:00Z\",\n            \"CreateTime\": new Date().toTimeString().split(' ')[0],\n            \"UpdateDate\": new Date().toISOString().split('T')[0] + \"T00:00:00Z\",\n            \"UpdateTime\": new Date().toTimeString().split(' ')[0],\n            \"DataSource\": \"I\",\n            \"U_CUENTA\": null,\n            \"U_IDBANCO\": null,\n            \"U_NMBANCO\": null,\n            \"U_CCBANCO\": null,\n            \"U_MONEDA\": null,\n            \"U_GLACCOUNT\": null,\n            \"U_SERIE\": null,\n            \"U_ESTADO\": \"C\", // Creada\n            \"U_FECHA\": new Date().toISOString().split('T')[0] + \"T00:00:00Z\",\n            \"U_FECHAP\": null,\n            \"U_TC\": null,\n            \"U_RETEN\": null,\n            \"U_FECHAV\": null,\n            \"U_IDSN\": null,\n            \"U_NMSN\": null,\n            \"U_GLOSA\": \"Nueva planilla de pagos masivos\",\n            \"U_TOTAL\": 0.0,\n            \"U_IDPAGO\": null,\n            \"U_SUBTOTAL\": 0.0,\n            \"U_REF\": null,\n            \"U_NOPBAN\": null,\n            \"U_IDSUC\": null,\n            \"U_NMSUC\": null,\n            \"U_FCAJA\": -1,\n            \"U_CONTA\": 0,\n            \"VS_PMP1Collection\": [],\n            \"isNewPlanilla\": true // Indicador para identificar que es una nueva planilla\n        };\n        \n        console.log(\"PagosMasivosManager - New planilla data created:\", newPlanillaData);\n        \n        // Crear modelo para la nueva planilla\n        const oModelPlanilla = new JSONModel();\n        oModelPlanilla.setData(newPlanillaData);\n        \n        // Asignar el modelo a la vista\n        const oView = this.getController().getView();\n        if (oView) {\n            oView.setModel(oModelPlanilla, \"planilla\");\n            console.log(\"PagosMasivosManager - New planilla model assigned to view\");\n            \n            // Cargar las series para el ComboBox\n            this.loadSeriesData();\n        }\n    }\n\n    private generateNewDocEntry(): number {\n        // En un entorno real, esto vendría del backend\n        // Por ahora, generamos un número basado en la fecha actual\n        const now = new Date();\n        const timestamp = now.getTime();\n        return Math.floor(timestamp / 1000) % 10000; // Número de 4 dígitos\n    }\n\n    public onSerieChange(oEvent: any): void {\n        console.log(\"PagosMasivosManager - onSerieChange triggered\");\n        console.log(\"PagosMasivosManager - Event parameters:\", oEvent.getParameters());\n        \n        const selectedItem = oEvent.getParameter(\"selectedItem\");\n        const selectedKey = oEvent.getParameter(\"selectedItem\")?.getKey();\n        const newValue = oEvent.getParameter(\"newValue\");\n        \n        console.log(\"PagosMasivosManager - Selected item:\", selectedItem);\n        console.log(\"PagosMasivosManager - Selected key:\", selectedKey);\n        console.log(\"PagosMasivosManager - New value:\", newValue);\n        \n        if (!selectedItem) {\n            console.log(\"No se seleccionó ningún item\");\n            return;\n        }\n        \n        const key = selectedItem.getKey();\n        console.log(\"PagosMasivosManager - Serie seleccionada (key):\", key);\n        \n        // Actualizar el modelo con la serie seleccionada\n        const planillaModel = this.getController().getView().getModel(\"planilla\");\n        if (planillaModel) {\n            console.log(\"PagosMasivosManager - Current U_SERIE value:\", planillaModel.getProperty(\"/U_SERIE\"));\n            planillaModel.setProperty(\"/U_SERIE\", key);\n            console.log(\"PagosMasivosManager - Updated U_SERIE value:\", planillaModel.getProperty(\"/U_SERIE\"));\n            \n            // Forzar la actualización del modelo\n            planillaModel.refresh(true);\n        } else {\n            console.error(\"PagosMasivosManager - Planilla model not found\");\n        }\n    }\n\n    public onGuardarPlanilla(): void {\n        console.log(\"PagosMasivosManager - Guardando planilla...\");\n        \n        const oView = this.getController().getView();\n        if (!oView) {\n            console.error(\"View not found\");\n            return;\n        }\n\n        const planillaModel = oView.getModel(\"planilla\");\n        if (!planillaModel) {\n            console.error(\"Planilla model not found\");\n            return;\n        }\n\n        const planillaData = planillaModel.getData();\n        console.log(\"Datos de la planilla a guardar:\", planillaData);\n\n        // Verificar si es una nueva planilla\n        if (planillaData.isNewPlanilla) {\n            this.createPlanillaInMockDatabase(planillaData);\n        } else {\n            this.updatePlanillaInMockDatabase(planillaData);\n        }\n    }\n\n    private createPlanillaInMockDatabase(newPlanilla: any): void {\n        // Cargar el archivo JSON actual\n        const planillaDetailUrl = \"./model/mock/planilla-object.json\";\n        \n        fetch(planillaDetailUrl)\n            .then(response => response.json())\n            .then(data => {\n                // Remover el indicador isNewPlanilla\n                const { isNewPlanilla, ...planillaToSave } = newPlanilla;\n                \n                // Agregar la nueva planilla al array\n                data.planillas.push(planillaToSave);\n                \n                console.log(\"Nueva planilla agregada al mock database:\", planillaToSave);\n\n                // Simular envío al servidor\n                this.simulateServerCreate(planillaToSave);\n\n                // Mostrar mensaje de éxito\n                MessageToast.show(\"Planilla creada exitosamente\", { duration: 3000 });\n                \n                // Navegar de vuelta a la lista\n                this.navigateBackToList();\n            })\n            .catch(error => {\n                console.error(\"Error al crear la planilla:\", error);\n                MessageBox.error(\"Error al crear la planilla\");\n            });\n    }\n\n    private updatePlanillaInMockDatabase(updatedPlanilla: any): void {\n        // Cargar el archivo JSON actual\n        const planillaDetailUrl = \"./model/mock/planilla-object.json\";\n        \n        fetch(planillaDetailUrl)\n            .then(response => response.json())\n            .then(data => {\n                // Buscar la planilla por DocEntry\n                const planillas = data.planillas || [];\n                const planillaIndex = planillas.findIndex((item: any) => \n                    item.DocEntry === updatedPlanilla.DocEntry\n                );\n\n                console.log(\"Planilla index:\", planillaIndex);\n\n                if (planillaIndex !== -1) {\n                    // Actualizar la planilla existente\n                    planillas[planillaIndex] = {\n                        ...planillas[planillaIndex],\n                        ...updatedPlanilla,\n                        \"UpdateDate\": new Date().toISOString().split('T')[0] + \"T00:00:00Z\",\n                        \"UpdateTime\": new Date().toTimeString().split(' ')[0]\n                    };\n\n                    console.log(\"Planilla actualizada en el mock database:\", planillas[planillaIndex]);\n\n                    // Simular envío al servidor (en un entorno real, esto será una llamada API al backend) \n                    // solo enviamos la data necesaria para evitar sobrecarga de datos\n                    const simplifiedData = {\n                        \"DocEntry\": planillas[planillaIndex].DocEntry,\n                        \"U_SERIE\": planillas[planillaIndex].U_SERIE,\n                        \"U_FECHAP\": planillas[planillaIndex].U_FECHAP,\n                        \"U_NOPBAN\": planillas[planillaIndex].U_NOPBAN\n                    }\n\n                    this.simulateServerUpdate(simplifiedData);\n\n                    // Mostrar mensaje de éxito\n                    MessageToast.show(\"Planilla guardada exitosamente\", { duration: 3000 });\n                } else {\n                    console.error(\"Planilla no encontrada en el mock database\");\n                    MessageBox.error(\"Error: No se pudo encontrar la planilla para actualizar\");\n                }\n            })\n            .catch(error => {\n                console.error(\"Error al cargar el mock database:\", error);\n                MessageBox.error(\"Error al cargar los datos de la planilla\");\n            });\n    }\n\n    private simulateServerUpdate(data: any): void {\n        // En un entorno real, aquí haríamos una llamada API como:\n        // fetch('/api/planillas', {\n        //     method: 'PUT', PUT PARA ACTUALIZAR LÍNEAS EN CASO SE HAYA MODIFICADO LA CANTIDAD DE LÍNEAS\n        //     headers: { 'Content-Type': 'application/json' },\n        //     body: JSON.stringify(data)\n        // });\n\n        // Mostrar el payload en un MessageBox para texto más largo\n        MessageBox.information(\"Backend POST/EjecutarPlanilla - Payload: \" + JSON.stringify(data, null, 2), {\n            title: \"Datos enviados al backend\",\n            details: \"Esta información se enviaría al servidor en un entorno real\"\n        });\n\n        console.log(\"Simulando actualización en el servidor...\");\n        console.log(\"Datos que se enviarían al servidor:\", data);\n\n    }\n\n    private simulateServerCreate(data: any): void {\n        // En un entorno real, aquí haríamos una llamada API como:\n        // fetch('/api/planillas', {\n        //     method: 'POST',\n        //     headers: { 'Content-Type': 'application/json' },\n        //     body: JSON.stringify(data)\n        // });\n\n        // Mostrar el payload en un MessageBox para texto más largo\n        MessageBox.information(\"Backend POST/CrearPlanilla - Payload: \" + JSON.stringify(data, null, 2), {\n            title: \"Datos enviados al backend\",\n            details: \"Esta información se enviaría al servidor en un entorno real\"\n        });\n\n        console.log(\"Simulando creación en el servidor...\");\n        console.log(\"Datos que se enviarían al servidor:\", data);\n    }\n\n    public onFechaEjecucionChange(oEvent: any): void {\n        const selectedDate = oEvent.getParameter(\"value\");\n        console.log(\"Fecha de ejecución seleccionada:\", selectedDate);\n        \n        if (!selectedDate) {\n            return;\n        }\n\n        // Obtener el valor original antes del cambio\n        const datePicker = oEvent.getSource();\n        const originalValue = this.getController().getView().getModel(\"planilla\").getProperty(\"/U_FECHAP\");\n        console.log(\"Valor original de la fecha:\", originalValue);\n\n        // Prevenir que el modelo se actualice automáticamente\n        oEvent.preventDefault();\n\n        // Formatear la fecha para buscar en el JSON\n        let dateStr: string;\n        if (selectedDate instanceof Date) {\n            dateStr = selectedDate.toISOString().split('T')[0]; // Obtener solo la parte de la fecha (YYYY-MM-DD)\n        } else if (typeof selectedDate === 'string') {\n            // Si es un string, necesitamos convertir el formato localizado a ISO\n            try {\n                // Parsear el formato \"7 ago 2025\" manualmente\n                const dateParts = selectedDate.split(' ');\n                if (dateParts.length === 3) {\n                    const day = parseInt(dateParts[0]);\n                    const monthStr = dateParts[1].toLowerCase();\n                    const year = parseInt(dateParts[2]);\n                    \n                    // Mapeo de meses en español\n                    const monthMap: { [key: string]: number } = {\n                        'ene': 0, 'feb': 1, 'mar': 2, 'abr': 3, 'may': 4, 'jun': 5,\n                        'jul': 6, 'ago': 7, 'sep': 8, 'oct': 9, 'nov': 10, 'dic': 11\n                    };\n                    \n                    const month = monthMap[monthStr];\n                    if (month !== undefined && !isNaN(day) && !isNaN(year)) {\n                        const date = new Date(year, month, day);\n                        dateStr = date.toISOString().split('T')[0]; // Convertir a formato YYYY-MM-DD\n                    } else {\n                        console.error(\"No se pudo parsear la fecha:\", selectedDate);\n                        return;\n                    }\n                } else {\n                    // Intentar con el constructor de Date como fallback\n                    const date = new Date(selectedDate);\n                    if (isNaN(date.getTime())) {\n                        console.error(\"No se pudo parsear la fecha:\", selectedDate);\n                        return;\n                    }\n                    dateStr = date.toISOString().split('T')[0]; // Convertir a formato YYYY-MM-DD\n                }\n            } catch (error) {\n                console.error(\"Error al convertir la fecha:\", error);\n                return;\n            }\n        } else {\n            console.error(\"Formato de fecha no válido:\", selectedDate);\n            return;\n        }\n        \n        // Cargar los tipos de cambio\n        const tiposCambioUrl = \"./model/mock/tipos-cambio.json\";\n        \n        fetch(tiposCambioUrl)\n            .then(response => response.json())\n            .then(data => {\n                // Buscar el tipo de cambio para USD en la fecha seleccionada\n                \n                console.log(\"PagosMasivosManager - Fecha:\", dateStr);\n                const exchangeRate = data.ExchangeRates.find((rate: any) => \n                    rate.Currency === \"USD\" && \n                    rate.Date.startsWith(dateStr)\n                );\n                \n                if (exchangeRate) {\n                    // Actualizar el campo de tipo de cambio y la fecha\n                    const planillaModel = this.getController().getView().getModel(\"planilla\");\n                    if (planillaModel) {\n                        planillaModel.setProperty(\"/U_TC\", exchangeRate.Rate);\n                        planillaModel.setProperty(\"/U_FECHAP\", selectedDate);\n                        MessageToast.show(`Tipo de cambio USD actualizado: ${exchangeRate.Rate}`, { duration: 2000 });\n                    }\n                } else {\n                    // No se encontró tipo de cambio, mantener la fecha original\n                    console.log(\"No se encontró tipo de cambio para la fecha:\", dateStr);\n                    \n                    // Revertir el DatePicker a su valor original\n                    let formattedOriginalValue = originalValue;\n                    if (originalValue && typeof originalValue === 'string') {\n                        try {\n                            const originalDate = new Date(originalValue);\n                            if (!isNaN(originalDate.getTime())) {\n                                // Formatear en el formato esperado por el DatePicker (dd MMM yyyy)\n                                formattedOriginalValue = originalDate.toLocaleDateString('es-ES', {\n                                    day: '2-digit',\n                                    month: 'short',\n                                    year: 'numeric'\n                                });\n                            }\n                        } catch (error) {\n                            console.error(\"Error al formatear la fecha original:\", error);\n                        }\n                    }\n                    \n                    datePicker.setValue(formattedOriginalValue);\n                    \n                    // Mostrar mensaje de error\n                    MessageBox.error(`No existe tipo de cambio para la fecha ${dateStr}`, {\n                        title: \"Error de Tipo de Cambio\",\n                        details: \"Por favor seleccione otra fecha\"\n                    });\n                }\n            })\n            .catch(error => {\n                console.error(\"Error cargando tipos de cambio:\", error);\n                MessageBox.error(\"Error al cargar los tipos de cambio\", {\n                    title: \"Error\",\n                    details: error.message\n                });\n            });\n    }\n\n    public onDownloadPlanilla(): void {\n        console.log(\"onDownloadPlanilla called from PagosMasivosManager!\");\n        \n        const oView = this.getController().getView();\n        if (!oView) {\n            console.error(\"PagosMasivosManager - No view found\");\n            MessageToast.show(\"Error: No se pudo acceder a la vista\", { duration: 2000 });\n            return;\n        }\n        \n        const oModel = oView.getModel(\"planilla\");\n        if (!oModel) {\n            console.error(\"PagosMasivosManager - No planilla model found\");\n            MessageToast.show(\"Error: No se encontraron datos para descargar\", { duration: 2000 });\n            return;\n        }\n        \n        const planillaData = oModel.getData();\n        console.log(\"PagosMasivosManager - Downloading planilla data:\", planillaData);\n        \n        if (!planillaData) {\n            console.error(\"PagosMasivosManager - No planilla data found\");\n            MessageToast.show(\"Error: No hay datos de planilla disponibles\", { duration: 2000 });\n            return;\n        }\n        \n        try {\n            // Create a JSON file with the planilla data\n            const jsonData = JSON.stringify(planillaData, null, 2);\n            console.log(\"PagosMasivosManager - JSON data created:\", jsonData.substring(0, 200) + \"...\");\n            \n            const blob = new Blob([jsonData], { type: 'application/json;charset=utf-8' });\n            console.log(\"PagosMasivosManager - Blob created, size:\", blob.size);\n            \n            const url = URL.createObjectURL(blob);\n            console.log(\"PagosMasivosManager - URL created:\", url);\n            \n            // Create a temporary link element to trigger download\n            const link = document.createElement('a');\n            link.href = url;\n            link.download = `planilla_${planillaData.Id || 'detalle'}_${new Date().toISOString().split('T')[0]}.json`;\n            link.style.display = 'none';\n            \n            console.log(\"PagosMasivosManager - Download filename:\", link.download);\n            \n            // Add to DOM, click, and remove\n            document.body.appendChild(link);\n            console.log(\"PagosMasivosManager - Link added to DOM\");\n            \n            link.click();\n            console.log(\"PagosMasivosManager - Link clicked\");\n            \n            // Small delay before cleanup\n            setTimeout(() => {\n                document.body.removeChild(link);\n                URL.revokeObjectURL(url);\n                console.log(\"PagosMasivosManager - Cleanup completed\");\n            }, 100);\n            \n            MessageToast.show(\"Archivo descargado exitosamente\", { duration: 2000 });\n            \n        } catch (error) {\n            console.error(\"PagosMasivosManager - Error during download:\", error);\n            MessageToast.show(\"Error al descargar el archivo\", { duration: 2000 });\n            \n            // Fallback: try to open in new window\n            try {\n                const jsonData = JSON.stringify(planillaData, null, 2);\n                const newWindow = window.open('', '_blank');\n                if (newWindow) {\n                    newWindow.document.write('<pre>' + jsonData + '</pre>');\n                    newWindow.document.title = `Planilla ${planillaData.Id || 'detalle'}`;\n                    console.log(\"PagosMasivosManager - Fallback: opened in new window\");\n                }\n            } catch (fallbackError) {\n                console.error(\"PagosMasivosManager - Fallback also failed:\", fallbackError);\n            }\n        }\n    }\n\n    public onListItemPress(oEvent: any): void {\n        console.log(\"PagosMasivosManager - onListItemPress triggered!\", oEvent);\n        \n        // Get the list item that was clicked\n        const oItem = oEvent.getParameter(\"listItem\");\n        if (!oItem) {\n            console.log(\"PagosMasivosManager - No listItem parameter found\");\n            return;\n        }\n        \n        console.log(\"PagosMasivosManager - List item:\", oItem);\n        \n        // Try to get the binding context from the list item\n        let oContext = oItem.getBindingContext(\"planillas\");\n        if (!oContext) {\n            console.log(\"PagosMasivosManager - Trying without model name...\");\n            oContext = oItem.getBindingContext();\n        }\n        \n        if (!oContext || !oContext.getObject) {\n            console.log(\"PagosMasivosManager - No context or getObject found\");\n            console.log(\"PagosMasivosManager - Context:\", oContext);\n            \n            // Try to get the data directly from the list\n            const list = this.getControlById(\"pagosMasivosPlanillasList\");\n            if (list) {\n                console.log(\"PagosMasivosManager - List found:\", list);\n                const items = list.getItems();\n                console.log(\"PagosMasivosManager - List items count:\", items.length);\n                \n                // Find the clicked item by comparing with the list item\n                for (let i = 0; i < items.length; i++) {\n                    if (items[i] === oItem) {\n                        console.log(\"PagosMasivosManager - Found clicked item at index:\", i);\n                        const model = list.getModel(\"planillas\");\n                        if (model) {\n                            const data = model.getData();\n                            const planillas = data?.PlanillasCollection || [];\n                            if (planillas[i]) {\n                                console.log(\"PagosMasivosManager - Found planilla data:\", planillas[i]);\n                                this.handlePlanillaSelection(planillas[i]);\n                                return;\n                            }\n                        }\n                        break;\n                    }\n                }\n                \n                console.log(\"PagosMasivosManager - Clicked item not found in list items\");\n            }\n            return;\n        }\n        \n        const oPlanilla = oContext.getObject();\n        console.log(\"PagosMasivosManager - Planilla data:\", oPlanilla);\n        \n        this.handlePlanillaSelection(oPlanilla);\n    }\n\n    private handlePlanillaSelection(oPlanilla: any): void {\n        if (oPlanilla && oPlanilla.DocEntry) {\n            const planillaId = oPlanilla.DocEntry;\n            console.log(\"PagosMasivosManager - Found planilla with ID:\", planillaId, \"from planilla:\", oPlanilla);\n            console.log(\"PagosMasivosManager - Planilla ID:\", planillaId);\n            \n            // Cargar datos de la planilla\n            this.loadPlanillaById(planillaId);\n            \n            // Navegar a la página de detalle usando routing\n            const oComponent = this.getController().getOwnerComponent() as any;\n            const oRouter = oComponent.getRouter();\n            oRouter.navTo(\"RoutePagosMasivosDetalle\", { planillaId: planillaId });\n        } else {\n            console.log(\"PagosMasivosManager - No valid planilla ID found\");\n        }\n    }\n\n    private loadPlanillaById(planillaId: string): void {\n        console.log(\"PagosMasivosManager - Loading planilla by ID:\", planillaId);\n        \n        // Cargar datos detallados desde el archivo planilla-object.json\n        const planillaDetailUrl = \"./model/mock/planilla-object.json\";\n        \n        try {\n            const oDetailModel = new JSONModel();\n            \n            // Load data synchronously first\n            oDetailModel.loadData(planillaDetailUrl, undefined, false);\n            \n            const oData = oDetailModel.getData();\n            console.log(\"PagosMasivosManager - Planilla detail data loaded:\", oData);\n            \n            const planillas = oData?.planillas || [];\n            console.log(\"PagosMasivosManager - Available planillas:\", planillas);\n            \n            // Buscar la planilla por ID (convert to number for comparison)\n            const planillaIdNum = parseInt(planillaId);\n            const planilla = planillas.find((item: any) => item.DocEntry === planillaIdNum);\n            \n            if (planilla) {\n                console.log(\"PagosMasivosManager - Planilla found in detail data:\", planilla);\n\n                \n                // Log all lines if they exist\n                if (planilla.VS_PMP1Collection && planilla.VS_PMP1Collection.length > 0) {\n                    console.log(\"PagosMasivosManager - Planilla Lines count:\", planilla.VS_PMP1Collection.length);\n                    console.log(\"PagosMasivosManager - Planilla Lines:\", planilla.VS_PMP1Collection);\n                    \n                    // Log each line individually\n                    planilla.VS_PMP1Collection.forEach((line: any, index: number) => {\n                        console.log(`PagosMasivosManager - Line ${index + 1}:`, {\n                            LineId: line.LineId,\n                            DocEntry: line.DocEntry,\n                            DocNum: line.DocNum,\n                            NumAtCard: line.NumAtCard,\n                            CardCode: line.CardCode,\n                            CardName: line.CardName,\n                            DocDate: line.DocDate,\n                            DocDueDate: line.DocDueDate,\n                            TaxDate: line.TaxDate,\n                            TaxCode: line.TaxCode,\n                            TaxAmount: line.TaxAmount,\n                            TaxAmountFC: line.TaxAmountFC,\n                            DocTotal: line.DocTotal,\n                            DocTotalFC: line.DocTotalFC,\n                            WithholdingTax: line.WithholdingTax\n                        });\n                    });\n                } else {\n                    console.log(\"PagosMasivosManager - No lines found for this planilla\");\n                }\n                \n                // Crear modelo para la planilla seleccionada\n                const oModelPlanilla = new JSONModel();\n                oModelPlanilla.setData(planilla);\n                \n                // Asignar el modelo a la vista\n                const oView = this.getController().getView();\n                if (oView) {\n                    oView.setModel(oModelPlanilla, \"planilla\");\n                    console.log(\"PagosMasivosManager - Planilla model assigned to view\");\n                    \n                    // Cargar también las series\n                    this.loadSeriesData();\n                }\n            } else {\n                console.log(\"PagosMasivosManager - Planilla not found in detail data, trying fallback\");\n                this.loadFallbackPlanillaData(planillaId);\n            }\n        } catch (error) {\n            console.error(\"PagosMasivosManager - Exception loading planilla detail data:\", error);\n            this.loadFallbackPlanillaData(planillaId);\n        }\n    }\n\n    private loadFallbackPlanillaData(planillaId: string): void {\n        console.log(\"PagosMasivosManager - Loading fallback planilla data for ID:\", planillaId);\n        \n        // Datos de respaldo para mostrar en caso de error\n        const fallbackData = {\n            \"DocEntry\": parseInt(planillaId),\n            \"DocNum\": parseInt(planillaId),\n            \"U_CUENTA\": \"1041101\",\n            \"U_IDBANCO\": \"BCP\",\n            \"U_NMBANCO\": \"BANCO DE CREDITO\",\n            \"U_CCBANCO\": \"1941985504094\",\n            \"U_MONEDA\": \"SOL\",\n            \"U_SERIE\": 24,\n            \"U_ESTADO\": \"E\",\n            \"U_FECHA\": \"2024-03-21T00:00:00Z\",\n            \"U_FECHAP\": \"2024-03-21T00:00:00Z\",\n            \"U_TC\": 3.701,\n            \"U_RETEN\": null,\n            \"U_FECHAV\": null,\n            \"U_IDSN\": null,\n            \"U_NMSN\": null,\n            \"U_GLOSA\": \"PG F/VARIAS\",\n            \"U_TOTAL\": 19516.06,\n            \"U_IDPAGO\": 1977,\n            \"U_SUBTOTAL\": 19516.06,\n            \"U_REF\": null,\n            \"U_NOPBAN\": \"09627515\",\n            \"U_IDSUC\": null,\n            \"U_NMSUC\": null,\n            \"U_FCAJA\": -1,\n            \"U_CONTA\": 0,\n            \"VS_PMP1Collection\": [\n                {\n                    \"DocEntry\": parseInt(planillaId),\n                    \"LineId\": 1,\n                    \"VisOrder\": 1,\n                    \"Object\": \"VS_OPMP\",\n                    \"LogInst\": null,\n                    \"U_CHECK\": \"Y\",\n                    \"U_IDPAGO\": 1971,\n                    \"U_TIPDOC\": \"Factura\",\n                    \"U_IDDOC\": 3617,\n                    \"U_LINDOC\": 0,\n                    \"U_OBJDOC\": \"18\",\n                    \"U_CUODOC\": \"1\",\n                    \"U_IDSN\": \"PL10081644867\",\n                    \"U_NMSN\": \"BUSTAMANTE DAVILA MARIA ELIZABETH\",\n                    \"U_RUC\": \"10081644867\",\n                    \"U_NUMDOC\": \"E001-78\",\n                    \"U_MONDOC\": \"SOL\",\n                    \"U_IMPORTE\": 288,\n                    \"U_SALDO\": 288,\n                    \"U_PAGONETO\": 288,\n                    \"U_PAGLOC\": 288,\n                    \"U_PAGEXT\": 0,\n                    \"U_RETLOC\": 0,\n                    \"U_RETEXT\": 0,\n                    \"U_FVENC\": \"2024-03-15T00:00:00Z\",\n                    \"U_FCONT\": \"2024-03-15T00:00:00Z\",\n                    \"U_FDOCU\": \"2024-03-15T00:00:00Z\",\n                    \"U_CCORRI\": \"19394614129025\",\n                    \"U_CTAINF\": \"BCP\",\n                    \"U_MONINF\": \"SOL\",\n                    \"U_RETCOD\": \"\",\n                    \"U_RETPOR\": 0,\n                    \"U_ESTADO\": \"1\",\n                    \"U_SL\": 288,\n                    \"U_SE\": 0,\n                    \"U_RL\": 0,\n                    \"U_RE\": 0,\n                    \"U_BL\": 0,\n                    \"U_BE\": 0,\n                    \"U_IL\": 288,\n                    \"U_REF2\": \"01E001-78\",\n                    \"U_PAGLOC0\": 0,\n                    \"U_PAGEXT0\": 0,\n                    \"U_RETLOC0\": 0,\n                    \"U_RETEXT0\": 0,\n                    \"U_MPBB\": \"2\"\n                }\n            ]\n        };\n        \n        const oModelPlanilla = new JSONModel();\n        oModelPlanilla.setData(fallbackData);\n        \n        const oView = this.getController().getView();\n        if (oView) {\n            oView.setModel(oModelPlanilla, \"planilla\");\n            console.log(\"PagosMasivosManager - Fallback planilla model assigned to view\");\n            \n            // Cargar también las series\n            this.loadSeriesData();\n        }\n    }\n\n    public loadSeriesData(): void {\n        console.log(\"PagosMasivosManager - Loading series data...\");\n        const seriesUrl = \"./model/mock/series-pago.json\";\n        \n        fetch(seriesUrl)\n            .then(response => {\n                console.log(\"PagosMasivosManager - Series response status:\", response.status);\n                return response.json();\n            })\n            .then(data => {\n                console.log(\"PagosMasivosManager - Series data received:\", data);\n                const oView = this.getController().getView();\n                if (oView) {\n                    const oModelSeries = new JSONModel();\n                    oModelSeries.setData(data);\n                    oView.setModel(oModelSeries, \"series\");\n                    console.log(\"PagosMasivosManager - Series model assigned to view\");\n                    console.log(\"PagosMasivosManager - Series model data:\", oModelSeries.getData());\n                } else {\n                    console.error(\"PagosMasivosManager - View not found when loading series\");\n                }\n            })\n            .catch(error => {\n                console.error(\"Error cargando series:\", error);\n            });\n    }\n\n    private navigateToDetailPage(): void {\n        console.log(\"PagosMasivosManager - Navigating to detail page\");\n        \n        const oComponent = this.getController().getOwnerComponent() as any;\n        const oRouter = oComponent.getRouter();\n        \n        // For new planillas, navigate without ID\n        oRouter.navTo(\"RoutePagosMasivosDetalle\", { planillaId: \"new\" });\n        console.log(\"PagosMasivosManager - Navigation to detail completed\");\n    }\n\n    private navigateBackToList(): void {\n        console.log(\"PagosMasivosManager - Navigating back to list\");\n        \n        const oComponent = this.getController().getOwnerComponent() as any;\n        const oRouter = oComponent.getRouter();\n        \n        oRouter.navTo(\"RoutePagosMasivos\");\n        console.log(\"PagosMasivosManager - Navigation back completed\");\n    }\n\n    private applyFilters(): void {\n        const aFilters: any[] = [];\n        \n        // Filtro de rango de fechas\n        const dateRangeFilter = this.getControlById(\"pagosMasivosDateRangeFilter\");\n        if (dateRangeFilter && dateRangeFilter.getValue()) {\n            const dateRangeValue = dateRangeFilter.getValue();\n            console.log(\"PagosMasivos - Filtro de rango de fechas:\", dateRangeFilter);\n            console.log(\"PagosMasivos - Valor del rango de fechas:\", dateRangeValue);\n            \n            // DateRangeSelection devuelve un string en formato \"startDate - endDate\"\n            if (dateRangeValue && typeof dateRangeValue === 'string' && dateRangeValue.includes(' - ')) {\n                const [startDateStr, endDateStr] = dateRangeValue.split(' - ');\n                if (startDateStr) {\n                    const startDate = new Date(startDateStr);\n                    aFilters.push({ path: \"DateOfSale\", operator: \"GE\", value: startDate });\n                }\n                if (endDateStr) {\n                    const endDate = new Date(endDateStr);\n                    aFilters.push({ path: \"DateOfSale\", operator: \"LE\", value: endDate });\n                }\n            }\n        }\n\n        // Filtro de estado\n        const statusFilter = this.getControlById(\"pagosMasivosStatusFilter\");\n        if (statusFilter && statusFilter.getSelectedKey() && statusFilter.getSelectedKey() !== \"\") {\n            aFilters.push({ path: \"U_ESTADO\", operator: \"EQ\", value: statusFilter.getSelectedKey() });\n        }\n\n        // Filtro de banco\n        const bancoFilter = this.getControlById(\"pagosMasivosBancoFilter\");\n        if (bancoFilter && bancoFilter.getSelectedKey() && bancoFilter.getSelectedKey() !== \"\") {\n            aFilters.push({ path: \"U_IDBANCO\", operator: \"EQ\", value: bancoFilter.getSelectedKey() });\n        }\n\n        // Aplicar filtros a datos originales\n        const originalData = this.oOriginalModel.getData();\n        let filteredData = originalData;\n\n        if (aFilters.length > 0) {\n            filteredData = this.filterData(originalData, aFilters);\n        }\n\n        this.oFilteredModel.setData(filteredData);\n    }\n\n    private filterData(data: any, filters: any[]): any {\n        if (!data || !data.PlanillasCollection) {\n            return data;\n        }\n\n        const filteredItems = data.PlanillasCollection.filter((item: any) => {\n            return filters.every(filter => {\n                const value = item[filter.path];\n                const filterValue = filter.value;\n                \n                switch (filter.operator) {\n                    case \"EQ\":\n                        return value === filterValue;\n                    case \"GE\":\n                        if (filter.path === \"DateOfSale\") {\n                            const itemDate = new Date(value);\n                            return itemDate >= filterValue;\n                        }\n                        return value >= filterValue;\n                    case \"LE\":\n                        if (filter.path === \"DateOfSale\") {\n                            const itemDate = new Date(value);\n                            return itemDate <= filterValue;\n                        }\n                        return value <= filterValue;\n                    default:\n                        return true;\n                }\n            });\n        });\n\n        return {\n            ...data,\n            PlanillasCollection: filteredItems\n        };\n    }\n\n    // Helper methods\n    private getControlById(controlId: string): any {\n        // This would need to be implemented to get controls from the view\n        // For now, we'll need to pass the controller reference\n        return null;\n    }\n\n    private getOwnerComponent(): UIComponent {\n        // This would need to be implemented to get the component\n        // For now, we'll need to pass the component reference\n        return null as any;\n    }\n\n    // Method to set controller reference for accessing controls\n    public setController(controller: any): void {\n        console.log(\"PagosMasivosManager - Setting controller reference:\", controller);\n        this.controller = controller;\n        this.getControlById = (controlId: string) => {\n            const control = controller.byId(controlId);\n            console.log(\"PagosMasivosManager - Getting control by ID:\", controlId, control);\n            return control;\n        };\n        this.getOwnerComponent = () => controller.getOwnerComponent();\n    }\n\n    // Method to get controller reference\n    public getController(): any {\n        return this.controller;\n    }\n\n    // Document Selection Methods\n    public onAddDocumentos(): void {\n        console.log(\"PagosMasivosManager - onAddDocumentos triggered\");\n        \n        // Check if we're in creation mode\n        const planillaModel = this.getController().getView().getModel(\"planilla\");\n        if (!planillaModel) {\n            console.error(\"PagosMasivosManager - Planilla model not found\");\n            return;\n        }\n        \n        const planillaData = planillaModel.getData();\n        if (!planillaData.isNewPlanilla) {\n            MessageToast.show(\"Solo se pueden agregar documentos en modo creación\", { duration: 3000 });\n            return;\n        }\n        \n        // Load available documents\n        this.loadAvailableDocuments();\n        \n        // Open the dialog\n        const dialog = this.getController().byId(\"documentSelectionDialog\");\n        if (dialog) {\n            dialog.open();\n        } else {\n            console.error(\"PagosMasivosManager - Document selection dialog not found\");\n        }\n    }\n\n    private loadAvailableDocuments(): void {\n        console.log(\"PagosMasivosManager - Loading available documents...\");\n        const documentsUrl = \"./model/mock/available-documents.json\";\n        \n        fetch(documentsUrl)\n            .then(response => {\n                console.log(\"PagosMasivosManager - Documents response status:\", response.status);\n                return response.json();\n            })\n            .then(data => {\n                console.log(\"PagosMasivosManager - Documents data received:\", data);\n                \n                // Get current planilla data to check for existing documents\n                const planillaModel = this.getController().getView().getModel(\"planilla\");\n                const currentLines = planillaModel ? planillaModel.getData().VS_PMP1Collection || [] : [];\n                \n                console.log(\"PagosMasivosManager - Current planilla lines:\", currentLines.length);\n                if (currentLines.length > 0) {\n                    console.log(\"PagosMasivosManager - Planilla lines details:\");\n                    currentLines.forEach((line: any, index: number) => {\n                        console.log(`  Line ${index}: U_NUMDOC=\"${line.U_NUMDOC}\", U_IDSN=\"${line.U_IDSN}\"`);\n                    });\n                }\n                console.log(\"PagosMasivosManager - Available documents:\", data.documents.length);\n                console.log(\"PagosMasivosManager - First few available documents:\");\n                data.documents.slice(0, 3).forEach((doc: any, index: number) => {\n                    console.log(`  Doc ${index}: DocNum=\"${doc.DocNum}\", CardCode=\"${doc.CardCode}\"`);\n                });\n                \n                // Add selected property and check if already in planilla for each document\n                data.documents.forEach((doc: any) => {\n                    doc.selected = false;\n                    \n                    // Always initialize to false first\n                    doc.alreadyInPlanilla = false;\n                    \n                    // Only check against existing lines if there are any\n                    if (currentLines.length > 0) {\n                        console.log(`PagosMasivosManager - Checking document ${doc.DocNum} (${doc.CardCode}) against ${currentLines.length} planilla lines`);\n                        \n                        const isAlreadyAdded = currentLines.some((line: any) => {\n                            const matches = line.U_NUMDOC === doc.DocNum && line.U_IDSN === doc.CardCode;\n                            console.log(`PagosMasivosManager - Comparing: \"${line.U_NUMDOC}\" === \"${doc.DocNum}\" && \"${line.U_IDSN}\" === \"${doc.CardCode}\" = ${matches}`);\n                            if (matches) {\n                                console.log(`PagosMasivosManager - Document ${doc.DocNum} (${doc.CardCode}) matches planilla line ${line.U_NUMDOC} (${line.U_IDSN})`);\n                            }\n                            return matches;\n                        });\n                        doc.alreadyInPlanilla = isAlreadyAdded;\n                    } else {\n                        console.log(`PagosMasivosManager - No planilla lines to check against for document ${doc.DocNum}`);\n                    }\n                    \n                    console.log(`PagosMasivosManager - Document ${doc.DocNum} (${doc.CardCode}) - alreadyInPlanilla: ${doc.alreadyInPlanilla}`);\n                });\n                \n                // Prepare model data\n                const modelData = {\n                    documents: data.documents,\n                    selectedTotal: 0,\n                    selectedCount: 0,\n                    existingCount: 0\n                };\n                \n                const oView = this.getController().getView();\n                if (oView) {\n                    const oModelDocuments = new JSONModel();\n                    oModelDocuments.setData(modelData);\n                    oView.setModel(oModelDocuments, \"availableDocuments\");\n                    console.log(\"PagosMasivosManager - Available documents model assigned to view\");\n                } else {\n                    console.error(\"PagosMasivosManager - View not found when loading documents\");\n                }\n            })\n            .catch(error => {\n                console.error(\"Error cargando documentos disponibles:\", error);\n                MessageToast.show(\"Error al cargar documentos disponibles\", { duration: 3000 });\n            });\n    }\n\n\n\n    public onDocumentSearch(oEvent: any): void {\n        const searchTerm = oEvent.getParameter(\"query\").toLowerCase();\n        console.log(\"PagosMasivosManager - Document search:\", searchTerm);\n        \n        const documentsModel = this.getController().getView().getModel(\"availableDocuments\");\n        if (!documentsModel) return;\n        \n        const data = documentsModel.getData();\n        const documents = data.documents;\n        \n        // Filter documents based on search term\n        const filteredDocuments = documents.filter((doc: any) => {\n            return doc.CardName.toLowerCase().includes(searchTerm) ||\n                   doc.DocNum.toLowerCase().includes(searchTerm) ||\n                   doc.CardCode.toLowerCase().includes(searchTerm);\n        });\n        \n        // Update the model with filtered data\n        documentsModel.setProperty(\"/documents\", filteredDocuments);\n    }\n\n\n\n    public onDocumentBankFilterChange(oEvent: any): void {\n        const selectedBank = oEvent.getParameter(\"selectedItem\").getKey();\n        console.log(\"PagosMasivosManager - Document bank filter:\", selectedBank);\n        \n        // Reload original data and apply filter\n        this.loadAvailableDocuments();\n        \n        if (selectedBank) {\n            const documentsModel = this.getController().getView().getModel(\"availableDocuments\");\n            if (!documentsModel) return;\n            \n            const data = documentsModel.getData();\n            const documents = data.documents;\n            \n            // Filter documents by bank\n            const filteredDocuments = documents.filter((doc: any) => {\n                return doc.BankCode === selectedBank;\n            });\n            \n            // Update the model with filtered data\n            documentsModel.setProperty(\"/documents\", filteredDocuments);\n        }\n    }\n\n\n\n    public onDocumentSelectionChange(oEvent: any): void {\n        console.log(\"PagosMasivosManager - Document selection changed\");\n        \n        const documentsModel = this.getController().getView().getModel(\"availableDocuments\");\n        if (!documentsModel) return;\n        \n        const data = documentsModel.getData();\n        const documents = data.documents;\n        \n        // Get current planilla data to check for existing documents\n        const planillaModel = this.getController().getView().getModel(\"planilla\");\n        const currentLines = planillaModel ? planillaModel.getData().VS_PMP1Collection || [] : [];\n        \n        // Get selected items from the table\n        const table = this.getController().byId(\"availableDocumentsTable\");\n        const selectedItems = table.getSelectedItems();\n        \n        // Update selected property for each document and check if it's already in planilla\n        documents.forEach((doc: any) => {\n            doc.selected = selectedItems.some((item: any) => {\n                const context = item.getBindingContext(\"availableDocuments\");\n                return context && context.getProperty(\"DocEntry\") === doc.DocEntry;\n            });\n            \n            // Always initialize to false first\n            doc.alreadyInPlanilla = false;\n            \n            // Only check against existing lines if there are any\n            if (currentLines.length > 0) {\n                const isAlreadyAdded = currentLines.some((line: any) => {\n                    const matches = line.U_NUMDOC === doc.DocNum && line.U_IDSN === doc.CardCode;\n                    if (matches) {\n                        console.log(`PagosMasivosManager - Selection change: Document ${doc.DocNum} (${doc.CardCode}) matches planilla line ${line.U_NUMDOC} (${line.U_IDSN})`);\n                    }\n                    return matches;\n                });\n                doc.alreadyInPlanilla = isAlreadyAdded;\n            }\n        });\n        \n        // Calculate selected total and count (excluding already existing documents)\n        const selectedDocuments = documents.filter((doc: any) => doc.selected && !doc.alreadyInPlanilla);\n        const selectedTotal = selectedDocuments.reduce((sum: number, doc: any) => sum + doc.Balance, 0);\n        const selectedCount = selectedDocuments.length;\n        \n        // Count documents that are selected but already in planilla\n        const selectedButExisting = documents.filter((doc: any) => doc.selected && doc.alreadyInPlanilla);\n        const existingCount = selectedButExisting.length;\n        \n        // Update the model\n        documentsModel.setProperty(\"/selectedTotal\", selectedTotal);\n        documentsModel.setProperty(\"/selectedCount\", selectedCount);\n        documentsModel.setProperty(\"/existingCount\", existingCount);\n        documentsModel.refresh(true);\n        \n        // Show warning if user selected documents that are already in planilla\n        if (existingCount > 0) {\n            console.log(`PagosMasivosManager - ${existingCount} selected document(s) already exist in planilla`);\n        }\n    }\n\n\n\n    public onDocumentDialogCancel(): void {\n        console.log(\"PagosMasivosManager - Document dialog cancelled\");\n        \n        const dialog = this.getController().byId(\"documentSelectionDialog\");\n        if (dialog) {\n            dialog.close();\n        }\n    }\n\n    public onDocumentDialogConfirm(): void {\n        console.log(\"PagosMasivosManager - Document dialog confirmed\");\n        \n        const documentsModel = this.getController().getView().getModel(\"availableDocuments\");\n        if (!documentsModel) return;\n        \n        const data = documentsModel.getData();\n        const selectedDocuments = data.documents.filter((doc: any) => doc.selected);\n        \n        if (selectedDocuments.length === 0) {\n            MessageToast.show(\"No hay documentos seleccionados\", { duration: 3000 });\n            return;\n        }\n        \n        // Filter out documents that are already in the planilla\n        const planillaModel = this.getController().getView().getModel(\"planilla\");\n        const currentLines = planillaModel ? planillaModel.getData().VS_PMP1Collection || [] : [];\n        \n        const validDocuments = selectedDocuments.filter((doc: any) => {\n            const isAlreadyInPlanilla = currentLines.some((line: any) => {\n                return line.U_NUMDOC === doc.DocNum && line.U_IDSN === doc.CardCode;\n            });\n            \n            if (isAlreadyInPlanilla) {\n                console.log(`PagosMasivosManager - Document ${doc.DocNum} already in planilla, skipping`);\n            }\n            \n            return !isAlreadyInPlanilla;\n        });\n        \n        if (validDocuments.length === 0) {\n            MessageToast.show(\"Todos los documentos seleccionados ya existen en la planilla\", { duration: 3000 });\n            return;\n        }\n        \n        if (validDocuments.length < selectedDocuments.length) {\n            const duplicateCount = selectedDocuments.length - validDocuments.length;\n            MessageToast.show(`${duplicateCount} documento(s) duplicado(s) fueron omitidos`, { duration: 3000 });\n        }\n        \n        // Add valid documents to the planilla\n        this.addDocumentsToPlanilla(validDocuments);\n        \n        // Close the dialog\n        const dialog = this.getController().byId(\"documentSelectionDialog\");\n        if (dialog) {\n            dialog.close();\n        }\n        \n        MessageToast.show(`${validDocuments.length} documento(s) agregado(s) a la planilla`, { duration: 3000 });\n    }\n\n    private addDocumentsToPlanilla(selectedDocuments: any[]): void {\n        console.log(\"PagosMasivosManager - Adding documents to planilla:\", selectedDocuments);\n        \n        const planillaModel = this.getController().getView().getModel(\"planilla\");\n        if (!planillaModel) return;\n        \n        const planillaData = planillaModel.getData();\n        const currentLines = planillaData.VS_PMP1Collection || [];\n        \n        // Convert documents to planilla lines (no need to check for duplicates as they're already filtered)\n        const newLines = selectedDocuments.map((doc: any, index: number) => {\n            const lineId = currentLines.length + index + 1;\n            return {\n                LineId: lineId,\n                DocEntry: doc.DocEntry,\n                DocNum: doc.DocNum,\n                NumAtCard: doc.DocNum,\n                CardCode: doc.CardCode,\n                CardName: doc.CardName,\n                DocDate: doc.DocDate,\n                DocDueDate: doc.DueDate,\n                TaxDate: doc.DocDate,\n                TaxCode: \"\",\n                TaxAmount: 0,\n                TaxAmountFC: 0,\n                DocTotal: doc.Total,\n                DocTotalFC: doc.Total,\n                WithholdingTax: 0,\n                // Planilla specific fields\n                U_NUMDOC: doc.DocNum,\n                U_IDSN: doc.CardCode,\n                U_NMSN: doc.CardName,\n                U_FDOCU: doc.DocDate,\n                U_FVENC: doc.DueDate,\n                U_IMPORTE: doc.Total,\n                U_SALDO: doc.Balance,\n                U_RETLOC: 0,\n                U_PAGLOC0: doc.Balance,\n                U_CTAINF: doc.BankCode,\n                U_CCORRI: doc.AccountCode,\n                U_MONINF: doc.Currency\n            };\n        });\n        \n        // Add new lines to existing lines\n        const updatedLines = [...currentLines, ...newLines];\n        planillaData.VS_PMP1Collection = updatedLines;\n        \n        // Recalculate totals\n        this.recalculatePlanillaTotals(planillaData);\n        \n        // Update the model\n        planillaModel.setData(planillaData);\n        planillaModel.refresh(true);\n        \n        console.log(\"PagosMasivosManager - Documents added to planilla. Total lines:\", updatedLines.length);\n        console.log(\"PagosMasivosManager - Documents added:\", selectedDocuments.length);\n    }\n\n    private recalculatePlanillaTotals(planillaData: any): void {\n        const lines = planillaData.VS_PMP1Collection || [];\n        \n        // Calculate totals\n        const total = lines.reduce((sum: number, line: any) => sum + (line.U_IMPORTE || 0), 0);\n        const reten = lines.reduce((sum: number, line: any) => sum + (line.U_RETLOC || 0), 0);\n        const subtotal = total - reten;\n        \n        // Update planilla totals\n        planillaData.U_TOTAL = total;\n        planillaData.U_RETEN = reten;\n        planillaData.U_SUBTOTAL = subtotal;\n        \n        console.log(\"PagosMasivosManager - Planilla totals recalculated:\", { total, reten, subtotal });\n    }\n\n}"],"mappings":";;;EAKA;AACA;AACA;EACO,MAAMA,mBAAmB,CAAC;IAK7BC,WAAWA,CAAA,EAAG;MACV,IAAI,CAACC,cAAc,GAAG,IAAIC,SAAS,CAAC,CAAC;MACrC,IAAI,CAACC,cAAc,GAAG,IAAID,SAAS,CAAC,CAAC;IACzC;IAEOE,gBAAgBA,CAAA,EAAS;MAC5BC,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;MAC3D;MACA,MAAMC,YAAY,GAAG,6BAA6B;MAElD,IAAI;QACA,IAAI,CAACN,cAAc,CAACO,QAAQ,CAACD,YAAY,EAAEE,SAAS,EAAE,KAAK,CAAC;QAC5DJ,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAE,IAAI,CAACL,cAAc,CAACS,OAAO,CAAC,CAAC,CAAC;MAC7F,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZN,OAAO,CAACC,GAAG,CAAC,2DAA2D,EAAEK,KAAK,CAAC;QAC/E,IAAI,CAACC,gBAAgB,CAAC,CAAC;QACvB;MACJ;;MAEA;MACA,IAAI,CAACC,uBAAuB,CAAC,CAAC;;MAE9B;MACA,IAAI,CAACV,cAAc,CAACW,OAAO,CAAC,IAAI,CAACb,cAAc,CAACS,OAAO,CAAC,CAAC,CAAC;MAC1DL,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAE,IAAI,CAACH,cAAc,CAACO,OAAO,CAAC,CAAC,CAAC;IAC5F;IAEOK,gBAAgBA,CAAA,EAAc;MACjC,OAAO,IAAI,CAACZ,cAAc;IAC9B;IAEOa,gBAAgBA,CAAA,EAAc;MACjC,OAAO,IAAI,CAACf,cAAc;IAC9B;IAEQY,uBAAuBA,CAAA,EAAS;MACpC,MAAMI,IAAI,GAAG,IAAI,CAAChB,cAAc,CAACS,OAAO,CAAC,CAAC;MAC1C,IAAIO,IAAI,IAAIA,IAAI,CAACC,mBAAmB,IAAIC,KAAK,CAACC,OAAO,CAACH,IAAI,CAACC,mBAAmB,CAAC,EAAE;QAC7E;QACAD,IAAI,CAACC,mBAAmB,CAACG,IAAI,CAAC,CAACC,CAAM,EAAEC,CAAM,KAAK;UAC9C,MAAMC,SAAS,GAAGC,QAAQ,CAACH,CAAC,CAACI,QAAQ,CAAC,IAAI,CAAC;UAC3C,MAAMC,SAAS,GAAGF,QAAQ,CAACF,CAAC,CAACG,QAAQ,CAAC,IAAI,CAAC;UAC3C,OAAOC,SAAS,GAAGH,SAAS,CAAC,CAAC;QAClC,CAAC,CAAC;;QAEF;QACA,IAAI,CAACvB,cAAc,CAACa,OAAO,CAACG,IAAI,CAAC;QACjCZ,OAAO,CAACC,GAAG,CAAC,oEAAoE,CAAC;MACrF;IACJ;IAEQM,gBAAgBA,CAAA,EAAS;MAC7B,MAAMgB,YAAY,GAAG;QACjB,qBAAqB,EAAE,CACnB;UACI,IAAI,EAAE,SAAS;UACf,MAAM,EAAE,+BAA+B;UACvC,YAAY,EAAE,YAAY;UAC1B,QAAQ,EAAE,WAAW;UACrB,UAAU,EAAE,EAAE;UACd,OAAO,EAAE,OAAO;UAChB,cAAc,EAAE,KAAK;UACrB,MAAM,EAAE;QACZ,CAAC,EACD;UACI,IAAI,EAAE,SAAS;UACf,MAAM,EAAE,+BAA+B;UACvC,YAAY,EAAE,YAAY;UAC1B,QAAQ,EAAE,QAAQ;UAClB,UAAU,EAAE,EAAE;UACd,OAAO,EAAE,IAAI;UACb,cAAc,EAAE,KAAK;UACrB,MAAM,EAAE;QACZ,CAAC,EACD;UACI,IAAI,EAAE,SAAS;UACf,MAAM,EAAE,+BAA+B;UACvC,YAAY,EAAE,YAAY;UAC1B,QAAQ,EAAE,SAAS;UACnB,UAAU,EAAE,EAAE;UACd,OAAO,EAAE,IAAI;UACb,cAAc,EAAE,KAAK;UACrB,MAAM,EAAE;QACZ,CAAC,EACD;UACI,IAAI,EAAE,SAAS;UACf,MAAM,EAAE,+BAA+B;UACvC,YAAY,EAAE,YAAY;UAC1B,QAAQ,EAAE,QAAQ;UAClB,UAAU,EAAE,EAAE;UACd,OAAO,EAAE,GAAG;UACZ,cAAc,EAAE,KAAK;UACrB,MAAM,EAAE;QACZ,CAAC,EACD;UACI,IAAI,EAAE,SAAS;UACf,MAAM,EAAE,+BAA+B;UACvC,YAAY,EAAE,YAAY;UAC1B,QAAQ,EAAE,WAAW;UACrB,UAAU,EAAE,EAAE;UACd,OAAO,EAAE,IAAI;UACb,cAAc,EAAE,KAAK;UACrB,MAAM,EAAE;QACZ,CAAC,EACD;UACI,IAAI,EAAE,SAAS;UACf,MAAM,EAAE,+BAA+B;UACvC,YAAY,EAAE,YAAY;UAC1B,QAAQ,EAAE,QAAQ;UAClB,UAAU,EAAE,EAAE;UACd,OAAO,EAAE,GAAG;UACZ,cAAc,EAAE,KAAK;UACrB,MAAM,EAAE;QACZ,CAAC,EACD;UACI,IAAI,EAAE,SAAS;UACf,MAAM,EAAE,+BAA+B;UACvC,YAAY,EAAE,YAAY;UAC1B,QAAQ,EAAE,WAAW;UACrB,UAAU,EAAE,CAAC;UACb,OAAO,EAAE,IAAI;UACb,cAAc,EAAE,KAAK;UACrB,MAAM,EAAE;QACZ,CAAC,EACD;UACI,IAAI,EAAE,SAAS;UACf,MAAM,EAAE,+BAA+B;UACvC,YAAY,EAAE,YAAY;UAC1B,QAAQ,EAAE,SAAS;UACnB,UAAU,EAAE,EAAE;UACd,OAAO,EAAE,IAAI;UACb,cAAc,EAAE,KAAK;UACrB,MAAM,EAAE;QACZ,CAAC,EACD;UACI,IAAI,EAAE,SAAS;UACf,MAAM,EAAE,+BAA+B;UACvC,YAAY,EAAE,YAAY;UAC1B,QAAQ,EAAE,QAAQ;UAClB,UAAU,EAAE,EAAE;UACd,OAAO,EAAE,GAAG;UACZ,cAAc,EAAE,KAAK;UACrB,MAAM,EAAE;QACZ,CAAC,EACD;UACI,IAAI,EAAE,SAAS;UACf,MAAM,EAAE,+BAA+B;UACvC,YAAY,EAAE,YAAY;UAC1B,QAAQ,EAAE,WAAW;UACrB,UAAU,EAAE,EAAE;UACd,OAAO,EAAE,IAAI;UACb,cAAc,EAAE,KAAK;UACrB,MAAM,EAAE;QACZ,CAAC;MAET,CAAC;MAED,IAAI,CAAC3B,cAAc,CAACa,OAAO,CAACc,YAAY,CAAC;MACzC,IAAI,CAACzB,cAAc,CAACW,OAAO,CAACc,YAAY,CAAC;IAC7C;;IAEA;IACOC,iBAAiBA,CAACC,MAAW,EAAQ;MACxCzB,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEwB,MAAM,CAACC,YAAY,CAAC,OAAO,CAAC,CAAC;MACrF,IAAI,CAACC,YAAY,CAAC,CAAC;IACvB;IAEOC,cAAcA,CAACH,MAAW,EAAQ;MACrC,IAAI,CAACE,YAAY,CAAC,CAAC;IACvB;IAEOE,aAAaA,CAACJ,MAAW,EAAQ;MACpC,IAAI,CAACE,YAAY,CAAC,CAAC;IACvB;IAEOG,cAAcA,CAAA,EAAS;MAC1B;MACA,MAAMC,eAAe,GAAG,IAAI,CAACC,cAAc,CAAC,6BAA6B,CAAC;MAC1E,IAAID,eAAe,EAAE;QACjBA,eAAe,CAACE,QAAQ,CAAC,EAAE,CAAC;MAChC;;MAEA;MACA,MAAMC,YAAY,GAAG,IAAI,CAACF,cAAc,CAAC,0BAA0B,CAAC;MACpE,IAAIE,YAAY,EAAE;QACdA,YAAY,CAACC,cAAc,CAAC,EAAE,CAAC;MACnC;;MAEA;MACA,MAAMC,WAAW,GAAG,IAAI,CAACJ,cAAc,CAAC,yBAAyB,CAAC;MAClE,IAAII,WAAW,EAAE;QACbA,WAAW,CAACD,cAAc,CAAC,EAAE,CAAC;MAClC;;MAEA;MACA,IAAI,CAACrC,cAAc,CAACW,OAAO,CAAC,IAAI,CAACb,cAAc,CAACS,OAAO,CAAC,CAAC,CAAC;MAE1DgC,YAAY,CAACC,IAAI,CAAC,kDAAkD,EAAE;QAAEC,QAAQ,EAAE;MAAK,CAAC,CAAC;IAC7F;IAEOC,0BAA0BA,CAAA,EAAS;MACtCxC,OAAO,CAACC,GAAG,CAAC,6DAA6D,CAAC;;MAE1E;MACA,IAAI,CAACwC,iBAAiB,CAAC,CAAC;;MAExB;MACA,IAAI,CAACC,oBAAoB,CAAC,CAAC;IAC/B;IAEOD,iBAAiBA,CAAA,EAAS;MAC7BzC,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;;MAE7D;MACA,MAAM0C,WAAW,GAAG,IAAI,CAACC,mBAAmB,CAAC,CAAC;;MAI9C;MACA,MAAMC,eAAe,GAAG;QACpB,UAAU,EAAEF,WAAW;QACvB,QAAQ,EAAEA,WAAW;QACrB,QAAQ,EAAE,IAAIG,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,GAAG,CAAC;QACnC,UAAU,EAAE,CAAC;QACb,QAAQ,EAAE,CAAC,CAAC;QACZ,YAAY,EAAE,GAAG;QACjB,QAAQ,EAAE,GAAG;QACb,eAAe,EAAE,GAAG;QACpB,SAAS,EAAE,SAAS;QACpB,QAAQ,EAAE,IAAI;QACd,UAAU,EAAE,GAAG;QACf,QAAQ,EAAE,SAAS;QACnB,SAAS,EAAE,IAAI;QACf,UAAU,EAAE,CAAC;QACb,YAAY,EAAE,GAAG;QACjB,YAAY,EAAE,IAAID,IAAI,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY;QACnE,YAAY,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,YAAY,CAAC,CAAC,CAACD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrD,YAAY,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY;QACnE,YAAY,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,YAAY,CAAC,CAAC,CAACD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrD,YAAY,EAAE,GAAG;QACjB,UAAU,EAAE,IAAI;QAChB,WAAW,EAAE,IAAI;QACjB,WAAW,EAAE,IAAI;QACjB,WAAW,EAAE,IAAI;QACjB,UAAU,EAAE,IAAI;QAChB,aAAa,EAAE,IAAI;QACnB,SAAS,EAAE,IAAI;QACf,UAAU,EAAE,GAAG;QAAE;QACjB,SAAS,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY;QAChE,UAAU,EAAE,IAAI;QAChB,MAAM,EAAE,IAAI;QACZ,SAAS,EAAE,IAAI;QACf,UAAU,EAAE,IAAI;QAChB,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,iCAAiC;QAC5C,SAAS,EAAE,GAAG;QACd,UAAU,EAAE,IAAI;QAChB,YAAY,EAAE,GAAG;QACjB,OAAO,EAAE,IAAI;QACb,UAAU,EAAE,IAAI;QAChB,SAAS,EAAE,IAAI;QACf,SAAS,EAAE,IAAI;QACf,SAAS,EAAE,CAAC,CAAC;QACb,SAAS,EAAE,CAAC;QACZ,mBAAmB,EAAE,EAAE;QACvB,eAAe,EAAE,IAAI,CAAC;MAC1B,CAAC;MAEDjD,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAE4C,eAAe,CAAC;;MAEhF;MACA,MAAMM,cAAc,GAAG,IAAItD,SAAS,CAAC,CAAC;MACtCsD,cAAc,CAAC1C,OAAO,CAACoC,eAAe,CAAC;;MAEvC;MACA,MAAMO,KAAK,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;MAC5C,IAAIF,KAAK,EAAE;QACPA,KAAK,CAACG,QAAQ,CAACJ,cAAc,EAAE,UAAU,CAAC;QAC1CnD,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC;;QAExE;QACA,IAAI,CAACuD,cAAc,CAAC,CAAC;MACzB;IACJ;IAEQZ,mBAAmBA,CAAA,EAAW;MAClC;MACA;MACA,MAAMa,GAAG,GAAG,IAAIX,IAAI,CAAC,CAAC;MACtB,MAAMY,SAAS,GAAGD,GAAG,CAACE,OAAO,CAAC,CAAC;MAC/B,OAAOC,IAAI,CAACC,KAAK,CAACH,SAAS,GAAG,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;IACjD;IAEOI,aAAaA,CAACrC,MAAW,EAAQ;MACpCzB,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;MAC5DD,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEwB,MAAM,CAACsC,aAAa,CAAC,CAAC,CAAC;MAE9E,MAAMC,YAAY,GAAGvC,MAAM,CAACC,YAAY,CAAC,cAAc,CAAC;MACxD,MAAMuC,WAAW,GAAGxC,MAAM,CAACC,YAAY,CAAC,cAAc,CAAC,EAAEwC,MAAM,CAAC,CAAC;MACjE,MAAMC,QAAQ,GAAG1C,MAAM,CAACC,YAAY,CAAC,UAAU,CAAC;MAEhD1B,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAE+D,YAAY,CAAC;MACjEhE,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEgE,WAAW,CAAC;MAC/DjE,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEkE,QAAQ,CAAC;MAEzD,IAAI,CAACH,YAAY,EAAE;QACfhE,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;QAC3C;MACJ;MAEA,MAAMmE,GAAG,GAAGJ,YAAY,CAACE,MAAM,CAAC,CAAC;MACjClE,OAAO,CAACC,GAAG,CAAC,iDAAiD,EAAEmE,GAAG,CAAC;;MAEnE;MACA,MAAMC,aAAa,GAAG,IAAI,CAAChB,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAACgB,QAAQ,CAAC,UAAU,CAAC;MACzE,IAAID,aAAa,EAAE;QACfrE,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEoE,aAAa,CAACE,WAAW,CAAC,UAAU,CAAC,CAAC;QAClGF,aAAa,CAACG,WAAW,CAAC,UAAU,EAAEJ,GAAG,CAAC;QAC1CpE,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEoE,aAAa,CAACE,WAAW,CAAC,UAAU,CAAC,CAAC;;QAElG;QACAF,aAAa,CAACI,OAAO,CAAC,IAAI,CAAC;MAC/B,CAAC,MAAM;QACHzE,OAAO,CAACM,KAAK,CAAC,gDAAgD,CAAC;MACnE;IACJ;IAEOoE,iBAAiBA,CAAA,EAAS;MAC7B1E,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;MAE1D,MAAMmD,KAAK,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;MAC5C,IAAI,CAACF,KAAK,EAAE;QACRpD,OAAO,CAACM,KAAK,CAAC,gBAAgB,CAAC;QAC/B;MACJ;MAEA,MAAM+D,aAAa,GAAGjB,KAAK,CAACkB,QAAQ,CAAC,UAAU,CAAC;MAChD,IAAI,CAACD,aAAa,EAAE;QAChBrE,OAAO,CAACM,KAAK,CAAC,0BAA0B,CAAC;QACzC;MACJ;MAEA,MAAMqE,YAAY,GAAGN,aAAa,CAAChE,OAAO,CAAC,CAAC;MAC5CL,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE0E,YAAY,CAAC;;MAE5D;MACA,IAAIA,YAAY,CAACC,aAAa,EAAE;QAC5B,IAAI,CAACC,4BAA4B,CAACF,YAAY,CAAC;MACnD,CAAC,MAAM;QACH,IAAI,CAACG,4BAA4B,CAACH,YAAY,CAAC;MACnD;IACJ;IAEQE,4BAA4BA,CAACE,WAAgB,EAAQ;MACzD;MACA,MAAMC,iBAAiB,GAAG,mCAAmC;MAE7DC,KAAK,CAACD,iBAAiB,CAAC,CACnBE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACtE,IAAI,IAAI;QACV;QACA,MAAM;UAAEgE,aAAa;UAAE,GAAGS;QAAe,CAAC,GAAGN,WAAW;;QAExD;QACAnE,IAAI,CAAC0E,SAAS,CAACC,IAAI,CAACF,cAAc,CAAC;QAEnCrF,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEoF,cAAc,CAAC;;QAExE;QACA,IAAI,CAACG,oBAAoB,CAACH,cAAc,CAAC;;QAEzC;QACAhD,YAAY,CAACC,IAAI,CAAC,8BAA8B,EAAE;UAAEC,QAAQ,EAAE;QAAK,CAAC,CAAC;;QAErE;QACA,IAAI,CAACkD,kBAAkB,CAAC,CAAC;MAC7B,CAAC,CAAC,CACDC,KAAK,CAACpF,KAAK,IAAI;QACZN,OAAO,CAACM,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnDqF,UAAU,CAACrF,KAAK,CAAC,4BAA4B,CAAC;MAClD,CAAC,CAAC;IACV;IAEQwE,4BAA4BA,CAACc,eAAoB,EAAQ;MAC7D;MACA,MAAMZ,iBAAiB,GAAG,mCAAmC;MAE7DC,KAAK,CAACD,iBAAiB,CAAC,CACnBE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACtE,IAAI,IAAI;QACV;QACA,MAAM0E,SAAS,GAAG1E,IAAI,CAAC0E,SAAS,IAAI,EAAE;QACtC,MAAMO,aAAa,GAAGP,SAAS,CAACQ,SAAS,CAAEC,IAAS,IAChDA,IAAI,CAAC1E,QAAQ,KAAKuE,eAAe,CAACvE,QACtC,CAAC;QAEDrB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE4F,aAAa,CAAC;QAE7C,IAAIA,aAAa,KAAK,CAAC,CAAC,EAAE;UACtB;UACAP,SAAS,CAACO,aAAa,CAAC,GAAG;YACvB,GAAGP,SAAS,CAACO,aAAa,CAAC;YAC3B,GAAGD,eAAe;YAClB,YAAY,EAAE,IAAI9C,IAAI,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY;YACnE,YAAY,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,YAAY,CAAC,CAAC,CAACD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;UACxD,CAAC;UAEDjD,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEqF,SAAS,CAACO,aAAa,CAAC,CAAC;;UAElF;UACA;UACA,MAAMG,cAAc,GAAG;YACnB,UAAU,EAAEV,SAAS,CAACO,aAAa,CAAC,CAACxE,QAAQ;YAC7C,SAAS,EAAEiE,SAAS,CAACO,aAAa,CAAC,CAACI,OAAO;YAC3C,UAAU,EAAEX,SAAS,CAACO,aAAa,CAAC,CAACK,QAAQ;YAC7C,UAAU,EAAEZ,SAAS,CAACO,aAAa,CAAC,CAACM;UACzC,CAAC;UAED,IAAI,CAACC,oBAAoB,CAACJ,cAAc,CAAC;;UAEzC;UACA3D,YAAY,CAACC,IAAI,CAAC,gCAAgC,EAAE;YAAEC,QAAQ,EAAE;UAAK,CAAC,CAAC;QAC3E,CAAC,MAAM;UACHvC,OAAO,CAACM,KAAK,CAAC,4CAA4C,CAAC;UAC3DqF,UAAU,CAACrF,KAAK,CAAC,yDAAyD,CAAC;QAC/E;MACJ,CAAC,CAAC,CACDoF,KAAK,CAACpF,KAAK,IAAI;QACZN,OAAO,CAACM,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;QACzDqF,UAAU,CAACrF,KAAK,CAAC,0CAA0C,CAAC;MAChE,CAAC,CAAC;IACV;IAEQ8F,oBAAoBA,CAACxF,IAAS,EAAQ;MAC1C;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA+E,UAAU,CAACU,WAAW,CAAC,2CAA2C,GAAGC,IAAI,CAACC,SAAS,CAAC3F,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE;QAChG4F,KAAK,EAAE,2BAA2B;QAClCC,OAAO,EAAE;MACb,CAAC,CAAC;MAEFzG,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;MACxDD,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEW,IAAI,CAAC;IAE5D;IAEQ4E,oBAAoBA,CAAC5E,IAAS,EAAQ;MAC1C;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA+E,UAAU,CAACU,WAAW,CAAC,wCAAwC,GAAGC,IAAI,CAACC,SAAS,CAAC3F,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE;QAC7F4F,KAAK,EAAE,2BAA2B;QAClCC,OAAO,EAAE;MACb,CAAC,CAAC;MAEFzG,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnDD,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEW,IAAI,CAAC;IAC5D;IAEO8F,sBAAsBA,CAACjF,MAAW,EAAQ;MAC7C,MAAMkF,YAAY,GAAGlF,MAAM,CAACC,YAAY,CAAC,OAAO,CAAC;MACjD1B,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAE0G,YAAY,CAAC;MAE7D,IAAI,CAACA,YAAY,EAAE;QACf;MACJ;;MAEA;MACA,MAAMC,UAAU,GAAGnF,MAAM,CAACoF,SAAS,CAAC,CAAC;MACrC,MAAMC,aAAa,GAAG,IAAI,CAACzD,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAACgB,QAAQ,CAAC,UAAU,CAAC,CAACC,WAAW,CAAC,WAAW,CAAC;MAClGvE,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE6G,aAAa,CAAC;;MAEzD;MACArF,MAAM,CAACsF,cAAc,CAAC,CAAC;;MAEvB;MACA,IAAIC,OAAe;MACnB,IAAIL,YAAY,YAAY7D,IAAI,EAAE;QAC9BkE,OAAO,GAAGL,YAAY,CAAC3D,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACxD,CAAC,MAAM,IAAI,OAAO0D,YAAY,KAAK,QAAQ,EAAE;QACzC;QACA,IAAI;UACA;UACA,MAAMM,SAAS,GAAGN,YAAY,CAAC1D,KAAK,CAAC,GAAG,CAAC;UACzC,IAAIgE,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;YACxB,MAAMC,GAAG,GAAG/F,QAAQ,CAAC6F,SAAS,CAAC,CAAC,CAAC,CAAC;YAClC,MAAMG,QAAQ,GAAGH,SAAS,CAAC,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;YAC3C,MAAMC,IAAI,GAAGlG,QAAQ,CAAC6F,SAAS,CAAC,CAAC,CAAC,CAAC;;YAEnC;YACA,MAAMM,QAAmC,GAAG;cACxC,KAAK,EAAE,CAAC;cAAE,KAAK,EAAE,CAAC;cAAE,KAAK,EAAE,CAAC;cAAE,KAAK,EAAE,CAAC;cAAE,KAAK,EAAE,CAAC;cAAE,KAAK,EAAE,CAAC;cAC1D,KAAK,EAAE,CAAC;cAAE,KAAK,EAAE,CAAC;cAAE,KAAK,EAAE,CAAC;cAAE,KAAK,EAAE,CAAC;cAAE,KAAK,EAAE,EAAE;cAAE,KAAK,EAAE;YAC9D,CAAC;YAED,MAAMC,KAAK,GAAGD,QAAQ,CAACH,QAAQ,CAAC;YAChC,IAAII,KAAK,KAAKpH,SAAS,IAAI,CAACqH,KAAK,CAACN,GAAG,CAAC,IAAI,CAACM,KAAK,CAACH,IAAI,CAAC,EAAE;cACpD,MAAMI,IAAI,GAAG,IAAI5E,IAAI,CAACwE,IAAI,EAAEE,KAAK,EAAEL,GAAG,CAAC;cACvCH,OAAO,GAAGU,IAAI,CAAC1E,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChD,CAAC,MAAM;cACHjD,OAAO,CAACM,KAAK,CAAC,8BAA8B,EAAEqG,YAAY,CAAC;cAC3D;YACJ;UACJ,CAAC,MAAM;YACH;YACA,MAAMe,IAAI,GAAG,IAAI5E,IAAI,CAAC6D,YAAY,CAAC;YACnC,IAAIc,KAAK,CAACC,IAAI,CAAC/D,OAAO,CAAC,CAAC,CAAC,EAAE;cACvB3D,OAAO,CAACM,KAAK,CAAC,8BAA8B,EAAEqG,YAAY,CAAC;cAC3D;YACJ;YACAK,OAAO,GAAGU,IAAI,CAAC1E,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAChD;QACJ,CAAC,CAAC,OAAO3C,KAAK,EAAE;UACZN,OAAO,CAACM,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;UACpD;QACJ;MACJ,CAAC,MAAM;QACHN,OAAO,CAACM,KAAK,CAAC,6BAA6B,EAAEqG,YAAY,CAAC;QAC1D;MACJ;;MAEA;MACA,MAAMgB,cAAc,GAAG,gCAAgC;MAEvD1C,KAAK,CAAC0C,cAAc,CAAC,CAChBzC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACtE,IAAI,IAAI;QACV;;QAEAZ,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAE+G,OAAO,CAAC;QACpD,MAAMY,YAAY,GAAGhH,IAAI,CAACiH,aAAa,CAACC,IAAI,CAAEC,IAAS,IACnDA,IAAI,CAACC,QAAQ,KAAK,KAAK,IACvBD,IAAI,CAACjF,IAAI,CAACmF,UAAU,CAACjB,OAAO,CAChC,CAAC;QAED,IAAIY,YAAY,EAAE;UACd;UACA,MAAMvD,aAAa,GAAG,IAAI,CAAChB,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAACgB,QAAQ,CAAC,UAAU,CAAC;UACzE,IAAID,aAAa,EAAE;YACfA,aAAa,CAACG,WAAW,CAAC,OAAO,EAAEoD,YAAY,CAACM,IAAI,CAAC;YACrD7D,aAAa,CAACG,WAAW,CAAC,WAAW,EAAEmC,YAAY,CAAC;YACpDtE,YAAY,CAACC,IAAI,CAAC,mCAAmCsF,YAAY,CAACM,IAAI,EAAE,EAAE;cAAE3F,QAAQ,EAAE;YAAK,CAAC,CAAC;UACjG;QACJ,CAAC,MAAM;UACH;UACAvC,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAE+G,OAAO,CAAC;;UAEpE;UACA,IAAImB,sBAAsB,GAAGrB,aAAa;UAC1C,IAAIA,aAAa,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;YACpD,IAAI;cACA,MAAMsB,YAAY,GAAG,IAAItF,IAAI,CAACgE,aAAa,CAAC;cAC5C,IAAI,CAACW,KAAK,CAACW,YAAY,CAACzE,OAAO,CAAC,CAAC,CAAC,EAAE;gBAChC;gBACAwE,sBAAsB,GAAGC,YAAY,CAACC,kBAAkB,CAAC,OAAO,EAAE;kBAC9DlB,GAAG,EAAE,SAAS;kBACdK,KAAK,EAAE,OAAO;kBACdF,IAAI,EAAE;gBACV,CAAC,CAAC;cACN;YACJ,CAAC,CAAC,OAAOhH,KAAK,EAAE;cACZN,OAAO,CAACM,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;YACjE;UACJ;UAEAsG,UAAU,CAAC3E,QAAQ,CAACkG,sBAAsB,CAAC;;UAE3C;UACAxC,UAAU,CAACrF,KAAK,CAAC,0CAA0C0G,OAAO,EAAE,EAAE;YAClER,KAAK,EAAE,yBAAyB;YAChCC,OAAO,EAAE;UACb,CAAC,CAAC;QACN;MACJ,CAAC,CAAC,CACDf,KAAK,CAACpF,KAAK,IAAI;QACZN,OAAO,CAACM,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvDqF,UAAU,CAACrF,KAAK,CAAC,qCAAqC,EAAE;UACpDkG,KAAK,EAAE,OAAO;UACdC,OAAO,EAAEnG,KAAK,CAACgI;QACnB,CAAC,CAAC;MACN,CAAC,CAAC;IACV;IAEOC,kBAAkBA,CAAA,EAAS;MAC9BvI,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;MAElE,MAAMmD,KAAK,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;MAC5C,IAAI,CAACF,KAAK,EAAE;QACRpD,OAAO,CAACM,KAAK,CAAC,qCAAqC,CAAC;QACpD+B,YAAY,CAACC,IAAI,CAAC,sCAAsC,EAAE;UAAEC,QAAQ,EAAE;QAAK,CAAC,CAAC;QAC7E;MACJ;MAEA,MAAMiG,MAAM,GAAGpF,KAAK,CAACkB,QAAQ,CAAC,UAAU,CAAC;MACzC,IAAI,CAACkE,MAAM,EAAE;QACTxI,OAAO,CAACM,KAAK,CAAC,+CAA+C,CAAC;QAC9D+B,YAAY,CAACC,IAAI,CAAC,+CAA+C,EAAE;UAAEC,QAAQ,EAAE;QAAK,CAAC,CAAC;QACtF;MACJ;MAEA,MAAMoC,YAAY,GAAG6D,MAAM,CAACnI,OAAO,CAAC,CAAC;MACrCL,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAE0E,YAAY,CAAC;MAE7E,IAAI,CAACA,YAAY,EAAE;QACf3E,OAAO,CAACM,KAAK,CAAC,8CAA8C,CAAC;QAC7D+B,YAAY,CAACC,IAAI,CAAC,6CAA6C,EAAE;UAAEC,QAAQ,EAAE;QAAK,CAAC,CAAC;QACpF;MACJ;MAEA,IAAI;QACA;QACA,MAAMkG,QAAQ,GAAGnC,IAAI,CAACC,SAAS,CAAC5B,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;QACtD3E,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEwI,QAAQ,CAACC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;QAE3F,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,QAAQ,CAAC,EAAE;UAAEI,IAAI,EAAE;QAAiC,CAAC,CAAC;QAC7E7I,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAE0I,IAAI,CAACG,IAAI,CAAC;QAEnE,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;QACrC3I,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAE8I,GAAG,CAAC;;QAEtD;QACA,MAAMG,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;QACxCF,IAAI,CAACG,IAAI,GAAGN,GAAG;QACfG,IAAI,CAACI,QAAQ,GAAG,YAAY3E,YAAY,CAAC4E,EAAE,IAAI,SAAS,IAAI,IAAIzG,IAAI,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO;QACzGiG,IAAI,CAACM,KAAK,CAACC,OAAO,GAAG,MAAM;QAE3BzJ,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEiJ,IAAI,CAACI,QAAQ,CAAC;;QAEtE;QACAH,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,IAAI,CAAC;QAC/BlJ,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;QAEtDiJ,IAAI,CAACU,KAAK,CAAC,CAAC;QACZ5J,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;;QAEjD;QACA4J,UAAU,CAAC,MAAM;UACbV,QAAQ,CAACO,IAAI,CAACI,WAAW,CAACZ,IAAI,CAAC;UAC/BF,GAAG,CAACe,eAAe,CAAChB,GAAG,CAAC;UACxB/I,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;QAC1D,CAAC,EAAE,GAAG,CAAC;QAEPoC,YAAY,CAACC,IAAI,CAAC,iCAAiC,EAAE;UAAEC,QAAQ,EAAE;QAAK,CAAC,CAAC;MAE5E,CAAC,CAAC,OAAOjC,KAAK,EAAE;QACZN,OAAO,CAACM,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;QACpE+B,YAAY,CAACC,IAAI,CAAC,+BAA+B,EAAE;UAAEC,QAAQ,EAAE;QAAK,CAAC,CAAC;;QAEtE;QACA,IAAI;UACA,MAAMkG,QAAQ,GAAGnC,IAAI,CAACC,SAAS,CAAC5B,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;UACtD,MAAMqF,SAAS,GAAGC,MAAM,CAACC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC;UAC3C,IAAIF,SAAS,EAAE;YACXA,SAAS,CAACb,QAAQ,CAACgB,KAAK,CAAC,OAAO,GAAG1B,QAAQ,GAAG,QAAQ,CAAC;YACvDuB,SAAS,CAACb,QAAQ,CAAC3C,KAAK,GAAG,YAAY7B,YAAY,CAAC4E,EAAE,IAAI,SAAS,EAAE;YACrEvJ,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;UACvE;QACJ,CAAC,CAAC,OAAOmK,aAAa,EAAE;UACpBpK,OAAO,CAACM,KAAK,CAAC,6CAA6C,EAAE8J,aAAa,CAAC;QAC/E;MACJ;IACJ;IAEOC,eAAeA,CAAC5I,MAAW,EAAQ;MACtCzB,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAEwB,MAAM,CAAC;;MAEvE;MACA,MAAM6I,KAAK,GAAG7I,MAAM,CAACC,YAAY,CAAC,UAAU,CAAC;MAC7C,IAAI,CAAC4I,KAAK,EAAE;QACRtK,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;QAChE;MACJ;MAEAD,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEqK,KAAK,CAAC;;MAEtD;MACA,IAAIC,QAAQ,GAAGD,KAAK,CAACE,iBAAiB,CAAC,WAAW,CAAC;MACnD,IAAI,CAACD,QAAQ,EAAE;QACXvK,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;QACjEsK,QAAQ,GAAGD,KAAK,CAACE,iBAAiB,CAAC,CAAC;MACxC;MAEA,IAAI,CAACD,QAAQ,IAAI,CAACA,QAAQ,CAACE,SAAS,EAAE;QAClCzK,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;QAClED,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEsK,QAAQ,CAAC;;QAEvD;QACA,MAAMG,IAAI,GAAG,IAAI,CAAC1I,cAAc,CAAC,2BAA2B,CAAC;QAC7D,IAAI0I,IAAI,EAAE;UACN1K,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEyK,IAAI,CAAC;UACtD,MAAMC,KAAK,GAAGD,IAAI,CAACE,QAAQ,CAAC,CAAC;UAC7B5K,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAE0K,KAAK,CAACzD,MAAM,CAAC;;UAEpE;UACA,KAAK,IAAI2D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACzD,MAAM,EAAE2D,CAAC,EAAE,EAAE;YACnC,IAAIF,KAAK,CAACE,CAAC,CAAC,KAAKP,KAAK,EAAE;cACpBtK,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAE4K,CAAC,CAAC;cACpE,MAAMC,KAAK,GAAGJ,IAAI,CAACpG,QAAQ,CAAC,WAAW,CAAC;cACxC,IAAIwG,KAAK,EAAE;gBACP,MAAMlK,IAAI,GAAGkK,KAAK,CAACzK,OAAO,CAAC,CAAC;gBAC5B,MAAMiF,SAAS,GAAG1E,IAAI,EAAEC,mBAAmB,IAAI,EAAE;gBACjD,IAAIyE,SAAS,CAACuF,CAAC,CAAC,EAAE;kBACd7K,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEqF,SAAS,CAACuF,CAAC,CAAC,CAAC;kBACvE,IAAI,CAACE,uBAAuB,CAACzF,SAAS,CAACuF,CAAC,CAAC,CAAC;kBAC1C;gBACJ;cACJ;cACA;YACJ;UACJ;UAEA7K,OAAO,CAACC,GAAG,CAAC,4DAA4D,CAAC;QAC7E;QACA;MACJ;MAEA,MAAM+K,SAAS,GAAGT,QAAQ,CAACE,SAAS,CAAC,CAAC;MACtCzK,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAE+K,SAAS,CAAC;MAE9D,IAAI,CAACD,uBAAuB,CAACC,SAAS,CAAC;IAC3C;IAEQD,uBAAuBA,CAACC,SAAc,EAAQ;MAClD,IAAIA,SAAS,IAAIA,SAAS,CAAC3J,QAAQ,EAAE;QACjC,MAAM4J,UAAU,GAAGD,SAAS,CAAC3J,QAAQ;QACrCrB,OAAO,CAACC,GAAG,CAAC,+CAA+C,EAAEgL,UAAU,EAAE,gBAAgB,EAAED,SAAS,CAAC;QACrGhL,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEgL,UAAU,CAAC;;QAE7D;QACA,IAAI,CAACC,gBAAgB,CAACD,UAAU,CAAC;;QAEjC;QACA,MAAME,UAAU,GAAG,IAAI,CAAC9H,aAAa,CAAC,CAAC,CAAC+H,iBAAiB,CAAC,CAAQ;QAClE,MAAMC,OAAO,GAAGF,UAAU,CAACG,SAAS,CAAC,CAAC;QACtCD,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAE;UAAEN,UAAU,EAAEA;QAAW,CAAC,CAAC;MACzE,CAAC,MAAM;QACHjL,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;MACnE;IACJ;IAEQiL,gBAAgBA,CAACD,UAAkB,EAAQ;MAC/CjL,OAAO,CAACC,GAAG,CAAC,+CAA+C,EAAEgL,UAAU,CAAC;;MAExE;MACA,MAAMjG,iBAAiB,GAAG,mCAAmC;MAE7D,IAAI;QACA,MAAMwG,YAAY,GAAG,IAAI3L,SAAS,CAAC,CAAC;;QAEpC;QACA2L,YAAY,CAACrL,QAAQ,CAAC6E,iBAAiB,EAAE5E,SAAS,EAAE,KAAK,CAAC;QAE1D,MAAMqL,KAAK,GAAGD,YAAY,CAACnL,OAAO,CAAC,CAAC;QACpCL,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAEwL,KAAK,CAAC;QAExE,MAAMnG,SAAS,GAAGmG,KAAK,EAAEnG,SAAS,IAAI,EAAE;QACxCtF,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEqF,SAAS,CAAC;;QAEpE;QACA,MAAMoG,aAAa,GAAGtK,QAAQ,CAAC6J,UAAU,CAAC;QAC1C,MAAMU,QAAQ,GAAGrG,SAAS,CAACwC,IAAI,CAAE/B,IAAS,IAAKA,IAAI,CAAC1E,QAAQ,KAAKqK,aAAa,CAAC;QAE/E,IAAIC,QAAQ,EAAE;UACV3L,OAAO,CAACC,GAAG,CAAC,sDAAsD,EAAE0L,QAAQ,CAAC;;UAG7E;UACA,IAAIA,QAAQ,CAACC,iBAAiB,IAAID,QAAQ,CAACC,iBAAiB,CAAC1E,MAAM,GAAG,CAAC,EAAE;YACrElH,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAE0L,QAAQ,CAACC,iBAAiB,CAAC1E,MAAM,CAAC;YAC7FlH,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAE0L,QAAQ,CAACC,iBAAiB,CAAC;;YAEhF;YACAD,QAAQ,CAACC,iBAAiB,CAACC,OAAO,CAAC,CAACC,IAAS,EAAEC,KAAa,KAAK;cAC7D/L,OAAO,CAACC,GAAG,CAAC,8BAA8B8L,KAAK,GAAG,CAAC,GAAG,EAAE;gBACpDC,MAAM,EAAEF,IAAI,CAACE,MAAM;gBACnB3K,QAAQ,EAAEyK,IAAI,CAACzK,QAAQ;gBACvB4K,MAAM,EAAEH,IAAI,CAACG,MAAM;gBACnBC,SAAS,EAAEJ,IAAI,CAACI,SAAS;gBACzBC,QAAQ,EAAEL,IAAI,CAACK,QAAQ;gBACvBC,QAAQ,EAAEN,IAAI,CAACM,QAAQ;gBACvBC,OAAO,EAAEP,IAAI,CAACO,OAAO;gBACrBC,UAAU,EAAER,IAAI,CAACQ,UAAU;gBAC3BC,OAAO,EAAET,IAAI,CAACS,OAAO;gBACrBC,OAAO,EAAEV,IAAI,CAACU,OAAO;gBACrBC,SAAS,EAAEX,IAAI,CAACW,SAAS;gBACzBC,WAAW,EAAEZ,IAAI,CAACY,WAAW;gBAC7BC,QAAQ,EAAEb,IAAI,CAACa,QAAQ;gBACvBC,UAAU,EAAEd,IAAI,CAACc,UAAU;gBAC3BC,cAAc,EAAEf,IAAI,CAACe;cACzB,CAAC,CAAC;YACN,CAAC,CAAC;UACN,CAAC,MAAM;YACH7M,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;UACzE;;UAEA;UACA,MAAMkD,cAAc,GAAG,IAAItD,SAAS,CAAC,CAAC;UACtCsD,cAAc,CAAC1C,OAAO,CAACkL,QAAQ,CAAC;;UAEhC;UACA,MAAMvI,KAAK,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;UAC5C,IAAIF,KAAK,EAAE;YACPA,KAAK,CAACG,QAAQ,CAACJ,cAAc,EAAE,UAAU,CAAC;YAC1CnD,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;;YAEpE;YACA,IAAI,CAACuD,cAAc,CAAC,CAAC;UACzB;QACJ,CAAC,MAAM;UACHxD,OAAO,CAACC,GAAG,CAAC,0EAA0E,CAAC;UACvF,IAAI,CAAC6M,wBAAwB,CAAC7B,UAAU,CAAC;QAC7C;MACJ,CAAC,CAAC,OAAO3K,KAAK,EAAE;QACZN,OAAO,CAACM,KAAK,CAAC,+DAA+D,EAAEA,KAAK,CAAC;QACrF,IAAI,CAACwM,wBAAwB,CAAC7B,UAAU,CAAC;MAC7C;IACJ;IAEQ6B,wBAAwBA,CAAC7B,UAAkB,EAAQ;MACvDjL,OAAO,CAACC,GAAG,CAAC,8DAA8D,EAAEgL,UAAU,CAAC;;MAEvF;MACA,MAAM1J,YAAY,GAAG;QACjB,UAAU,EAAEH,QAAQ,CAAC6J,UAAU,CAAC;QAChC,QAAQ,EAAE7J,QAAQ,CAAC6J,UAAU,CAAC;QAC9B,UAAU,EAAE,SAAS;QACrB,WAAW,EAAE,KAAK;QAClB,WAAW,EAAE,kBAAkB;QAC/B,WAAW,EAAE,eAAe;QAC5B,UAAU,EAAE,KAAK;QACjB,SAAS,EAAE,EAAE;QACb,UAAU,EAAE,GAAG;QACf,SAAS,EAAE,sBAAsB;QACjC,UAAU,EAAE,sBAAsB;QAClC,MAAM,EAAE,KAAK;QACb,SAAS,EAAE,IAAI;QACf,UAAU,EAAE,IAAI;QAChB,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,aAAa;QACxB,SAAS,EAAE,QAAQ;QACnB,UAAU,EAAE,IAAI;QAChB,YAAY,EAAE,QAAQ;QACtB,OAAO,EAAE,IAAI;QACb,UAAU,EAAE,UAAU;QACtB,SAAS,EAAE,IAAI;QACf,SAAS,EAAE,IAAI;QACf,SAAS,EAAE,CAAC,CAAC;QACb,SAAS,EAAE,CAAC;QACZ,mBAAmB,EAAE,CACjB;UACI,UAAU,EAAE7J,QAAQ,CAAC6J,UAAU,CAAC;UAChC,QAAQ,EAAE,CAAC;UACX,UAAU,EAAE,CAAC;UACb,QAAQ,EAAE,SAAS;UACnB,SAAS,EAAE,IAAI;UACf,SAAS,EAAE,GAAG;UACd,UAAU,EAAE,IAAI;UAChB,UAAU,EAAE,SAAS;UACrB,SAAS,EAAE,IAAI;UACf,UAAU,EAAE,CAAC;UACb,UAAU,EAAE,IAAI;UAChB,UAAU,EAAE,GAAG;UACf,QAAQ,EAAE,eAAe;UACzB,QAAQ,EAAE,mCAAmC;UAC7C,OAAO,EAAE,aAAa;UACtB,UAAU,EAAE,SAAS;UACrB,UAAU,EAAE,KAAK;UACjB,WAAW,EAAE,GAAG;UAChB,SAAS,EAAE,GAAG;UACd,YAAY,EAAE,GAAG;UACjB,UAAU,EAAE,GAAG;UACf,UAAU,EAAE,CAAC;UACb,UAAU,EAAE,CAAC;UACb,UAAU,EAAE,CAAC;UACb,SAAS,EAAE,sBAAsB;UACjC,SAAS,EAAE,sBAAsB;UACjC,SAAS,EAAE,sBAAsB;UACjC,UAAU,EAAE,gBAAgB;UAC5B,UAAU,EAAE,KAAK;UACjB,UAAU,EAAE,KAAK;UACjB,UAAU,EAAE,EAAE;UACd,UAAU,EAAE,CAAC;UACb,UAAU,EAAE,GAAG;UACf,MAAM,EAAE,GAAG;UACX,MAAM,EAAE,CAAC;UACT,MAAM,EAAE,CAAC;UACT,MAAM,EAAE,CAAC;UACT,MAAM,EAAE,CAAC;UACT,MAAM,EAAE,CAAC;UACT,MAAM,EAAE,GAAG;UACX,QAAQ,EAAE,WAAW;UACrB,WAAW,EAAE,CAAC;UACd,WAAW,EAAE,CAAC;UACd,WAAW,EAAE,CAAC;UACd,WAAW,EAAE,CAAC;UACd,QAAQ,EAAE;QACd,CAAC;MAET,CAAC;MAED,MAAM9H,cAAc,GAAG,IAAItD,SAAS,CAAC,CAAC;MACtCsD,cAAc,CAAC1C,OAAO,CAACc,YAAY,CAAC;MAEpC,MAAM6B,KAAK,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;MAC5C,IAAIF,KAAK,EAAE;QACPA,KAAK,CAACG,QAAQ,CAACJ,cAAc,EAAE,UAAU,CAAC;QAC1CnD,OAAO,CAACC,GAAG,CAAC,gEAAgE,CAAC;;QAE7E;QACA,IAAI,CAACuD,cAAc,CAAC,CAAC;MACzB;IACJ;IAEOA,cAAcA,CAAA,EAAS;MAC1BxD,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;MAC3D,MAAM8M,SAAS,GAAG,+BAA+B;MAEjD9H,KAAK,CAAC8H,SAAS,CAAC,CACX7H,IAAI,CAACC,QAAQ,IAAI;QACdnF,OAAO,CAACC,GAAG,CAAC,+CAA+C,EAAEkF,QAAQ,CAAC6H,MAAM,CAAC;QAC7E,OAAO7H,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC1B,CAAC,CAAC,CACDF,IAAI,CAACtE,IAAI,IAAI;QACVZ,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAEW,IAAI,CAAC;QAChE,MAAMwC,KAAK,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;QAC5C,IAAIF,KAAK,EAAE;UACP,MAAM6J,YAAY,GAAG,IAAIpN,SAAS,CAAC,CAAC;UACpCoN,YAAY,CAACxM,OAAO,CAACG,IAAI,CAAC;UAC1BwC,KAAK,CAACG,QAAQ,CAAC0J,YAAY,EAAE,QAAQ,CAAC;UACtCjN,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;UAClED,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEgN,YAAY,CAAC5M,OAAO,CAAC,CAAC,CAAC;QACnF,CAAC,MAAM;UACHL,OAAO,CAACM,KAAK,CAAC,0DAA0D,CAAC;QAC7E;MACJ,CAAC,CAAC,CACDoF,KAAK,CAACpF,KAAK,IAAI;QACZN,OAAO,CAACM,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD,CAAC,CAAC;IACV;IAEQoC,oBAAoBA,CAAA,EAAS;MACjC1C,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;MAE9D,MAAMkL,UAAU,GAAG,IAAI,CAAC9H,aAAa,CAAC,CAAC,CAAC+H,iBAAiB,CAAC,CAAQ;MAClE,MAAMC,OAAO,GAAGF,UAAU,CAACG,SAAS,CAAC,CAAC;;MAEtC;MACAD,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAE;QAAEN,UAAU,EAAE;MAAM,CAAC,CAAC;MAChEjL,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;IACvE;IAEQwF,kBAAkBA,CAAA,EAAS;MAC/BzF,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;MAE5D,MAAMkL,UAAU,GAAG,IAAI,CAAC9H,aAAa,CAAC,CAAC,CAAC+H,iBAAiB,CAAC,CAAQ;MAClE,MAAMC,OAAO,GAAGF,UAAU,CAACG,SAAS,CAAC,CAAC;MAEtCD,OAAO,CAACE,KAAK,CAAC,mBAAmB,CAAC;MAClCvL,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;IAClE;IAEQ0B,YAAYA,CAAA,EAAS;MACzB,MAAMuL,QAAe,GAAG,EAAE;;MAE1B;MACA,MAAMnL,eAAe,GAAG,IAAI,CAACC,cAAc,CAAC,6BAA6B,CAAC;MAC1E,IAAID,eAAe,IAAIA,eAAe,CAACoL,QAAQ,CAAC,CAAC,EAAE;QAC/C,MAAMC,cAAc,GAAGrL,eAAe,CAACoL,QAAQ,CAAC,CAAC;QACjDnN,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAE8B,eAAe,CAAC;QACzE/B,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEmN,cAAc,CAAC;;QAExE;QACA,IAAIA,cAAc,IAAI,OAAOA,cAAc,KAAK,QAAQ,IAAIA,cAAc,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;UACxF,MAAM,CAACC,YAAY,EAAEC,UAAU,CAAC,GAAGH,cAAc,CAACnK,KAAK,CAAC,KAAK,CAAC;UAC9D,IAAIqK,YAAY,EAAE;YACd,MAAME,SAAS,GAAG,IAAI1K,IAAI,CAACwK,YAAY,CAAC;YACxCJ,QAAQ,CAAC3H,IAAI,CAAC;cAAEkI,IAAI,EAAE,YAAY;cAAEC,QAAQ,EAAE,IAAI;cAAEC,KAAK,EAAEH;YAAU,CAAC,CAAC;UAC3E;UACA,IAAID,UAAU,EAAE;YACZ,MAAMK,OAAO,GAAG,IAAI9K,IAAI,CAACyK,UAAU,CAAC;YACpCL,QAAQ,CAAC3H,IAAI,CAAC;cAAEkI,IAAI,EAAE,YAAY;cAAEC,QAAQ,EAAE,IAAI;cAAEC,KAAK,EAAEC;YAAQ,CAAC,CAAC;UACzE;QACJ;MACJ;;MAEA;MACA,MAAM1L,YAAY,GAAG,IAAI,CAACF,cAAc,CAAC,0BAA0B,CAAC;MACpE,IAAIE,YAAY,IAAIA,YAAY,CAAC2L,cAAc,CAAC,CAAC,IAAI3L,YAAY,CAAC2L,cAAc,CAAC,CAAC,KAAK,EAAE,EAAE;QACvFX,QAAQ,CAAC3H,IAAI,CAAC;UAAEkI,IAAI,EAAE,UAAU;UAAEC,QAAQ,EAAE,IAAI;UAAEC,KAAK,EAAEzL,YAAY,CAAC2L,cAAc,CAAC;QAAE,CAAC,CAAC;MAC7F;;MAEA;MACA,MAAMzL,WAAW,GAAG,IAAI,CAACJ,cAAc,CAAC,yBAAyB,CAAC;MAClE,IAAII,WAAW,IAAIA,WAAW,CAACyL,cAAc,CAAC,CAAC,IAAIzL,WAAW,CAACyL,cAAc,CAAC,CAAC,KAAK,EAAE,EAAE;QACpFX,QAAQ,CAAC3H,IAAI,CAAC;UAAEkI,IAAI,EAAE,WAAW;UAAEC,QAAQ,EAAE,IAAI;UAAEC,KAAK,EAAEvL,WAAW,CAACyL,cAAc,CAAC;QAAE,CAAC,CAAC;MAC7F;;MAEA;MACA,MAAMC,YAAY,GAAG,IAAI,CAAClO,cAAc,CAACS,OAAO,CAAC,CAAC;MAClD,IAAI0N,YAAY,GAAGD,YAAY;MAE/B,IAAIZ,QAAQ,CAAChG,MAAM,GAAG,CAAC,EAAE;QACrB6G,YAAY,GAAG,IAAI,CAACC,UAAU,CAACF,YAAY,EAAEZ,QAAQ,CAAC;MAC1D;MAEA,IAAI,CAACpN,cAAc,CAACW,OAAO,CAACsN,YAAY,CAAC;IAC7C;IAEQC,UAAUA,CAACpN,IAAS,EAAEqN,OAAc,EAAO;MAC/C,IAAI,CAACrN,IAAI,IAAI,CAACA,IAAI,CAACC,mBAAmB,EAAE;QACpC,OAAOD,IAAI;MACf;MAEA,MAAMsN,aAAa,GAAGtN,IAAI,CAACC,mBAAmB,CAACsN,MAAM,CAAEpI,IAAS,IAAK;QACjE,OAAOkI,OAAO,CAACG,KAAK,CAACD,MAAM,IAAI;UAC3B,MAAMR,KAAK,GAAG5H,IAAI,CAACoI,MAAM,CAACV,IAAI,CAAC;UAC/B,MAAMY,WAAW,GAAGF,MAAM,CAACR,KAAK;UAEhC,QAAQQ,MAAM,CAACT,QAAQ;YACnB,KAAK,IAAI;cACL,OAAOC,KAAK,KAAKU,WAAW;YAChC,KAAK,IAAI;cACL,IAAIF,MAAM,CAACV,IAAI,KAAK,YAAY,EAAE;gBAC9B,MAAMa,QAAQ,GAAG,IAAIxL,IAAI,CAAC6K,KAAK,CAAC;gBAChC,OAAOW,QAAQ,IAAID,WAAW;cAClC;cACA,OAAOV,KAAK,IAAIU,WAAW;YAC/B,KAAK,IAAI;cACL,IAAIF,MAAM,CAACV,IAAI,KAAK,YAAY,EAAE;gBAC9B,MAAMa,QAAQ,GAAG,IAAIxL,IAAI,CAAC6K,KAAK,CAAC;gBAChC,OAAOW,QAAQ,IAAID,WAAW;cAClC;cACA,OAAOV,KAAK,IAAIU,WAAW;YAC/B;cACI,OAAO,IAAI;UACnB;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;MAEF,OAAO;QACH,GAAGzN,IAAI;QACPC,mBAAmB,EAAEqN;MACzB,CAAC;IACL;;IAEA;IACQlM,cAAcA,CAACuM,SAAiB,EAAO;MAC3C;MACA;MACA,OAAO,IAAI;IACf;IAEQnD,iBAAiBA,CAAA,EAAgB;MACrC;MACA;MACA,OAAO,IAAI;IACf;;IAEA;IACOoD,aAAaA,CAACC,UAAe,EAAQ;MACxCzO,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAEwO,UAAU,CAAC;MAC9E,IAAI,CAACA,UAAU,GAAGA,UAAU;MAC5B,IAAI,CAACzM,cAAc,GAAIuM,SAAiB,IAAK;QACzC,MAAMG,OAAO,GAAGD,UAAU,CAACE,IAAI,CAACJ,SAAS,CAAC;QAC1CvO,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEsO,SAAS,EAAEG,OAAO,CAAC;QAC/E,OAAOA,OAAO;MAClB,CAAC;MACD,IAAI,CAACtD,iBAAiB,GAAG,MAAMqD,UAAU,CAACrD,iBAAiB,CAAC,CAAC;IACjE;;IAEA;IACO/H,aAAaA,CAAA,EAAQ;MACxB,OAAO,IAAI,CAACoL,UAAU;IAC1B;;IAEA;IACOG,eAAeA,CAAA,EAAS;MAC3B5O,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;;MAE9D;MACA,MAAMoE,aAAa,GAAG,IAAI,CAAChB,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAACgB,QAAQ,CAAC,UAAU,CAAC;MACzE,IAAI,CAACD,aAAa,EAAE;QAChBrE,OAAO,CAACM,KAAK,CAAC,gDAAgD,CAAC;QAC/D;MACJ;MAEA,MAAMqE,YAAY,GAAGN,aAAa,CAAChE,OAAO,CAAC,CAAC;MAC5C,IAAI,CAACsE,YAAY,CAACC,aAAa,EAAE;QAC7BvC,YAAY,CAACC,IAAI,CAAC,oDAAoD,EAAE;UAAEC,QAAQ,EAAE;QAAK,CAAC,CAAC;QAC3F;MACJ;;MAEA;MACA,IAAI,CAACsM,sBAAsB,CAAC,CAAC;;MAE7B;MACA,MAAMC,MAAM,GAAG,IAAI,CAACzL,aAAa,CAAC,CAAC,CAACsL,IAAI,CAAC,yBAAyB,CAAC;MACnE,IAAIG,MAAM,EAAE;QACRA,MAAM,CAAC5E,IAAI,CAAC,CAAC;MACjB,CAAC,MAAM;QACHlK,OAAO,CAACM,KAAK,CAAC,2DAA2D,CAAC;MAC9E;IACJ;IAEQuO,sBAAsBA,CAAA,EAAS;MACnC7O,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;MACnE,MAAM8O,YAAY,GAAG,uCAAuC;MAE5D9J,KAAK,CAAC8J,YAAY,CAAC,CACd7J,IAAI,CAACC,QAAQ,IAAI;QACdnF,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAEkF,QAAQ,CAAC6H,MAAM,CAAC;QAChF,OAAO7H,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC1B,CAAC,CAAC,CACDF,IAAI,CAACtE,IAAI,IAAI;QACVZ,OAAO,CAACC,GAAG,CAAC,gDAAgD,EAAEW,IAAI,CAAC;;QAEnE;QACA,MAAMyD,aAAa,GAAG,IAAI,CAAChB,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAACgB,QAAQ,CAAC,UAAU,CAAC;QACzE,MAAM0K,YAAY,GAAG3K,aAAa,GAAGA,aAAa,CAAChE,OAAO,CAAC,CAAC,CAACuL,iBAAiB,IAAI,EAAE,GAAG,EAAE;QAEzF5L,OAAO,CAACC,GAAG,CAAC,+CAA+C,EAAE+O,YAAY,CAAC9H,MAAM,CAAC;QACjF,IAAI8H,YAAY,CAAC9H,MAAM,GAAG,CAAC,EAAE;UACzBlH,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;UAC5D+O,YAAY,CAACnD,OAAO,CAAC,CAACC,IAAS,EAAEC,KAAa,KAAK;YAC/C/L,OAAO,CAACC,GAAG,CAAC,UAAU8L,KAAK,eAAeD,IAAI,CAACmD,QAAQ,cAAcnD,IAAI,CAACoD,MAAM,GAAG,CAAC;UACxF,CAAC,CAAC;QACN;QACAlP,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEW,IAAI,CAACuO,SAAS,CAACjI,MAAM,CAAC;QAChFlH,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;QACnEW,IAAI,CAACuO,SAAS,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACvD,OAAO,CAAC,CAACwD,GAAQ,EAAEtD,KAAa,KAAK;UAC5D/L,OAAO,CAACC,GAAG,CAAC,SAAS8L,KAAK,aAAasD,GAAG,CAACpD,MAAM,gBAAgBoD,GAAG,CAAClD,QAAQ,GAAG,CAAC;QACrF,CAAC,CAAC;;QAEF;QACAvL,IAAI,CAACuO,SAAS,CAACtD,OAAO,CAAEwD,GAAQ,IAAK;UACjCA,GAAG,CAACC,QAAQ,GAAG,KAAK;;UAEpB;UACAD,GAAG,CAACE,iBAAiB,GAAG,KAAK;;UAE7B;UACA,IAAIP,YAAY,CAAC9H,MAAM,GAAG,CAAC,EAAE;YACzBlH,OAAO,CAACC,GAAG,CAAC,2CAA2CoP,GAAG,CAACpD,MAAM,KAAKoD,GAAG,CAAClD,QAAQ,aAAa6C,YAAY,CAAC9H,MAAM,iBAAiB,CAAC;YAEpI,MAAMsI,cAAc,GAAGR,YAAY,CAACS,IAAI,CAAE3D,IAAS,IAAK;cACpD,MAAM4D,OAAO,GAAG5D,IAAI,CAACmD,QAAQ,KAAKI,GAAG,CAACpD,MAAM,IAAIH,IAAI,CAACoD,MAAM,KAAKG,GAAG,CAAClD,QAAQ;cAC5EnM,OAAO,CAACC,GAAG,CAAC,qCAAqC6L,IAAI,CAACmD,QAAQ,UAAUI,GAAG,CAACpD,MAAM,SAASH,IAAI,CAACoD,MAAM,UAAUG,GAAG,CAAClD,QAAQ,OAAOuD,OAAO,EAAE,CAAC;cAC7I,IAAIA,OAAO,EAAE;gBACT1P,OAAO,CAACC,GAAG,CAAC,kCAAkCoP,GAAG,CAACpD,MAAM,KAAKoD,GAAG,CAAClD,QAAQ,2BAA2BL,IAAI,CAACmD,QAAQ,KAAKnD,IAAI,CAACoD,MAAM,GAAG,CAAC;cACzI;cACA,OAAOQ,OAAO;YAClB,CAAC,CAAC;YACFL,GAAG,CAACE,iBAAiB,GAAGC,cAAc;UAC1C,CAAC,MAAM;YACHxP,OAAO,CAACC,GAAG,CAAC,yEAAyEoP,GAAG,CAACpD,MAAM,EAAE,CAAC;UACtG;UAEAjM,OAAO,CAACC,GAAG,CAAC,kCAAkCoP,GAAG,CAACpD,MAAM,KAAKoD,GAAG,CAAClD,QAAQ,0BAA0BkD,GAAG,CAACE,iBAAiB,EAAE,CAAC;QAC/H,CAAC,CAAC;;QAEF;QACA,MAAMI,SAAS,GAAG;UACdR,SAAS,EAAEvO,IAAI,CAACuO,SAAS;UACzBS,aAAa,EAAE,CAAC;UAChBC,aAAa,EAAE,CAAC;UAChBC,aAAa,EAAE;QACnB,CAAC;QAED,MAAM1M,KAAK,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;QAC5C,IAAIF,KAAK,EAAE;UACP,MAAM2M,eAAe,GAAG,IAAIlQ,SAAS,CAAC,CAAC;UACvCkQ,eAAe,CAACtP,OAAO,CAACkP,SAAS,CAAC;UAClCvM,KAAK,CAACG,QAAQ,CAACwM,eAAe,EAAE,oBAAoB,CAAC;UACrD/P,OAAO,CAACC,GAAG,CAAC,kEAAkE,CAAC;QACnF,CAAC,MAAM;UACHD,OAAO,CAACM,KAAK,CAAC,6DAA6D,CAAC;QAChF;MACJ,CAAC,CAAC,CACDoF,KAAK,CAACpF,KAAK,IAAI;QACZN,OAAO,CAACM,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;QAC9D+B,YAAY,CAACC,IAAI,CAAC,wCAAwC,EAAE;UAAEC,QAAQ,EAAE;QAAK,CAAC,CAAC;MACnF,CAAC,CAAC;IACV;IAIOyN,gBAAgBA,CAACvO,MAAW,EAAQ;MACvC,MAAMwO,UAAU,GAAGxO,MAAM,CAACC,YAAY,CAAC,OAAO,CAAC,CAAC2F,WAAW,CAAC,CAAC;MAC7DrH,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEgQ,UAAU,CAAC;MAEjE,MAAMC,cAAc,GAAG,IAAI,CAAC7M,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAACgB,QAAQ,CAAC,oBAAoB,CAAC;MACpF,IAAI,CAAC4L,cAAc,EAAE;MAErB,MAAMtP,IAAI,GAAGsP,cAAc,CAAC7P,OAAO,CAAC,CAAC;MACrC,MAAM8O,SAAS,GAAGvO,IAAI,CAACuO,SAAS;;MAEhC;MACA,MAAMgB,iBAAiB,GAAGhB,SAAS,CAAChB,MAAM,CAAEkB,GAAQ,IAAK;QACrD,OAAOA,GAAG,CAACjD,QAAQ,CAAC/E,WAAW,CAAC,CAAC,CAACgG,QAAQ,CAAC4C,UAAU,CAAC,IAC/CZ,GAAG,CAACpD,MAAM,CAAC5E,WAAW,CAAC,CAAC,CAACgG,QAAQ,CAAC4C,UAAU,CAAC,IAC7CZ,GAAG,CAAClD,QAAQ,CAAC9E,WAAW,CAAC,CAAC,CAACgG,QAAQ,CAAC4C,UAAU,CAAC;MAC1D,CAAC,CAAC;;MAEF;MACAC,cAAc,CAAC1L,WAAW,CAAC,YAAY,EAAE2L,iBAAiB,CAAC;IAC/D;IAIOC,0BAA0BA,CAAC3O,MAAW,EAAQ;MACjD,MAAM4O,YAAY,GAAG5O,MAAM,CAACC,YAAY,CAAC,cAAc,CAAC,CAACwC,MAAM,CAAC,CAAC;MACjElE,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAEoQ,YAAY,CAAC;;MAExE;MACA,IAAI,CAACxB,sBAAsB,CAAC,CAAC;MAE7B,IAAIwB,YAAY,EAAE;QACd,MAAMH,cAAc,GAAG,IAAI,CAAC7M,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAACgB,QAAQ,CAAC,oBAAoB,CAAC;QACpF,IAAI,CAAC4L,cAAc,EAAE;QAErB,MAAMtP,IAAI,GAAGsP,cAAc,CAAC7P,OAAO,CAAC,CAAC;QACrC,MAAM8O,SAAS,GAAGvO,IAAI,CAACuO,SAAS;;QAEhC;QACA,MAAMgB,iBAAiB,GAAGhB,SAAS,CAAChB,MAAM,CAAEkB,GAAQ,IAAK;UACrD,OAAOA,GAAG,CAACiB,QAAQ,KAAKD,YAAY;QACxC,CAAC,CAAC;;QAEF;QACAH,cAAc,CAAC1L,WAAW,CAAC,YAAY,EAAE2L,iBAAiB,CAAC;MAC/D;IACJ;IAIOI,yBAAyBA,CAAC9O,MAAW,EAAQ;MAChDzB,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;MAE/D,MAAMiQ,cAAc,GAAG,IAAI,CAAC7M,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAACgB,QAAQ,CAAC,oBAAoB,CAAC;MACpF,IAAI,CAAC4L,cAAc,EAAE;MAErB,MAAMtP,IAAI,GAAGsP,cAAc,CAAC7P,OAAO,CAAC,CAAC;MACrC,MAAM8O,SAAS,GAAGvO,IAAI,CAACuO,SAAS;;MAEhC;MACA,MAAM9K,aAAa,GAAG,IAAI,CAAChB,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAACgB,QAAQ,CAAC,UAAU,CAAC;MACzE,MAAM0K,YAAY,GAAG3K,aAAa,GAAGA,aAAa,CAAChE,OAAO,CAAC,CAAC,CAACuL,iBAAiB,IAAI,EAAE,GAAG,EAAE;;MAEzF;MACA,MAAM4E,KAAK,GAAG,IAAI,CAACnN,aAAa,CAAC,CAAC,CAACsL,IAAI,CAAC,yBAAyB,CAAC;MAClE,MAAM8B,aAAa,GAAGD,KAAK,CAACE,gBAAgB,CAAC,CAAC;;MAE9C;MACAvB,SAAS,CAACtD,OAAO,CAAEwD,GAAQ,IAAK;QAC5BA,GAAG,CAACC,QAAQ,GAAGmB,aAAa,CAAChB,IAAI,CAAE1J,IAAS,IAAK;UAC7C,MAAM4K,OAAO,GAAG5K,IAAI,CAACyE,iBAAiB,CAAC,oBAAoB,CAAC;UAC5D,OAAOmG,OAAO,IAAIA,OAAO,CAACpM,WAAW,CAAC,UAAU,CAAC,KAAK8K,GAAG,CAAChO,QAAQ;QACtE,CAAC,CAAC;;QAEF;QACAgO,GAAG,CAACE,iBAAiB,GAAG,KAAK;;QAE7B;QACA,IAAIP,YAAY,CAAC9H,MAAM,GAAG,CAAC,EAAE;UACzB,MAAMsI,cAAc,GAAGR,YAAY,CAACS,IAAI,CAAE3D,IAAS,IAAK;YACpD,MAAM4D,OAAO,GAAG5D,IAAI,CAACmD,QAAQ,KAAKI,GAAG,CAACpD,MAAM,IAAIH,IAAI,CAACoD,MAAM,KAAKG,GAAG,CAAClD,QAAQ;YAC5E,IAAIuD,OAAO,EAAE;cACT1P,OAAO,CAACC,GAAG,CAAC,oDAAoDoP,GAAG,CAACpD,MAAM,KAAKoD,GAAG,CAAClD,QAAQ,2BAA2BL,IAAI,CAACmD,QAAQ,KAAKnD,IAAI,CAACoD,MAAM,GAAG,CAAC;YAC3J;YACA,OAAOQ,OAAO;UAClB,CAAC,CAAC;UACFL,GAAG,CAACE,iBAAiB,GAAGC,cAAc;QAC1C;MACJ,CAAC,CAAC;;MAEF;MACA,MAAMoB,iBAAiB,GAAGzB,SAAS,CAAChB,MAAM,CAAEkB,GAAQ,IAAKA,GAAG,CAACC,QAAQ,IAAI,CAACD,GAAG,CAACE,iBAAiB,CAAC;MAChG,MAAMK,aAAa,GAAGgB,iBAAiB,CAACC,MAAM,CAAC,CAACC,GAAW,EAAEzB,GAAQ,KAAKyB,GAAG,GAAGzB,GAAG,CAAC0B,OAAO,EAAE,CAAC,CAAC;MAC/F,MAAMlB,aAAa,GAAGe,iBAAiB,CAAC1J,MAAM;;MAE9C;MACA,MAAM8J,mBAAmB,GAAG7B,SAAS,CAAChB,MAAM,CAAEkB,GAAQ,IAAKA,GAAG,CAACC,QAAQ,IAAID,GAAG,CAACE,iBAAiB,CAAC;MACjG,MAAMO,aAAa,GAAGkB,mBAAmB,CAAC9J,MAAM;;MAEhD;MACAgJ,cAAc,CAAC1L,WAAW,CAAC,gBAAgB,EAAEoL,aAAa,CAAC;MAC3DM,cAAc,CAAC1L,WAAW,CAAC,gBAAgB,EAAEqL,aAAa,CAAC;MAC3DK,cAAc,CAAC1L,WAAW,CAAC,gBAAgB,EAAEsL,aAAa,CAAC;MAC3DI,cAAc,CAACzL,OAAO,CAAC,IAAI,CAAC;;MAE5B;MACA,IAAIqL,aAAa,GAAG,CAAC,EAAE;QACnB9P,OAAO,CAACC,GAAG,CAAC,yBAAyB6P,aAAa,iDAAiD,CAAC;MACxG;IACJ;IAIOmB,sBAAsBA,CAAA,EAAS;MAClCjR,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;MAE9D,MAAM6O,MAAM,GAAG,IAAI,CAACzL,aAAa,CAAC,CAAC,CAACsL,IAAI,CAAC,yBAAyB,CAAC;MACnE,IAAIG,MAAM,EAAE;QACRA,MAAM,CAACoC,KAAK,CAAC,CAAC;MAClB;IACJ;IAEOC,uBAAuBA,CAAA,EAAS;MACnCnR,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;MAE9D,MAAMiQ,cAAc,GAAG,IAAI,CAAC7M,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAACgB,QAAQ,CAAC,oBAAoB,CAAC;MACpF,IAAI,CAAC4L,cAAc,EAAE;MAErB,MAAMtP,IAAI,GAAGsP,cAAc,CAAC7P,OAAO,CAAC,CAAC;MACrC,MAAMuQ,iBAAiB,GAAGhQ,IAAI,CAACuO,SAAS,CAAChB,MAAM,CAAEkB,GAAQ,IAAKA,GAAG,CAACC,QAAQ,CAAC;MAE3E,IAAIsB,iBAAiB,CAAC1J,MAAM,KAAK,CAAC,EAAE;QAChC7E,YAAY,CAACC,IAAI,CAAC,iCAAiC,EAAE;UAAEC,QAAQ,EAAE;QAAK,CAAC,CAAC;QACxE;MACJ;;MAEA;MACA,MAAM8B,aAAa,GAAG,IAAI,CAAChB,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAACgB,QAAQ,CAAC,UAAU,CAAC;MACzE,MAAM0K,YAAY,GAAG3K,aAAa,GAAGA,aAAa,CAAChE,OAAO,CAAC,CAAC,CAACuL,iBAAiB,IAAI,EAAE,GAAG,EAAE;MAEzF,MAAMwF,cAAc,GAAGR,iBAAiB,CAACzC,MAAM,CAAEkB,GAAQ,IAAK;QAC1D,MAAMgC,mBAAmB,GAAGrC,YAAY,CAACS,IAAI,CAAE3D,IAAS,IAAK;UACzD,OAAOA,IAAI,CAACmD,QAAQ,KAAKI,GAAG,CAACpD,MAAM,IAAIH,IAAI,CAACoD,MAAM,KAAKG,GAAG,CAAClD,QAAQ;QACvE,CAAC,CAAC;QAEF,IAAIkF,mBAAmB,EAAE;UACrBrR,OAAO,CAACC,GAAG,CAAC,kCAAkCoP,GAAG,CAACpD,MAAM,gCAAgC,CAAC;QAC7F;QAEA,OAAO,CAACoF,mBAAmB;MAC/B,CAAC,CAAC;MAEF,IAAID,cAAc,CAAClK,MAAM,KAAK,CAAC,EAAE;QAC7B7E,YAAY,CAACC,IAAI,CAAC,8DAA8D,EAAE;UAAEC,QAAQ,EAAE;QAAK,CAAC,CAAC;QACrG;MACJ;MAEA,IAAI6O,cAAc,CAAClK,MAAM,GAAG0J,iBAAiB,CAAC1J,MAAM,EAAE;QAClD,MAAMoK,cAAc,GAAGV,iBAAiB,CAAC1J,MAAM,GAAGkK,cAAc,CAAClK,MAAM;QACvE7E,YAAY,CAACC,IAAI,CAAC,GAAGgP,cAAc,4CAA4C,EAAE;UAAE/O,QAAQ,EAAE;QAAK,CAAC,CAAC;MACxG;;MAEA;MACA,IAAI,CAACgP,sBAAsB,CAACH,cAAc,CAAC;;MAE3C;MACA,MAAMtC,MAAM,GAAG,IAAI,CAACzL,aAAa,CAAC,CAAC,CAACsL,IAAI,CAAC,yBAAyB,CAAC;MACnE,IAAIG,MAAM,EAAE;QACRA,MAAM,CAACoC,KAAK,CAAC,CAAC;MAClB;MAEA7O,YAAY,CAACC,IAAI,CAAC,GAAG8O,cAAc,CAAClK,MAAM,yCAAyC,EAAE;QAAE3E,QAAQ,EAAE;MAAK,CAAC,CAAC;IAC5G;IAEQgP,sBAAsBA,CAACX,iBAAwB,EAAQ;MAC3D5Q,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAE2Q,iBAAiB,CAAC;MAErF,MAAMvM,aAAa,GAAG,IAAI,CAAChB,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAACgB,QAAQ,CAAC,UAAU,CAAC;MACzE,IAAI,CAACD,aAAa,EAAE;MAEpB,MAAMM,YAAY,GAAGN,aAAa,CAAChE,OAAO,CAAC,CAAC;MAC5C,MAAM2O,YAAY,GAAGrK,YAAY,CAACiH,iBAAiB,IAAI,EAAE;;MAEzD;MACA,MAAM4F,QAAQ,GAAGZ,iBAAiB,CAACa,GAAG,CAAC,CAACpC,GAAQ,EAAEtD,KAAa,KAAK;QAChE,MAAM2F,MAAM,GAAG1C,YAAY,CAAC9H,MAAM,GAAG6E,KAAK,GAAG,CAAC;QAC9C,OAAO;UACHC,MAAM,EAAE0F,MAAM;UACdrQ,QAAQ,EAAEgO,GAAG,CAAChO,QAAQ;UACtB4K,MAAM,EAAEoD,GAAG,CAACpD,MAAM;UAClBC,SAAS,EAAEmD,GAAG,CAACpD,MAAM;UACrBE,QAAQ,EAAEkD,GAAG,CAAClD,QAAQ;UACtBC,QAAQ,EAAEiD,GAAG,CAACjD,QAAQ;UACtBC,OAAO,EAAEgD,GAAG,CAAChD,OAAO;UACpBC,UAAU,EAAE+C,GAAG,CAACsC,OAAO;UACvBpF,OAAO,EAAE8C,GAAG,CAAChD,OAAO;UACpBG,OAAO,EAAE,EAAE;UACXC,SAAS,EAAE,CAAC;UACZC,WAAW,EAAE,CAAC;UACdC,QAAQ,EAAE0C,GAAG,CAACuC,KAAK;UACnBhF,UAAU,EAAEyC,GAAG,CAACuC,KAAK;UACrB/E,cAAc,EAAE,CAAC;UACjB;UACAoC,QAAQ,EAAEI,GAAG,CAACpD,MAAM;UACpBiD,MAAM,EAAEG,GAAG,CAAClD,QAAQ;UACpB0F,MAAM,EAAExC,GAAG,CAACjD,QAAQ;UACpB0F,OAAO,EAAEzC,GAAG,CAAChD,OAAO;UACpB0F,OAAO,EAAE1C,GAAG,CAACsC,OAAO;UACpBK,SAAS,EAAE3C,GAAG,CAACuC,KAAK;UACpBK,OAAO,EAAE5C,GAAG,CAAC0B,OAAO;UACpBmB,QAAQ,EAAE,CAAC;UACXC,SAAS,EAAE9C,GAAG,CAAC0B,OAAO;UACtBqB,QAAQ,EAAE/C,GAAG,CAACiB,QAAQ;UACtB+B,QAAQ,EAAEhD,GAAG,CAACiD,WAAW;UACzBC,QAAQ,EAAElD,GAAG,CAACrH;QAClB,CAAC;MACL,CAAC,CAAC;;MAEF;MACA,MAAMwK,YAAY,GAAG,CAAC,GAAGxD,YAAY,EAAE,GAAGwC,QAAQ,CAAC;MACnD7M,YAAY,CAACiH,iBAAiB,GAAG4G,YAAY;;MAE7C;MACA,IAAI,CAACC,yBAAyB,CAAC9N,YAAY,CAAC;;MAE5C;MACAN,aAAa,CAAC5D,OAAO,CAACkE,YAAY,CAAC;MACnCN,aAAa,CAACI,OAAO,CAAC,IAAI,CAAC;MAE3BzE,OAAO,CAACC,GAAG,CAAC,iEAAiE,EAAEuS,YAAY,CAACtL,MAAM,CAAC;MACnGlH,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAE2Q,iBAAiB,CAAC1J,MAAM,CAAC;IACnF;IAEQuL,yBAAyBA,CAAC9N,YAAiB,EAAQ;MACvD,MAAM+N,KAAK,GAAG/N,YAAY,CAACiH,iBAAiB,IAAI,EAAE;;MAElD;MACA,MAAM+G,KAAK,GAAGD,KAAK,CAAC7B,MAAM,CAAC,CAACC,GAAW,EAAEhF,IAAS,KAAKgF,GAAG,IAAIhF,IAAI,CAACkG,SAAS,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;MACtF,MAAMY,KAAK,GAAGF,KAAK,CAAC7B,MAAM,CAAC,CAACC,GAAW,EAAEhF,IAAS,KAAKgF,GAAG,IAAIhF,IAAI,CAACoG,QAAQ,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;MACrF,MAAMW,QAAQ,GAAGF,KAAK,GAAGC,KAAK;;MAE9B;MACAjO,YAAY,CAACmO,OAAO,GAAGH,KAAK;MAC5BhO,YAAY,CAACoO,OAAO,GAAGH,KAAK;MAC5BjO,YAAY,CAACqO,UAAU,GAAGH,QAAQ;MAElC7S,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAE;QAAE0S,KAAK;QAAEC,KAAK;QAAEC;MAAS,CAAC,CAAC;IAClG;EAEJ;EAAC,IAAAI,SAAA;IAAAC,UAAA;EAAA;EAAAD,SAAA,CAAAvT,mBAAA,GAAAA,mBAAA;EAAA,OAAAuT,SAAA;AAAA","ignoreList":[]}