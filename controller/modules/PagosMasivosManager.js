sap.ui.define(["sap/ui/model/json/JSONModel","sap/m/MessageToast","sap/m/MessageBox"],function(e,a,o){"use strict";class l{constructor(){this.oOriginalModel=new e;this.oFilteredModel=new e}initializeModels(){console.log("PagosMasivosManager - Initializing models...");const e="./model/mock/planillas.json";try{this.oOriginalModel.loadData(e,undefined,false);console.log("PagosMasivosManager - Data loaded from URL:",this.oOriginalModel.getData())}catch(e){console.log("PagosMasivosManager - Error loading data, using fallback:",e);this.loadFallbackData();return}this.sortPlanillasByDocEntry();this.oFilteredModel.setData(this.oOriginalModel.getData());console.log("PagosMasivosManager - Filtered model data:",this.oFilteredModel.getData())}getFilteredModel(){return this.oFilteredModel}getOriginalModel(){return this.oOriginalModel}sortPlanillasByDocEntry(){const e=this.oOriginalModel.getData();if(e&&e.PlanillasCollection&&Array.isArray(e.PlanillasCollection)){e.PlanillasCollection.sort((e,a)=>{const o=parseInt(e.DocEntry)||0;const l=parseInt(a.DocEntry)||0;return l-o});this.oOriginalModel.setData(e);console.log("PagosMasivosManager - Planillas ordenadas por DocEntry descendente")}}loadFallbackData(){const e={PlanillasCollection:[{Id:"HT-1000",Name:"Planilla Pago Proveedor 10003",DateOfSale:"2025-03-26",Status:"Ejecutada",Quantity:10,Price:1000.34,CurrencyCode:"SOL",Bank:"BCP"},{Id:"HT-1001",Name:"Planilla Pago Proveedor 10004",DateOfSale:"2024-04-17",Status:"Creada",Quantity:20,Price:1249,CurrencyCode:"USD",Bank:"BBVA"},{Id:"HT-1003",Name:"Planilla Pago Proveedor 10005",DateOfSale:"2024-04-09",Status:"Anulada",Quantity:15,Price:1650,CurrencyCode:"SOL",Bank:"Interbank"},{Id:"HT-1007",Name:"Planilla Pago Proveedor 10006",DateOfSale:"2024-05-17",Status:"Creada",Quantity:15,Price:299,CurrencyCode:"USD",Bank:"Scotiabank"},{Id:"HT-1010",Name:"Planilla Pago Proveedor 10007",DateOfSale:"2024-02-22",Status:"Ejecutada",Quantity:16,Price:1999,CurrencyCode:"SOL",Bank:"BCP"},{Id:"HT-1011",Name:"Planilla Pago Proveedor 10008",DateOfSale:"2024-03-15",Status:"Creada",Quantity:12,Price:850,CurrencyCode:"SOL",Bank:"BBVA"},{Id:"HT-1012",Name:"Planilla Pago Proveedor 10009",DateOfSale:"2024-06-10",Status:"Ejecutada",Quantity:8,Price:1200,CurrencyCode:"USD",Bank:"Interbank"},{Id:"HT-1013",Name:"Planilla Pago Proveedor 10010",DateOfSale:"2024-07-22",Status:"Anulada",Quantity:25,Price:2100,CurrencyCode:"SOL",Bank:"Scotiabank"},{Id:"HT-1014",Name:"Planilla Pago Proveedor 10011",DateOfSale:"2024-08-05",Status:"Creada",Quantity:18,Price:950,CurrencyCode:"BCP",Bank:"BCP"},{Id:"HT-1015",Name:"Planilla Pago Proveedor 10012",DateOfSale:"2024-09-12",Status:"Ejecutada",Quantity:22,Price:1750,CurrencyCode:"USD",Bank:"BBVA"}]};this.oOriginalModel.setData(e);this.oFilteredModel.setData(e)}onDateRangeChange(e){console.log("PagosMasivos - Rango de fechas cambiado:",e.getParameter("value"));this.applyFilters()}onStatusChange(e){this.applyFilters()}onBancoChange(e){this.applyFilters()}onClearFilters(){const e=this.getControlById("pagosMasivosDateRangeFilter");if(e){e.setValue("")}const o=this.getControlById("pagosMasivosStatusFilter");if(o){o.setSelectedKey("")}const l=this.getControlById("pagosMasivosBancoFilter");if(l){l.setSelectedKey("")}this.oFilteredModel.setData(this.oOriginalModel.getData());a.show("Filtros limpiados desde Pagos Masivos Controller",{duration:2e3})}onNuevaPlanillaButtonPress(){console.log("PagosMasivosManager - onNuevaPlanillaButtonPress triggered!");this.createNewPlanilla();this.navigateToDetailPage()}createNewPlanilla(){console.log("PagosMasivosManager - Creating new planilla...");const a=this.generateNewDocEntry();const o={DocEntry:a,DocNum:a,Period:(new Date).getMonth()+1,Instance:0,Series:-1,Handwrtten:"N",Status:"O",RequestStatus:"W",Creator:"manager",Remark:null,Canceled:"N",Object:"VS_OPMP",LogInst:null,UserSign:1,Transfered:"N",CreateDate:(new Date).toISOString().split("T")[0]+"T00:00:00Z",CreateTime:(new Date).toTimeString().split(" ")[0],UpdateDate:(new Date).toISOString().split("T")[0]+"T00:00:00Z",UpdateTime:(new Date).toTimeString().split(" ")[0],DataSource:"I",U_CUENTA:null,U_IDBANCO:null,U_NMBANCO:null,U_CCBANCO:null,U_MONEDA:null,U_GLACCOUNT:null,U_SERIE:null,U_ESTADO:"C",U_FECHA:(new Date).toISOString().split("T")[0]+"T00:00:00Z",U_FECHAP:null,U_TC:null,U_RETEN:null,U_FECHAV:null,U_IDSN:null,U_NMSN:null,U_GLOSA:"Nueva planilla de pagos masivos",U_TOTAL:0,U_IDPAGO:null,U_SUBTOTAL:0,U_REF:null,U_NOPBAN:null,U_IDSUC:null,U_NMSUC:null,U_FCAJA:-1,U_CONTA:0,VS_PMP1Collection:[],isNewPlanilla:true};console.log("PagosMasivosManager - New planilla data created:",o);const l=new e;l.setData(o);const t=this.getController().getView();if(t){t.setModel(l,"planilla");console.log("PagosMasivosManager - New planilla model assigned to view");this.loadSeriesData()}}generateNewDocEntry(){const e=new Date;const a=e.getTime();return Math.floor(a/1e3)%1e4}onSerieChange(e){console.log("PagosMasivosManager - onSerieChange triggered");console.log("PagosMasivosManager - Event parameters:",e.getParameters());const a=e.getParameter("selectedItem");const o=e.getParameter("selectedItem")?.getKey();const l=e.getParameter("newValue");console.log("PagosMasivosManager - Selected item:",a);console.log("PagosMasivosManager - Selected key:",o);console.log("PagosMasivosManager - New value:",l);if(!a){console.log("No se seleccionó ningún item");return}const t=a.getKey();console.log("PagosMasivosManager - Serie seleccionada (key):",t);const n=this.getController().getView().getModel("planilla");if(n){console.log("PagosMasivosManager - Current U_SERIE value:",n.getProperty("/U_SERIE"));n.setProperty("/U_SERIE",t);console.log("PagosMasivosManager - Updated U_SERIE value:",n.getProperty("/U_SERIE"));n.refresh(true)}else{console.error("PagosMasivosManager - Planilla model not found")}}onGuardarPlanilla(){console.log("PagosMasivosManager - Guardando planilla...");const e=this.getController().getView();if(!e){console.error("View not found");return}const a=e.getModel("planilla");if(!a){console.error("Planilla model not found");return}const o=a.getData();console.log("Datos de la planilla a guardar:",o);if(o.isNewPlanilla){this.createPlanillaInMockDatabase(o)}else{this.updatePlanillaInMockDatabase(o)}}createPlanillaInMockDatabase(e){const l="./model/mock/planilla-object.json";fetch(l).then(e=>e.json()).then(o=>{const{isNewPlanilla:l,...t}=e;o.planillas.push(t);console.log("Nueva planilla agregada al mock database:",t);this.simulateServerCreate(t);a.show("Planilla creada exitosamente",{duration:3e3});this.navigateBackToList()}).catch(e=>{console.error("Error al crear la planilla:",e);o.error("Error al crear la planilla")})}updatePlanillaInMockDatabase(e){const l="./model/mock/planilla-object.json";fetch(l).then(e=>e.json()).then(l=>{const t=l.planillas||[];const n=t.findIndex(a=>a.DocEntry===e.DocEntry);console.log("Planilla index:",n);if(n!==-1){t[n]={...t[n],...e,UpdateDate:(new Date).toISOString().split("T")[0]+"T00:00:00Z",UpdateTime:(new Date).toTimeString().split(" ")[0]};console.log("Planilla actualizada en el mock database:",t[n]);const o={DocEntry:t[n].DocEntry,U_SERIE:t[n].U_SERIE,U_FECHAP:t[n].U_FECHAP,U_NOPBAN:t[n].U_NOPBAN};this.simulateServerUpdate(o);a.show("Planilla guardada exitosamente",{duration:3e3})}else{console.error("Planilla no encontrada en el mock database");o.error("Error: No se pudo encontrar la planilla para actualizar")}}).catch(e=>{console.error("Error al cargar el mock database:",e);o.error("Error al cargar los datos de la planilla")})}simulateServerUpdate(e){o.information("Backend POST/EjecutarPlanilla - Payload: "+JSON.stringify(e,null,2),{title:"Datos enviados al backend",details:"Esta información se enviaría al servidor en un entorno real"});console.log("Simulando actualización en el servidor...");console.log("Datos que se enviarían al servidor:",e)}simulateServerCreate(e){o.information("Backend POST/CrearPlanilla - Payload: "+JSON.stringify(e,null,2),{title:"Datos enviados al backend",details:"Esta información se enviaría al servidor en un entorno real"});console.log("Simulando creación en el servidor...");console.log("Datos que se enviarían al servidor:",e)}onFechaEjecucionChange(e){const l=e.getParameter("value");console.log("Fecha de ejecución seleccionada:",l);if(!l){return}const t=e.getSource();const n=this.getController().getView().getModel("planilla").getProperty("/U_FECHAP");console.log("Valor original de la fecha:",n);e.preventDefault();let s;if(l instanceof Date){s=l.toISOString().split("T")[0]}else if(typeof l==="string"){try{const e=l.split(" ");if(e.length===3){const a=parseInt(e[0]);const o=e[1].toLowerCase();const t=parseInt(e[2]);const n={ene:0,feb:1,mar:2,abr:3,may:4,jun:5,jul:6,ago:7,sep:8,oct:9,nov:10,dic:11};const r=n[o];if(r!==undefined&&!isNaN(a)&&!isNaN(t)){const e=new Date(t,r,a);s=e.toISOString().split("T")[0]}else{console.error("No se pudo parsear la fecha:",l);return}}else{const e=new Date(l);if(isNaN(e.getTime())){console.error("No se pudo parsear la fecha:",l);return}s=e.toISOString().split("T")[0]}}catch(e){console.error("Error al convertir la fecha:",e);return}}else{console.error("Formato de fecha no válido:",l);return}const r="./model/mock/tipos-cambio.json";fetch(r).then(e=>e.json()).then(e=>{console.log("PagosMasivosManager - Fecha:",s);const r=e.ExchangeRates.find(e=>e.Currency==="USD"&&e.Date.startsWith(s));if(r){const e=this.getController().getView().getModel("planilla");if(e){e.setProperty("/U_TC",r.Rate);e.setProperty("/U_FECHAP",l);a.show(`Tipo de cambio USD actualizado: ${r.Rate}`,{duration:2e3})}}else{console.log("No se encontró tipo de cambio para la fecha:",s);let e=n;if(n&&typeof n==="string"){try{const a=new Date(n);if(!isNaN(a.getTime())){e=a.toLocaleDateString("es-ES",{day:"2-digit",month:"short",year:"numeric"})}}catch(e){console.error("Error al formatear la fecha original:",e)}}t.setValue(e);o.error(`No existe tipo de cambio para la fecha ${s}`,{title:"Error de Tipo de Cambio",details:"Por favor seleccione otra fecha"})}}).catch(e=>{console.error("Error cargando tipos de cambio:",e);o.error("Error al cargar los tipos de cambio",{title:"Error",details:e.message})})}onDownloadPlanilla(){console.log("onDownloadPlanilla called from PagosMasivosManager!");const e=this.getController().getView();if(!e){console.error("PagosMasivosManager - No view found");a.show("Error: No se pudo acceder a la vista",{duration:2e3});return}const o=e.getModel("planilla");if(!o){console.error("PagosMasivosManager - No planilla model found");a.show("Error: No se encontraron datos para descargar",{duration:2e3});return}const l=o.getData();console.log("PagosMasivosManager - Downloading planilla data:",l);if(!l){console.error("PagosMasivosManager - No planilla data found");a.show("Error: No hay datos de planilla disponibles",{duration:2e3});return}try{const e=JSON.stringify(l,null,2);console.log("PagosMasivosManager - JSON data created:",e.substring(0,200)+"...");const o=new Blob([e],{type:"application/json;charset=utf-8"});console.log("PagosMasivosManager - Blob created, size:",o.size);const t=URL.createObjectURL(o);console.log("PagosMasivosManager - URL created:",t);const n=document.createElement("a");n.href=t;n.download=`planilla_${l.Id||"detalle"}_${(new Date).toISOString().split("T")[0]}.json`;n.style.display="none";console.log("PagosMasivosManager - Download filename:",n.download);document.body.appendChild(n);console.log("PagosMasivosManager - Link added to DOM");n.click();console.log("PagosMasivosManager - Link clicked");setTimeout(()=>{document.body.removeChild(n);URL.revokeObjectURL(t);console.log("PagosMasivosManager - Cleanup completed")},100);a.show("Archivo descargado exitosamente",{duration:2e3})}catch(e){console.error("PagosMasivosManager - Error during download:",e);a.show("Error al descargar el archivo",{duration:2e3});try{const e=JSON.stringify(l,null,2);const a=window.open("","_blank");if(a){a.document.write("<pre>"+e+"</pre>");a.document.title=`Planilla ${l.Id||"detalle"}`;console.log("PagosMasivosManager - Fallback: opened in new window")}}catch(e){console.error("PagosMasivosManager - Fallback also failed:",e)}}}onListItemPress(e){console.log("PagosMasivosManager - onListItemPress triggered!",e);const a=e.getParameter("listItem");if(!a){console.log("PagosMasivosManager - No listItem parameter found");return}console.log("PagosMasivosManager - List item:",a);let o=a.getBindingContext("planillas");if(!o){console.log("PagosMasivosManager - Trying without model name...");o=a.getBindingContext()}if(!o||!o.getObject){console.log("PagosMasivosManager - No context or getObject found");console.log("PagosMasivosManager - Context:",o);const e=this.getControlById("pagosMasivosPlanillasList");if(e){console.log("PagosMasivosManager - List found:",e);const o=e.getItems();console.log("PagosMasivosManager - List items count:",o.length);for(let l=0;l<o.length;l++){if(o[l]===a){console.log("PagosMasivosManager - Found clicked item at index:",l);const a=e.getModel("planillas");if(a){const e=a.getData();const o=e?.PlanillasCollection||[];if(o[l]){console.log("PagosMasivosManager - Found planilla data:",o[l]);this.handlePlanillaSelection(o[l]);return}}break}}console.log("PagosMasivosManager - Clicked item not found in list items")}return}const l=o.getObject();console.log("PagosMasivosManager - Planilla data:",l);this.handlePlanillaSelection(l)}handlePlanillaSelection(e){if(e&&e.DocEntry){const a=e.DocEntry;console.log("PagosMasivosManager - Found planilla with ID:",a,"from planilla:",e);console.log("PagosMasivosManager - Planilla ID:",a);this.loadPlanillaById(a);const o=this.getController().getOwnerComponent();const l=o.getRouter();l.navTo("RoutePagosMasivosDetalle",{planillaId:a})}else{console.log("PagosMasivosManager - No valid planilla ID found")}}loadPlanillaById(a){console.log("PagosMasivosManager - Loading planilla by ID:",a);const o="./model/mock/planilla-object.json";try{const l=new e;l.loadData(o,undefined,false);const t=l.getData();console.log("PagosMasivosManager - Planilla detail data loaded:",t);const n=t?.planillas||[];console.log("PagosMasivosManager - Available planillas:",n);const s=parseInt(a);const r=n.find(e=>e.DocEntry===s);if(r){console.log("PagosMasivosManager - Planilla found in detail data:",r);if(r.VS_PMP1Collection&&r.VS_PMP1Collection.length>0){console.log("PagosMasivosManager - Planilla Lines count:",r.VS_PMP1Collection.length);console.log("PagosMasivosManager - Planilla Lines:",r.VS_PMP1Collection);r.VS_PMP1Collection.forEach((e,a)=>{console.log(`PagosMasivosManager - Line ${a+1}:`,{LineId:e.LineId,DocEntry:e.DocEntry,DocNum:e.DocNum,NumAtCard:e.NumAtCard,CardCode:e.CardCode,CardName:e.CardName,DocDate:e.DocDate,DocDueDate:e.DocDueDate,TaxDate:e.TaxDate,TaxCode:e.TaxCode,TaxAmount:e.TaxAmount,TaxAmountFC:e.TaxAmountFC,DocTotal:e.DocTotal,DocTotalFC:e.DocTotalFC,WithholdingTax:e.WithholdingTax})})}else{console.log("PagosMasivosManager - No lines found for this planilla")}const a=new e;a.setData(r);const o=this.getController().getView();if(o){o.setModel(a,"planilla");console.log("PagosMasivosManager - Planilla model assigned to view");this.loadSeriesData()}}else{console.log("PagosMasivosManager - Planilla not found in detail data, trying fallback");this.loadFallbackPlanillaData(a)}}catch(e){console.error("PagosMasivosManager - Exception loading planilla detail data:",e);this.loadFallbackPlanillaData(a)}}loadFallbackPlanillaData(a){console.log("PagosMasivosManager - Loading fallback planilla data for ID:",a);const o={DocEntry:parseInt(a),DocNum:parseInt(a),U_CUENTA:"1041101",U_IDBANCO:"BCP",U_NMBANCO:"BANCO DE CREDITO",U_CCBANCO:"1941985504094",U_MONEDA:"SOL",U_SERIE:24,U_ESTADO:"E",U_FECHA:"2024-03-21T00:00:00Z",U_FECHAP:"2024-03-21T00:00:00Z",U_TC:3.701,U_RETEN:null,U_FECHAV:null,U_IDSN:null,U_NMSN:null,U_GLOSA:"PG F/VARIAS",U_TOTAL:19516.06,U_IDPAGO:1977,U_SUBTOTAL:19516.06,U_REF:null,U_NOPBAN:"09627515",U_IDSUC:null,U_NMSUC:null,U_FCAJA:-1,U_CONTA:0,VS_PMP1Collection:[{DocEntry:parseInt(a),LineId:1,VisOrder:1,Object:"VS_OPMP",LogInst:null,U_CHECK:"Y",U_IDPAGO:1971,U_TIPDOC:"Factura",U_IDDOC:3617,U_LINDOC:0,U_OBJDOC:"18",U_CUODOC:"1",U_IDSN:"PL10081644867",U_NMSN:"BUSTAMANTE DAVILA MARIA ELIZABETH",U_RUC:"10081644867",U_NUMDOC:"E001-78",U_MONDOC:"SOL",U_IMPORTE:288,U_SALDO:288,U_PAGONETO:288,U_PAGLOC:288,U_PAGEXT:0,U_RETLOC:0,U_RETEXT:0,U_FVENC:"2024-03-15T00:00:00Z",U_FCONT:"2024-03-15T00:00:00Z",U_FDOCU:"2024-03-15T00:00:00Z",U_CCORRI:"19394614129025",U_CTAINF:"BCP",U_MONINF:"SOL",U_RETCOD:"",U_RETPOR:0,U_ESTADO:"1",U_SL:288,U_SE:0,U_RL:0,U_RE:0,U_BL:0,U_BE:0,U_IL:288,U_REF2:"01E001-78",U_PAGLOC0:0,U_PAGEXT0:0,U_RETLOC0:0,U_RETEXT0:0,U_MPBB:"2"}]};const l=new e;l.setData(o);const t=this.getController().getView();if(t){t.setModel(l,"planilla");console.log("PagosMasivosManager - Fallback planilla model assigned to view");this.loadSeriesData()}}loadSeriesData(){console.log("PagosMasivosManager - Loading series data...");const a="./model/mock/series-pago.json";fetch(a).then(e=>{console.log("PagosMasivosManager - Series response status:",e.status);return e.json()}).then(a=>{console.log("PagosMasivosManager - Series data received:",a);const o=this.getController().getView();if(o){const l=new e;l.setData(a);o.setModel(l,"series");console.log("PagosMasivosManager - Series model assigned to view");console.log("PagosMasivosManager - Series model data:",l.getData())}else{console.error("PagosMasivosManager - View not found when loading series")}}).catch(e=>{console.error("Error cargando series:",e)})}navigateToDetailPage(){console.log("PagosMasivosManager - Navigating to detail page");const e=this.getController().getOwnerComponent();const a=e.getRouter();a.navTo("RoutePagosMasivosDetalle",{planillaId:"new"});console.log("PagosMasivosManager - Navigation to detail completed")}navigateBackToList(){console.log("PagosMasivosManager - Navigating back to list");const e=this.getController().getOwnerComponent();const a=e.getRouter();a.navTo("RoutePagosMasivos");console.log("PagosMasivosManager - Navigation back completed")}applyFilters(){const e=[];const a=this.getControlById("pagosMasivosDateRangeFilter");if(a&&a.getValue()){const o=a.getValue();console.log("PagosMasivos - Filtro de rango de fechas:",a);console.log("PagosMasivos - Valor del rango de fechas:",o);if(o&&typeof o==="string"&&o.includes(" - ")){const[a,l]=o.split(" - ");if(a){const o=new Date(a);e.push({path:"DateOfSale",operator:"GE",value:o})}if(l){const a=new Date(l);e.push({path:"DateOfSale",operator:"LE",value:a})}}}const o=this.getControlById("pagosMasivosStatusFilter");if(o&&o.getSelectedKey()&&o.getSelectedKey()!==""){e.push({path:"U_ESTADO",operator:"EQ",value:o.getSelectedKey()})}const l=this.getControlById("pagosMasivosBancoFilter");if(l&&l.getSelectedKey()&&l.getSelectedKey()!==""){e.push({path:"U_IDBANCO",operator:"EQ",value:l.getSelectedKey()})}const t=this.oOriginalModel.getData();let n=t;if(e.length>0){n=this.filterData(t,e)}this.oFilteredModel.setData(n)}filterData(e,a){if(!e||!e.PlanillasCollection){return e}const o=e.PlanillasCollection.filter(e=>a.every(a=>{const o=e[a.path];const l=a.value;switch(a.operator){case"EQ":return o===l;case"GE":if(a.path==="DateOfSale"){const e=new Date(o);return e>=l}return o>=l;case"LE":if(a.path==="DateOfSale"){const e=new Date(o);return e<=l}return o<=l;default:return true}}));return{...e,PlanillasCollection:o}}getControlById(e){return null}getOwnerComponent(){return null}setController(e){console.log("PagosMasivosManager - Setting controller reference:",e);this.controller=e;this.getControlById=a=>{const o=e.byId(a);console.log("PagosMasivosManager - Getting control by ID:",a,o);return o};this.getOwnerComponent=()=>e.getOwnerComponent()}getController(){return this.controller}onAddDocumentos(){console.log("PagosMasivosManager - onAddDocumentos triggered");const e=this.getController().getView().getModel("planilla");if(!e){console.error("PagosMasivosManager - Planilla model not found");return}const o=e.getData();if(!o.isNewPlanilla){a.show("Solo se pueden agregar documentos en modo creación",{duration:3e3});return}this.loadAvailableDocuments();const l=this.getController().byId("documentSelectionDialog");if(l){l.open()}else{console.error("PagosMasivosManager - Document selection dialog not found")}}loadAvailableDocuments(){console.log("PagosMasivosManager - Loading available documents...");const o="./model/mock/available-documents.json";fetch(o).then(e=>{console.log("PagosMasivosManager - Documents response status:",e.status);return e.json()}).then(a=>{console.log("PagosMasivosManager - Documents data received:",a);const o=this.getController().getView().getModel("planilla");const l=o?o.getData().VS_PMP1Collection||[]:[];console.log("PagosMasivosManager - Current planilla lines:",l.length);if(l.length>0){console.log("PagosMasivosManager - Planilla lines details:");l.forEach((e,a)=>{console.log(`  Line ${a}: U_NUMDOC="${e.U_NUMDOC}", U_IDSN="${e.U_IDSN}"`)})}console.log("PagosMasivosManager - Available documents:",a.documents.length);console.log("PagosMasivosManager - First few available documents:");a.documents.slice(0,3).forEach((e,a)=>{console.log(`  Doc ${a}: DocNum="${e.DocNum}", CardCode="${e.CardCode}"`)});a.documents.forEach(e=>{e.selected=false;e.alreadyInPlanilla=false;if(l.length>0){console.log(`PagosMasivosManager - Checking document ${e.DocNum} (${e.CardCode}) against ${l.length} planilla lines`);const a=l.some(a=>{const o=a.U_NUMDOC===e.DocNum&&a.U_IDSN===e.CardCode;console.log(`PagosMasivosManager - Comparing: "${a.U_NUMDOC}" === "${e.DocNum}" && "${a.U_IDSN}" === "${e.CardCode}" = ${o}`);if(o){console.log(`PagosMasivosManager - Document ${e.DocNum} (${e.CardCode}) matches planilla line ${a.U_NUMDOC} (${a.U_IDSN})`)}return o});e.alreadyInPlanilla=a}else{console.log(`PagosMasivosManager - No planilla lines to check against for document ${e.DocNum}`)}console.log(`PagosMasivosManager - Document ${e.DocNum} (${e.CardCode}) - alreadyInPlanilla: ${e.alreadyInPlanilla}`)});const t={documents:a.documents,selectedTotal:0,selectedCount:0,existingCount:0};const n=this.getController().getView();if(n){const a=new e;a.setData(t);n.setModel(a,"availableDocuments");console.log("PagosMasivosManager - Available documents model assigned to view")}else{console.error("PagosMasivosManager - View not found when loading documents")}}).catch(e=>{console.error("Error cargando documentos disponibles:",e);a.show("Error al cargar documentos disponibles",{duration:3e3})})}onDocumentSearch(e){const a=e.getParameter("query").toLowerCase();console.log("PagosMasivosManager - Document search:",a);const o=this.getController().getView().getModel("availableDocuments");if(!o)return;const l=o.getData();const t=l.documents;const n=t.filter(e=>e.CardName.toLowerCase().includes(a)||e.DocNum.toLowerCase().includes(a)||e.CardCode.toLowerCase().includes(a));o.setProperty("/documents",n)}onDocumentBankFilterChange(e){const a=e.getParameter("selectedItem").getKey();console.log("PagosMasivosManager - Document bank filter:",a);this.loadAvailableDocuments();if(a){const e=this.getController().getView().getModel("availableDocuments");if(!e)return;const o=e.getData();const l=o.documents;const t=l.filter(e=>e.BankCode===a);e.setProperty("/documents",t)}}onDocumentSelectionChange(e){console.log("PagosMasivosManager - Document selection changed");const a=this.getController().getView().getModel("availableDocuments");if(!a)return;const o=a.getData();const l=o.documents;const t=this.getController().getView().getModel("planilla");const n=t?t.getData().VS_PMP1Collection||[]:[];const s=this.getController().byId("availableDocumentsTable");const r=s.getSelectedItems();l.forEach(e=>{e.selected=r.some(a=>{const o=a.getBindingContext("availableDocuments");return o&&o.getProperty("DocEntry")===e.DocEntry});e.alreadyInPlanilla=false;if(n.length>0){const a=n.some(a=>{const o=a.U_NUMDOC===e.DocNum&&a.U_IDSN===e.CardCode;if(o){console.log(`PagosMasivosManager - Selection change: Document ${e.DocNum} (${e.CardCode}) matches planilla line ${a.U_NUMDOC} (${a.U_IDSN})`)}return o});e.alreadyInPlanilla=a}});const i=l.filter(e=>e.selected&&!e.alreadyInPlanilla);const c=i.reduce((e,a)=>e+a.Balance,0);const g=i.length;const d=l.filter(e=>e.selected&&e.alreadyInPlanilla);const u=d.length;a.setProperty("/selectedTotal",c);a.setProperty("/selectedCount",g);a.setProperty("/existingCount",u);a.refresh(true);if(u>0){console.log(`PagosMasivosManager - ${u} selected document(s) already exist in planilla`)}}onDocumentDialogCancel(){console.log("PagosMasivosManager - Document dialog cancelled");const e=this.getController().byId("documentSelectionDialog");if(e){e.close()}}onDocumentDialogConfirm(){console.log("PagosMasivosManager - Document dialog confirmed");const e=this.getController().getView().getModel("availableDocuments");if(!e)return;const o=e.getData();const l=o.documents.filter(e=>e.selected);if(l.length===0){a.show("No hay documentos seleccionados",{duration:3e3});return}const t=this.getController().getView().getModel("planilla");const n=t?t.getData().VS_PMP1Collection||[]:[];const s=l.filter(e=>{const a=n.some(a=>a.U_NUMDOC===e.DocNum&&a.U_IDSN===e.CardCode);if(a){console.log(`PagosMasivosManager - Document ${e.DocNum} already in planilla, skipping`)}return!a});if(s.length===0){a.show("Todos los documentos seleccionados ya existen en la planilla",{duration:3e3});return}if(s.length<l.length){const e=l.length-s.length;a.show(`${e} documento(s) duplicado(s) fueron omitidos`,{duration:3e3})}this.addDocumentsToPlanilla(s);const r=this.getController().byId("documentSelectionDialog");if(r){r.close()}a.show(`${s.length} documento(s) agregado(s) a la planilla`,{duration:3e3})}addDocumentsToPlanilla(e){console.log("PagosMasivosManager - Adding documents to planilla:",e);const a=this.getController().getView().getModel("planilla");if(!a)return;const o=a.getData();const l=o.VS_PMP1Collection||[];const t=e.map((e,a)=>{const o=l.length+a+1;return{LineId:o,DocEntry:e.DocEntry,DocNum:e.DocNum,NumAtCard:e.DocNum,CardCode:e.CardCode,CardName:e.CardName,DocDate:e.DocDate,DocDueDate:e.DueDate,TaxDate:e.DocDate,TaxCode:"",TaxAmount:0,TaxAmountFC:0,DocTotal:e.Total,DocTotalFC:e.Total,WithholdingTax:0,U_NUMDOC:e.DocNum,U_IDSN:e.CardCode,U_NMSN:e.CardName,U_FDOCU:e.DocDate,U_FVENC:e.DueDate,U_IMPORTE:e.Total,U_SALDO:e.Balance,U_RETLOC:0,U_PAGLOC0:e.Balance,U_CTAINF:e.BankCode,U_CCORRI:e.AccountCode,U_MONINF:e.Currency}});const n=[...l,...t];o.VS_PMP1Collection=n;this.recalculatePlanillaTotals(o);a.setData(o);a.refresh(true);console.log("PagosMasivosManager - Documents added to planilla. Total lines:",n.length);console.log("PagosMasivosManager - Documents added:",e.length)}recalculatePlanillaTotals(e){const a=e.VS_PMP1Collection||[];const o=a.reduce((e,a)=>e+(a.U_IMPORTE||0),0);const l=a.reduce((e,a)=>e+(a.U_RETLOC||0),0);const t=o-l;e.U_TOTAL=o;e.U_RETEN=l;e.U_SUBTOTAL=t;console.log("PagosMasivosManager - Planilla totals recalculated:",{total:o,reten:l,subtotal:t})}}var t={__esModule:true};t.PagosMasivosManager=l;return t});
//# sourceMappingURL=PagosMasivosManager.js.map