{"version":3,"file":"PagosMasivosManager.js","names":["PagosMasivosManager","constructor","this","oOriginalModel","JSONModel","oFilteredModel","initializeModels","console","log","planillasUrl","loadData","undefined","getData","error","loadFallbackData","sortPlanillasByDocEntry","setData","getFilteredModel","getOriginalModel","data","PlanillasCollection","Array","isArray","sort","a","b","docEntryA","parseInt","DocEntry","docEntryB","fallbackData","Id","Name","DateOfSale","Status","Quantity","Price","CurrencyCode","Bank","onDateRangeChange","oEvent","getParameter","applyFilters","onStatusChange","onBancoChange","onClearFilters","dateRangeFilter","getControlById","setValue","statusFilter","setSelectedKey","bancoFilter","MessageToast","show","duration","onNuevaPlanillaButtonPress","createNewPlanilla","navigateToDetailPage","newDocEntry","generateNewDocEntry","newPlanillaData","DocNum","Period","Date","getMonth","Instance","Series","Handwrtten","RequestStatus","Creator","Remark","Canceled","Object","LogInst","UserSign","Transfered","CreateDate","toISOString","split","CreateTime","toTimeString","UpdateDate","UpdateTime","DataSource","U_CUENTA","U_IDBANCO","U_NMBANCO","U_CCBANCO","U_MONEDA","U_GLACCOUNT","U_SERIE","U_ESTADO","U_FECHA","U_FECHAP","U_TC","U_RETEN","U_FECHAV","U_IDSN","U_NMSN","U_GLOSA","U_TOTAL","U_IDPAGO","U_SUBTOTAL","U_REF","U_NOPBAN","U_IDSUC","U_NMSUC","U_FCAJA","U_CONTA","VS_PMP1Collection","isNewPlanilla","oModelPlanilla","oView","getController","getView","setModel","loadSeriesData","now","timestamp","getTime","Math","floor","onSerieChange","getParameters","selectedItem","selectedKey","getKey","newValue","key","planillaModel","getModel","getProperty","setProperty","refresh","onGuardarPlanilla","planillaData","createPlanillaInMockDatabase","updatePlanillaInMockDatabase","newPlanilla","planillaDetailUrl","fetch","then","response","json","planillaToSave","planillas","push","simulateServerCreate","navigateBackToList","catch","MessageBox","updatedPlanilla","planillaIndex","findIndex","item","simplifiedData","simulateServerUpdate","information","JSON","stringify","title","details","onFechaEjecucionChange","selectedDate","datePicker","getSource","originalValue","preventDefault","dateStr","dateParts","length","day","monthStr","toLowerCase","year","monthMap","ene","feb","mar","abr","may","jun","jul","ago","sep","oct","nov","dic","month","isNaN","date","tiposCambioUrl","exchangeRate","ExchangeRates","find","rate","Currency","startsWith","Rate","formattedOriginalValue","originalDate","toLocaleDateString","message","onDownloadPlanilla","oModel","jsonData","substring","blob","Blob","type","size","url","URL","createObjectURL","link","document","createElement","href","download","style","display","body","appendChild","click","setTimeout","removeChild","revokeObjectURL","newWindow","window","open","write","fallbackError","onListItemPress","oItem","oContext","getBindingContext","getObject","list","items","getItems","i","model","handlePlanillaSelection","oPlanilla","planillaId","loadPlanillaById","oComponent","getOwnerComponent","oRouter","getRouter","navTo","oDetailModel","oData","planillaIdNum","planilla","forEach","line","index","LineId","NumAtCard","CardCode","CardName","DocDate","DocDueDate","TaxDate","TaxCode","TaxAmount","TaxAmountFC","DocTotal","DocTotalFC","WithholdingTax","loadFallbackPlanillaData","VisOrder","U_CHECK","U_TIPDOC","U_IDDOC","U_LINDOC","U_OBJDOC","U_CUODOC","U_RUC","U_NUMDOC","U_MONDOC","U_IMPORTE","U_SALDO","U_PAGONETO","U_PAGLOC","U_PAGEXT","U_RETLOC","U_RETEXT","U_FVENC","U_FCONT","U_FDOCU","U_CCORRI","U_CTAINF","U_MONINF","U_RETCOD","U_RETPOR","U_SL","U_SE","U_RL","U_RE","U_BL","U_BE","U_IL","U_REF2","U_PAGLOC0","U_PAGEXT0","U_RETLOC0","U_RETEXT0","U_MPBB","seriesUrl","status","oModelSeries","aFilters","getValue","dateRangeValue","includes","startDateStr","endDateStr","startDate","path","operator","value","endDate","getSelectedKey","originalData","filteredData","filterData","filters","filteredItems","filter","every","filterValue","itemDate","controlId","setController","controller","control","byId","onAddDocumentos","loadAvailableDocuments","dialog","documentsUrl","currentLines","documents","slice","doc","selected","alreadyInPlanilla","isAlreadyAdded","some","matches","modelData","selectedTotal","selectedCount","existingCount","oModelDocuments","onDocumentSearch","searchTerm","documentsModel","filteredDocuments","onDocumentBankFilterChange","selectedBank","BankCode","onDocumentSelectionChange","table","selectedItems","getSelectedItems","context","selectedDocuments","reduce","sum","Balance","selectedButExisting","onDocumentDialogCancel","close","onDocumentDialogConfirm","validDocuments","isAlreadyInPlanilla","duplicateCount","addDocumentsToPlanilla","newLines","map","lineId","DueDate","Total","AccountCode","updatedLines","recalculatePlanillaTotals","lines","total","reten","subtotal","__exports","__esModule"],"sources":["PagosMasivosManager.ts"],"sourcesContent":["import JSONModel from \"sap/ui/model/json/JSONModel\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport type UIComponent from \"sap/ui/core/UIComponent\";\n\n/**\n * PagosMasivosManager - Handles all PagosMasivos-related logic\n */\nexport class PagosMasivosManager {\n    private oOriginalModel: JSONModel;\n    private oFilteredModel: JSONModel;\n    private controller: any;\n\n    constructor() {\n        this.oOriginalModel = new JSONModel();\n        this.oFilteredModel = new JSONModel();\n    }\n\n    public initializeModels(): void {\n        console.log(\"PagosMasivosManager - Initializing models...\");\n        // Cargar datos originales\n        const planillasUrl = \"./model/mock/planillas.json\";\n        \n        try {\n            this.oOriginalModel.loadData(planillasUrl, undefined, false);\n            console.log(\"PagosMasivosManager - Data loaded from URL:\", this.oOriginalModel.getData());\n        } catch (error) {\n            console.log(\"PagosMasivosManager - Error loading data, using fallback:\", error);\n            this.loadFallbackData();\n            return;\n        }\n\n        // Ordenar los datos por DocEntry descendente\n        this.sortPlanillasByDocEntry();\n\n        // Crear modelo filtrado\n        this.oFilteredModel.setData(this.oOriginalModel.getData());\n        console.log(\"PagosMasivosManager - Filtered model data:\", this.oFilteredModel.getData());\n    }\n\n    public getFilteredModel(): JSONModel {\n        return this.oFilteredModel;\n    }\n\n    public getOriginalModel(): JSONModel {\n        return this.oOriginalModel;\n    }\n\n    private sortPlanillasByDocEntry(): void {\n        const data = this.oOriginalModel.getData();\n        if (data && data.PlanillasCollection && Array.isArray(data.PlanillasCollection)) {\n            // Ordenar por DocEntry descendente\n            data.PlanillasCollection.sort((a: any, b: any) => {\n                const docEntryA = parseInt(a.DocEntry) || 0;\n                const docEntryB = parseInt(b.DocEntry) || 0;\n                return docEntryB - docEntryA; // Descendente (mayor a menor)\n            });\n            \n            // Actualizar el modelo con los datos ordenados\n            this.oOriginalModel.setData(data);\n            console.log(\"PagosMasivosManager - Planillas ordenadas por DocEntry descendente\");\n        }\n    }\n\n    private loadFallbackData(): void {\n        const fallbackData = {\n            \"PlanillasCollection\": [\n                {\n                    \"Id\": \"HT-1000\",\n                    \"Name\": \"Planilla Pago Proveedor 10003\",\n                    \"DateOfSale\": \"2025-03-26\",\n                    \"Status\": \"Ejecutada\",\n                    \"Quantity\": 10,\n                    \"Price\": 1000.34,\n                    \"CurrencyCode\": \"SOL\",\n                    \"Bank\": \"BCP\"\n                },\n                {\n                    \"Id\": \"HT-1001\",\n                    \"Name\": \"Planilla Pago Proveedor 10004\",\n                    \"DateOfSale\": \"2024-04-17\",\n                    \"Status\": \"Creada\",\n                    \"Quantity\": 20,\n                    \"Price\": 1249,\n                    \"CurrencyCode\": \"USD\",\n                    \"Bank\": \"BBVA\"\n                },\n                {\n                    \"Id\": \"HT-1003\",\n                    \"Name\": \"Planilla Pago Proveedor 10005\",\n                    \"DateOfSale\": \"2024-04-09\",\n                    \"Status\": \"Anulada\",\n                    \"Quantity\": 15,\n                    \"Price\": 1650,\n                    \"CurrencyCode\": \"SOL\",\n                    \"Bank\": \"Interbank\"\n                },\n                {\n                    \"Id\": \"HT-1007\",\n                    \"Name\": \"Planilla Pago Proveedor 10006\",\n                    \"DateOfSale\": \"2024-05-17\",\n                    \"Status\": \"Creada\",\n                    \"Quantity\": 15,\n                    \"Price\": 299,\n                    \"CurrencyCode\": \"USD\",\n                    \"Bank\": \"Scotiabank\"\n                },\n                {\n                    \"Id\": \"HT-1010\",\n                    \"Name\": \"Planilla Pago Proveedor 10007\",\n                    \"DateOfSale\": \"2024-02-22\",\n                    \"Status\": \"Ejecutada\",\n                    \"Quantity\": 16,\n                    \"Price\": 1999,\n                    \"CurrencyCode\": \"SOL\",\n                    \"Bank\": \"BCP\"\n                },\n                {\n                    \"Id\": \"HT-1011\",\n                    \"Name\": \"Planilla Pago Proveedor 10008\",\n                    \"DateOfSale\": \"2024-03-15\",\n                    \"Status\": \"Creada\",\n                    \"Quantity\": 12,\n                    \"Price\": 850,\n                    \"CurrencyCode\": \"SOL\",\n                    \"Bank\": \"BBVA\"\n                },\n                {\n                    \"Id\": \"HT-1012\",\n                    \"Name\": \"Planilla Pago Proveedor 10009\",\n                    \"DateOfSale\": \"2024-06-10\",\n                    \"Status\": \"Ejecutada\",\n                    \"Quantity\": 8,\n                    \"Price\": 1200,\n                    \"CurrencyCode\": \"USD\",\n                    \"Bank\": \"Interbank\"\n                },\n                {\n                    \"Id\": \"HT-1013\",\n                    \"Name\": \"Planilla Pago Proveedor 10010\",\n                    \"DateOfSale\": \"2024-07-22\",\n                    \"Status\": \"Anulada\",\n                    \"Quantity\": 25,\n                    \"Price\": 2100,\n                    \"CurrencyCode\": \"SOL\",\n                    \"Bank\": \"Scotiabank\"\n                },\n                {\n                    \"Id\": \"HT-1014\",\n                    \"Name\": \"Planilla Pago Proveedor 10011\",\n                    \"DateOfSale\": \"2024-08-05\",\n                    \"Status\": \"Creada\",\n                    \"Quantity\": 18,\n                    \"Price\": 950,\n                    \"CurrencyCode\": \"BCP\",\n                    \"Bank\": \"BCP\"\n                },\n                {\n                    \"Id\": \"HT-1015\",\n                    \"Name\": \"Planilla Pago Proveedor 10012\",\n                    \"DateOfSale\": \"2024-09-12\",\n                    \"Status\": \"Ejecutada\",\n                    \"Quantity\": 22,\n                    \"Price\": 1750,\n                    \"CurrencyCode\": \"USD\",\n                    \"Bank\": \"BBVA\"\n                }\n            ]\n        };\n        \n        this.oOriginalModel.setData(fallbackData);\n        this.oFilteredModel.setData(fallbackData);\n    }\n\n    // Manejadores de eventos para PagosMasivos\n    public onDateRangeChange(oEvent: any): void {\n        console.log(\"PagosMasivos - Rango de fechas cambiado:\", oEvent.getParameter(\"value\"));\n        this.applyFilters();\n    }\n\n    public onStatusChange(oEvent: any): void {\n        this.applyFilters();\n    }\n\n    public onBancoChange(oEvent: any): void {\n        this.applyFilters();\n    }\n\n    public onClearFilters(): void {\n        // Limpiar filtro de rango de fechas\n        const dateRangeFilter = this.getControlById(\"pagosMasivosDateRangeFilter\");\n        if (dateRangeFilter) {\n            dateRangeFilter.setValue(\"\");\n        }\n        \n        // Limpiar filtro de estado\n        const statusFilter = this.getControlById(\"pagosMasivosStatusFilter\");\n        if (statusFilter) {\n            statusFilter.setSelectedKey(\"\");\n        }\n\n        // Limpiar filtro de banco\n        const bancoFilter = this.getControlById(\"pagosMasivosBancoFilter\");\n        if (bancoFilter) {\n            bancoFilter.setSelectedKey(\"\");\n        }\n\n        // Restablecer datos originales\n        this.oFilteredModel.setData(this.oOriginalModel.getData());\n        \n        MessageToast.show(\"Filtros limpiados desde Pagos Masivos Controller\", { duration: 2000 });\n    }\n\n    public onNuevaPlanillaButtonPress(): void {\n        console.log(\"PagosMasivosManager - onNuevaPlanillaButtonPress triggered!\");\n        \n        // Crear una nueva planilla con datos por defecto\n        this.createNewPlanilla();\n        \n        // Navegar a la página de detalle en modo creación\n        this.navigateToDetailPage();\n    }\n\n    public createNewPlanilla(): void {\n        console.log(\"PagosMasivosManager - Creating new planilla...\");\n        \n        // Generar un nuevo DocEntry (en un entorno real, esto vendría del backend)\n        const newDocEntry = this.generateNewDocEntry();\n        \n\n        \n        // Crear datos de planilla por defecto\n        const newPlanillaData = {\n            \"DocEntry\": newDocEntry,\n            \"DocNum\": newDocEntry,\n            \"Period\": new Date().getMonth() + 1,\n            \"Instance\": 0,\n            \"Series\": -1,\n            \"Handwrtten\": \"N\",\n            \"Status\": \"O\",\n            \"RequestStatus\": \"W\",\n            \"Creator\": \"manager\",\n            \"Remark\": null,\n            \"Canceled\": \"N\",\n            \"Object\": \"VS_OPMP\",\n            \"LogInst\": null,\n            \"UserSign\": 1,\n            \"Transfered\": \"N\",\n            \"CreateDate\": new Date().toISOString().split('T')[0] + \"T00:00:00Z\",\n            \"CreateTime\": new Date().toTimeString().split(' ')[0],\n            \"UpdateDate\": new Date().toISOString().split('T')[0] + \"T00:00:00Z\",\n            \"UpdateTime\": new Date().toTimeString().split(' ')[0],\n            \"DataSource\": \"I\",\n            \"U_CUENTA\": null,\n            \"U_IDBANCO\": null,\n            \"U_NMBANCO\": null,\n            \"U_CCBANCO\": null,\n            \"U_MONEDA\": null,\n            \"U_GLACCOUNT\": null,\n            \"U_SERIE\": null,\n            \"U_ESTADO\": \"C\", // Creada\n            \"U_FECHA\": new Date().toISOString().split('T')[0] + \"T00:00:00Z\",\n            \"U_FECHAP\": null,\n            \"U_TC\": null,\n            \"U_RETEN\": null,\n            \"U_FECHAV\": null,\n            \"U_IDSN\": null,\n            \"U_NMSN\": null,\n            \"U_GLOSA\": \"Nueva planilla de pagos masivos\",\n            \"U_TOTAL\": 0.0,\n            \"U_IDPAGO\": null,\n            \"U_SUBTOTAL\": 0.0,\n            \"U_REF\": null,\n            \"U_NOPBAN\": null,\n            \"U_IDSUC\": null,\n            \"U_NMSUC\": null,\n            \"U_FCAJA\": -1,\n            \"U_CONTA\": 0,\n            \"VS_PMP1Collection\": [],\n            \"isNewPlanilla\": true // Indicador para identificar que es una nueva planilla\n        };\n        \n        console.log(\"PagosMasivosManager - New planilla data created:\", newPlanillaData);\n        \n        // Crear modelo para la nueva planilla\n        const oModelPlanilla = new JSONModel();\n        oModelPlanilla.setData(newPlanillaData);\n        \n        // Asignar el modelo a la vista\n        const oView = this.getController().getView();\n        if (oView) {\n            oView.setModel(oModelPlanilla, \"planilla\");\n            console.log(\"PagosMasivosManager - New planilla model assigned to view\");\n            \n            // Cargar las series para el ComboBox\n            this.loadSeriesData();\n        }\n    }\n\n    private generateNewDocEntry(): number {\n        // En un entorno real, esto vendría del backend\n        // Por ahora, generamos un número basado en la fecha actual\n        const now = new Date();\n        const timestamp = now.getTime();\n        return Math.floor(timestamp / 1000) % 10000; // Número de 4 dígitos\n    }\n\n    public onSerieChange(oEvent: any): void {\n        console.log(\"PagosMasivosManager - onSerieChange triggered\");\n        console.log(\"PagosMasivosManager - Event parameters:\", oEvent.getParameters());\n        \n        const selectedItem = oEvent.getParameter(\"selectedItem\");\n        const selectedKey = oEvent.getParameter(\"selectedItem\")?.getKey();\n        const newValue = oEvent.getParameter(\"newValue\");\n        \n        console.log(\"PagosMasivosManager - Selected item:\", selectedItem);\n        console.log(\"PagosMasivosManager - Selected key:\", selectedKey);\n        console.log(\"PagosMasivosManager - New value:\", newValue);\n        \n        if (!selectedItem) {\n            console.log(\"No se seleccionó ningún item\");\n            return;\n        }\n        \n        const key = selectedItem.getKey();\n        console.log(\"PagosMasivosManager - Serie seleccionada (key):\", key);\n        \n        // Actualizar el modelo con la serie seleccionada\n        const planillaModel = this.getController().getView().getModel(\"planilla\");\n        if (planillaModel) {\n            console.log(\"PagosMasivosManager - Current U_SERIE value:\", planillaModel.getProperty(\"/U_SERIE\"));\n            planillaModel.setProperty(\"/U_SERIE\", key);\n            console.log(\"PagosMasivosManager - Updated U_SERIE value:\", planillaModel.getProperty(\"/U_SERIE\"));\n            \n            // Forzar la actualización del modelo\n            planillaModel.refresh(true);\n        } else {\n            console.error(\"PagosMasivosManager - Planilla model not found\");\n        }\n    }\n\n    public onGuardarPlanilla(): void {\n        console.log(\"PagosMasivosManager - Guardando planilla...\");\n        \n        const oView = this.getController().getView();\n        if (!oView) {\n            console.error(\"View not found\");\n            return;\n        }\n\n        const planillaModel = oView.getModel(\"planilla\");\n        if (!planillaModel) {\n            console.error(\"Planilla model not found\");\n            return;\n        }\n\n        const planillaData = planillaModel.getData();\n        console.log(\"Datos de la planilla a guardar:\", planillaData);\n\n        // Verificar si es una nueva planilla\n        if (planillaData.isNewPlanilla) {\n            this.createPlanillaInMockDatabase(planillaData);\n        } else {\n            this.updatePlanillaInMockDatabase(planillaData);\n        }\n    }\n\n    private createPlanillaInMockDatabase(newPlanilla: any): void {\n        // Cargar el archivo JSON actual\n        const planillaDetailUrl = \"./model/mock/planilla-object.json\";\n        \n        fetch(planillaDetailUrl)\n            .then(response => response.json())\n            .then(data => {\n                // Remover el indicador isNewPlanilla\n                const { isNewPlanilla, ...planillaToSave } = newPlanilla;\n                \n                // Agregar la nueva planilla al array\n                data.planillas.push(planillaToSave);\n                \n                console.log(\"Nueva planilla agregada al mock database:\", planillaToSave);\n\n                // Simular envío al servidor\n                this.simulateServerCreate(planillaToSave);\n\n                // Mostrar mensaje de éxito\n                MessageToast.show(\"Planilla creada exitosamente\", { duration: 3000 });\n                \n                // Navegar de vuelta a la lista\n                this.navigateBackToList();\n            })\n            .catch(error => {\n                console.error(\"Error al crear la planilla:\", error);\n                MessageBox.error(\"Error al crear la planilla\");\n            });\n    }\n\n    private updatePlanillaInMockDatabase(updatedPlanilla: any): void {\n        // Cargar el archivo JSON actual\n        const planillaDetailUrl = \"./model/mock/planilla-object.json\";\n        \n        fetch(planillaDetailUrl)\n            .then(response => response.json())\n            .then(data => {\n                // Buscar la planilla por DocEntry\n                const planillas = data.planillas || [];\n                const planillaIndex = planillas.findIndex((item: any) => \n                    item.DocEntry === updatedPlanilla.DocEntry\n                );\n\n                console.log(\"Planilla index:\", planillaIndex);\n\n                if (planillaIndex !== -1) {\n                    // Actualizar la planilla existente\n                    planillas[planillaIndex] = {\n                        ...planillas[planillaIndex],\n                        ...updatedPlanilla,\n                        \"UpdateDate\": new Date().toISOString().split('T')[0] + \"T00:00:00Z\",\n                        \"UpdateTime\": new Date().toTimeString().split(' ')[0]\n                    };\n\n                    console.log(\"Planilla actualizada en el mock database:\", planillas[planillaIndex]);\n\n                    // Simular envío al servidor (en un entorno real, esto será una llamada API al backend) \n                    // solo enviamos la data necesaria para evitar sobrecarga de datos\n                    const simplifiedData = {\n                        \"DocEntry\": planillas[planillaIndex].DocEntry,\n                        \"U_SERIE\": planillas[planillaIndex].U_SERIE,\n                        \"U_FECHAP\": planillas[planillaIndex].U_FECHAP,\n                        \"U_NOPBAN\": planillas[planillaIndex].U_NOPBAN\n                    }\n\n                    this.simulateServerUpdate(simplifiedData);\n\n                    // Mostrar mensaje de éxito\n                    MessageToast.show(\"Planilla guardada exitosamente\", { duration: 3000 });\n                } else {\n                    console.error(\"Planilla no encontrada en el mock database\");\n                    MessageBox.error(\"Error: No se pudo encontrar la planilla para actualizar\");\n                }\n            })\n            .catch(error => {\n                console.error(\"Error al cargar el mock database:\", error);\n                MessageBox.error(\"Error al cargar los datos de la planilla\");\n            });\n    }\n\n    private simulateServerUpdate(data: any): void {\n        // En un entorno real, aquí haríamos una llamada API como:\n        // fetch('/api/planillas', {\n        //     method: 'PUT', PUT PARA ACTUALIZAR LÍNEAS EN CASO SE HAYA MODIFICADO LA CANTIDAD DE LÍNEAS\n        //     headers: { 'Content-Type': 'application/json' },\n        //     body: JSON.stringify(data)\n        // });\n\n        // Mostrar el payload en un MessageBox para texto más largo\n        MessageBox.information(\"Backend POST/EjecutarPlanilla - Payload: \" + JSON.stringify(data, null, 2), {\n            title: \"Datos enviados al backend\",\n            details: \"Esta información se enviaría al servidor en un entorno real\"\n        });\n\n        console.log(\"Simulando actualización en el servidor...\");\n        console.log(\"Datos que se enviarían al servidor:\", data);\n\n    }\n\n    private simulateServerCreate(data: any): void {\n        // En un entorno real, aquí haríamos una llamada API como:\n        // fetch('/api/planillas', {\n        //     method: 'POST',\n        //     headers: { 'Content-Type': 'application/json' },\n        //     body: JSON.stringify(data)\n        // });\n\n        // Mostrar el payload en un MessageBox para texto más largo\n        MessageBox.information(\"Backend POST/CrearPlanilla - Payload: \" + JSON.stringify(data, null, 2), {\n            title: \"Datos enviados al backend\",\n            details: \"Esta información se enviaría al servidor en un entorno real\"\n        });\n\n        console.log(\"Simulando creación en el servidor...\");\n        console.log(\"Datos que se enviarían al servidor:\", data);\n    }\n\n    public onFechaEjecucionChange(oEvent: any): void {\n        const selectedDate = oEvent.getParameter(\"value\");\n        console.log(\"Fecha de ejecución seleccionada:\", selectedDate);\n        \n        if (!selectedDate) {\n            return;\n        }\n\n        // Obtener el valor original antes del cambio\n        const datePicker = oEvent.getSource();\n        const originalValue = this.getController().getView().getModel(\"planilla\").getProperty(\"/U_FECHAP\");\n        console.log(\"Valor original de la fecha:\", originalValue);\n\n        // Prevenir que el modelo se actualice automáticamente\n        oEvent.preventDefault();\n\n        // Formatear la fecha para buscar en el JSON\n        let dateStr: string;\n        if (selectedDate instanceof Date) {\n            dateStr = selectedDate.toISOString().split('T')[0]; // Obtener solo la parte de la fecha (YYYY-MM-DD)\n        } else if (typeof selectedDate === 'string') {\n            // Si es un string, necesitamos convertir el formato localizado a ISO\n            try {\n                // Parsear el formato \"7 ago 2025\" manualmente\n                const dateParts = selectedDate.split(' ');\n                if (dateParts.length === 3) {\n                    const day = parseInt(dateParts[0]);\n                    const monthStr = dateParts[1].toLowerCase();\n                    const year = parseInt(dateParts[2]);\n                    \n                    // Mapeo de meses en español\n                    const monthMap: { [key: string]: number } = {\n                        'ene': 0, 'feb': 1, 'mar': 2, 'abr': 3, 'may': 4, 'jun': 5,\n                        'jul': 6, 'ago': 7, 'sep': 8, 'oct': 9, 'nov': 10, 'dic': 11\n                    };\n                    \n                    const month = monthMap[monthStr];\n                    if (month !== undefined && !isNaN(day) && !isNaN(year)) {\n                        const date = new Date(year, month, day);\n                        dateStr = date.toISOString().split('T')[0]; // Convertir a formato YYYY-MM-DD\n                    } else {\n                        console.error(\"No se pudo parsear la fecha:\", selectedDate);\n                        return;\n                    }\n                } else {\n                    // Intentar con el constructor de Date como fallback\n                    const date = new Date(selectedDate);\n                    if (isNaN(date.getTime())) {\n                        console.error(\"No se pudo parsear la fecha:\", selectedDate);\n                        return;\n                    }\n                    dateStr = date.toISOString().split('T')[0]; // Convertir a formato YYYY-MM-DD\n                }\n            } catch (error) {\n                console.error(\"Error al convertir la fecha:\", error);\n                return;\n            }\n        } else {\n            console.error(\"Formato de fecha no válido:\", selectedDate);\n            return;\n        }\n        \n        // Cargar los tipos de cambio\n        const tiposCambioUrl = \"./model/mock/tipos-cambio.json\";\n        \n        fetch(tiposCambioUrl)\n            .then(response => response.json())\n            .then(data => {\n                // Buscar el tipo de cambio para USD en la fecha seleccionada\n                \n                console.log(\"PagosMasivosManager - Fecha:\", dateStr);\n                const exchangeRate = data.ExchangeRates.find((rate: any) => \n                    rate.Currency === \"USD\" && \n                    rate.Date.startsWith(dateStr)\n                );\n                \n                if (exchangeRate) {\n                    // Actualizar el campo de tipo de cambio y la fecha\n                    const planillaModel = this.getController().getView().getModel(\"planilla\");\n                    if (planillaModel) {\n                        planillaModel.setProperty(\"/U_TC\", exchangeRate.Rate);\n                        planillaModel.setProperty(\"/U_FECHAP\", selectedDate);\n                        MessageToast.show(`Tipo de cambio USD actualizado: ${exchangeRate.Rate}`, { duration: 2000 });\n                    }\n                } else {\n                    // No se encontró tipo de cambio, mantener la fecha original\n                    console.log(\"No se encontró tipo de cambio para la fecha:\", dateStr);\n                    \n                    // Revertir el DatePicker a su valor original\n                    let formattedOriginalValue = originalValue;\n                    if (originalValue && typeof originalValue === 'string') {\n                        try {\n                            const originalDate = new Date(originalValue);\n                            if (!isNaN(originalDate.getTime())) {\n                                // Formatear en el formato esperado por el DatePicker (dd MMM yyyy)\n                                formattedOriginalValue = originalDate.toLocaleDateString('es-ES', {\n                                    day: '2-digit',\n                                    month: 'short',\n                                    year: 'numeric'\n                                });\n                            }\n                        } catch (error) {\n                            console.error(\"Error al formatear la fecha original:\", error);\n                        }\n                    }\n                    \n                    datePicker.setValue(formattedOriginalValue);\n                    \n                    // Mostrar mensaje de error\n                    MessageBox.error(`No existe tipo de cambio para la fecha ${dateStr}`, {\n                        title: \"Error de Tipo de Cambio\",\n                        details: \"Por favor seleccione otra fecha\"\n                    });\n                }\n            })\n            .catch(error => {\n                console.error(\"Error cargando tipos de cambio:\", error);\n                MessageBox.error(\"Error al cargar los tipos de cambio\", {\n                    title: \"Error\",\n                    details: error.message\n                });\n            });\n    }\n\n    public onDownloadPlanilla(): void {\n        console.log(\"onDownloadPlanilla called from PagosMasivosManager!\");\n        \n        const oView = this.getController().getView();\n        if (!oView) {\n            console.error(\"PagosMasivosManager - No view found\");\n            MessageToast.show(\"Error: No se pudo acceder a la vista\", { duration: 2000 });\n            return;\n        }\n        \n        const oModel = oView.getModel(\"planilla\");\n        if (!oModel) {\n            console.error(\"PagosMasivosManager - No planilla model found\");\n            MessageToast.show(\"Error: No se encontraron datos para descargar\", { duration: 2000 });\n            return;\n        }\n        \n        const planillaData = oModel.getData();\n        console.log(\"PagosMasivosManager - Downloading planilla data:\", planillaData);\n        \n        if (!planillaData) {\n            console.error(\"PagosMasivosManager - No planilla data found\");\n            MessageToast.show(\"Error: No hay datos de planilla disponibles\", { duration: 2000 });\n            return;\n        }\n        \n        try {\n            // Create a JSON file with the planilla data\n            const jsonData = JSON.stringify(planillaData, null, 2);\n            console.log(\"PagosMasivosManager - JSON data created:\", jsonData.substring(0, 200) + \"...\");\n            \n            const blob = new Blob([jsonData], { type: 'application/json;charset=utf-8' });\n            console.log(\"PagosMasivosManager - Blob created, size:\", blob.size);\n            \n            const url = URL.createObjectURL(blob);\n            console.log(\"PagosMasivosManager - URL created:\", url);\n            \n            // Create a temporary link element to trigger download\n            const link = document.createElement('a');\n            link.href = url;\n            link.download = `planilla_${planillaData.Id || 'detalle'}_${new Date().toISOString().split('T')[0]}.json`;\n            link.style.display = 'none';\n            \n            console.log(\"PagosMasivosManager - Download filename:\", link.download);\n            \n            // Add to DOM, click, and remove\n            document.body.appendChild(link);\n            console.log(\"PagosMasivosManager - Link added to DOM\");\n            \n            link.click();\n            console.log(\"PagosMasivosManager - Link clicked\");\n            \n            // Small delay before cleanup\n            setTimeout(() => {\n                document.body.removeChild(link);\n                URL.revokeObjectURL(url);\n                console.log(\"PagosMasivosManager - Cleanup completed\");\n            }, 100);\n            \n            MessageToast.show(\"Archivo descargado exitosamente\", { duration: 2000 });\n            \n        } catch (error) {\n            console.error(\"PagosMasivosManager - Error during download:\", error);\n            MessageToast.show(\"Error al descargar el archivo\", { duration: 2000 });\n            \n            // Fallback: try to open in new window\n            try {\n                const jsonData = JSON.stringify(planillaData, null, 2);\n                const newWindow = window.open('', '_blank');\n                if (newWindow) {\n                    newWindow.document.write('<pre>' + jsonData + '</pre>');\n                    newWindow.document.title = `Planilla ${planillaData.Id || 'detalle'}`;\n                    console.log(\"PagosMasivosManager - Fallback: opened in new window\");\n                }\n            } catch (fallbackError) {\n                console.error(\"PagosMasivosManager - Fallback also failed:\", fallbackError);\n            }\n        }\n    }\n\n    public onListItemPress(oEvent: any): void {\n        console.log(\"PagosMasivosManager - onListItemPress triggered!\", oEvent);\n        \n        // Get the list item that was clicked\n        const oItem = oEvent.getParameter(\"listItem\");\n        if (!oItem) {\n            console.log(\"PagosMasivosManager - No listItem parameter found\");\n            return;\n        }\n        \n        console.log(\"PagosMasivosManager - List item:\", oItem);\n        \n        // Try to get the binding context from the list item\n        let oContext = oItem.getBindingContext(\"planillas\");\n        if (!oContext) {\n            console.log(\"PagosMasivosManager - Trying without model name...\");\n            oContext = oItem.getBindingContext();\n        }\n        \n        if (!oContext || !oContext.getObject) {\n            console.log(\"PagosMasivosManager - No context or getObject found\");\n            console.log(\"PagosMasivosManager - Context:\", oContext);\n            \n            // Try to get the data directly from the list\n            const list = this.getControlById(\"pagosMasivosPlanillasList\");\n            if (list) {\n                console.log(\"PagosMasivosManager - List found:\", list);\n                const items = list.getItems();\n                console.log(\"PagosMasivosManager - List items count:\", items.length);\n                \n                // Find the clicked item by comparing with the list item\n                for (let i = 0; i < items.length; i++) {\n                    if (items[i] === oItem) {\n                        console.log(\"PagosMasivosManager - Found clicked item at index:\", i);\n                        const model = list.getModel(\"planillas\");\n                        if (model) {\n                            const data = model.getData();\n                            const planillas = data?.PlanillasCollection || [];\n                            if (planillas[i]) {\n                                console.log(\"PagosMasivosManager - Found planilla data:\", planillas[i]);\n                                this.handlePlanillaSelection(planillas[i]);\n                                return;\n                            }\n                        }\n                        break;\n                    }\n                }\n                \n                console.log(\"PagosMasivosManager - Clicked item not found in list items\");\n            }\n            return;\n        }\n        \n        const oPlanilla = oContext.getObject();\n        console.log(\"PagosMasivosManager - Planilla data:\", oPlanilla);\n        \n        this.handlePlanillaSelection(oPlanilla);\n    }\n\n    private handlePlanillaSelection(oPlanilla: any): void {\n        if (oPlanilla && oPlanilla.DocEntry) {\n            const planillaId = oPlanilla.DocEntry;\n            console.log(\"PagosMasivosManager - Found planilla with ID:\", planillaId, \"from planilla:\", oPlanilla);\n            console.log(\"PagosMasivosManager - Planilla ID:\", planillaId);\n            \n            // Cargar datos de la planilla\n            this.loadPlanillaById(planillaId);\n            \n            // Navegar a la página de detalle usando routing\n            const oComponent = this.getController().getOwnerComponent() as any;\n            const oRouter = oComponent.getRouter();\n            oRouter.navTo(\"RoutePagosMasivosDetalle\", { planillaId: planillaId });\n        } else {\n            console.log(\"PagosMasivosManager - No valid planilla ID found\");\n        }\n    }\n\n    private loadPlanillaById(planillaId: string): void {\n        console.log(\"PagosMasivosManager - Loading planilla by ID:\", planillaId);\n        \n        // Cargar datos detallados desde el archivo planilla-object.json\n        const planillaDetailUrl = \"./model/mock/planilla-object.json\";\n        \n        try {\n            const oDetailModel = new JSONModel();\n            \n            // Load data synchronously first\n            oDetailModel.loadData(planillaDetailUrl, undefined, false);\n            \n            const oData = oDetailModel.getData();\n            console.log(\"PagosMasivosManager - Planilla detail data loaded:\", oData);\n            \n            const planillas = oData?.planillas || [];\n            console.log(\"PagosMasivosManager - Available planillas:\", planillas);\n            \n            // Buscar la planilla por ID (convert to number for comparison)\n            const planillaIdNum = parseInt(planillaId);\n            const planilla = planillas.find((item: any) => item.DocEntry === planillaIdNum);\n            \n            if (planilla) {\n                console.log(\"PagosMasivosManager - Planilla found in detail data:\", planilla);\n\n                \n                // Log all lines if they exist\n                if (planilla.VS_PMP1Collection && planilla.VS_PMP1Collection.length > 0) {\n                    console.log(\"PagosMasivosManager - Planilla Lines count:\", planilla.VS_PMP1Collection.length);\n                    console.log(\"PagosMasivosManager - Planilla Lines:\", planilla.VS_PMP1Collection);\n                    \n                    // Log each line individually\n                    planilla.VS_PMP1Collection.forEach((line: any, index: number) => {\n                        console.log(`PagosMasivosManager - Line ${index + 1}:`, {\n                            LineId: line.LineId,\n                            DocEntry: line.DocEntry,\n                            DocNum: line.DocNum,\n                            NumAtCard: line.NumAtCard,\n                            CardCode: line.CardCode,\n                            CardName: line.CardName,\n                            DocDate: line.DocDate,\n                            DocDueDate: line.DocDueDate,\n                            TaxDate: line.TaxDate,\n                            TaxCode: line.TaxCode,\n                            TaxAmount: line.TaxAmount,\n                            TaxAmountFC: line.TaxAmountFC,\n                            DocTotal: line.DocTotal,\n                            DocTotalFC: line.DocTotalFC,\n                            WithholdingTax: line.WithholdingTax\n                        });\n                    });\n                } else {\n                    console.log(\"PagosMasivosManager - No lines found for this planilla\");\n                }\n                \n                // Crear modelo para la planilla seleccionada\n                const oModelPlanilla = new JSONModel();\n                oModelPlanilla.setData(planilla);\n                \n                // Asignar el modelo a la vista\n                const oView = this.getController().getView();\n                if (oView) {\n                    oView.setModel(oModelPlanilla, \"planilla\");\n                    console.log(\"PagosMasivosManager - Planilla model assigned to view\");\n                    \n                    // Cargar también las series\n                    this.loadSeriesData();\n                }\n            } else {\n                console.log(\"PagosMasivosManager - Planilla not found in detail data, trying fallback\");\n                this.loadFallbackPlanillaData(planillaId);\n            }\n        } catch (error) {\n            console.error(\"PagosMasivosManager - Exception loading planilla detail data:\", error);\n            this.loadFallbackPlanillaData(planillaId);\n        }\n    }\n\n    private loadFallbackPlanillaData(planillaId: string): void {\n        console.log(\"PagosMasivosManager - Loading fallback planilla data for ID:\", planillaId);\n        \n        // Datos de respaldo para mostrar en caso de error\n        const fallbackData = {\n            \"DocEntry\": parseInt(planillaId),\n            \"DocNum\": parseInt(planillaId),\n            \"U_CUENTA\": \"1041101\",\n            \"U_IDBANCO\": \"BCP\",\n            \"U_NMBANCO\": \"BANCO DE CREDITO\",\n            \"U_CCBANCO\": \"1941985504094\",\n            \"U_MONEDA\": \"SOL\",\n            \"U_SERIE\": 24,\n            \"U_ESTADO\": \"E\",\n            \"U_FECHA\": \"2024-03-21T00:00:00Z\",\n            \"U_FECHAP\": \"2024-03-21T00:00:00Z\",\n            \"U_TC\": 3.701,\n            \"U_RETEN\": null,\n            \"U_FECHAV\": null,\n            \"U_IDSN\": null,\n            \"U_NMSN\": null,\n            \"U_GLOSA\": \"PG F/VARIAS\",\n            \"U_TOTAL\": 19516.06,\n            \"U_IDPAGO\": 1977,\n            \"U_SUBTOTAL\": 19516.06,\n            \"U_REF\": null,\n            \"U_NOPBAN\": \"09627515\",\n            \"U_IDSUC\": null,\n            \"U_NMSUC\": null,\n            \"U_FCAJA\": -1,\n            \"U_CONTA\": 0,\n            \"VS_PMP1Collection\": [\n                {\n                    \"DocEntry\": parseInt(planillaId),\n                    \"LineId\": 1,\n                    \"VisOrder\": 1,\n                    \"Object\": \"VS_OPMP\",\n                    \"LogInst\": null,\n                    \"U_CHECK\": \"Y\",\n                    \"U_IDPAGO\": 1971,\n                    \"U_TIPDOC\": \"Factura\",\n                    \"U_IDDOC\": 3617,\n                    \"U_LINDOC\": 0,\n                    \"U_OBJDOC\": \"18\",\n                    \"U_CUODOC\": \"1\",\n                    \"U_IDSN\": \"PL10081644867\",\n                    \"U_NMSN\": \"BUSTAMANTE DAVILA MARIA ELIZABETH\",\n                    \"U_RUC\": \"10081644867\",\n                    \"U_NUMDOC\": \"E001-78\",\n                    \"U_MONDOC\": \"SOL\",\n                    \"U_IMPORTE\": 288,\n                    \"U_SALDO\": 288,\n                    \"U_PAGONETO\": 288,\n                    \"U_PAGLOC\": 288,\n                    \"U_PAGEXT\": 0,\n                    \"U_RETLOC\": 0,\n                    \"U_RETEXT\": 0,\n                    \"U_FVENC\": \"2024-03-15T00:00:00Z\",\n                    \"U_FCONT\": \"2024-03-15T00:00:00Z\",\n                    \"U_FDOCU\": \"2024-03-15T00:00:00Z\",\n                    \"U_CCORRI\": \"19394614129025\",\n                    \"U_CTAINF\": \"BCP\",\n                    \"U_MONINF\": \"SOL\",\n                    \"U_RETCOD\": \"\",\n                    \"U_RETPOR\": 0,\n                    \"U_ESTADO\": \"1\",\n                    \"U_SL\": 288,\n                    \"U_SE\": 0,\n                    \"U_RL\": 0,\n                    \"U_RE\": 0,\n                    \"U_BL\": 0,\n                    \"U_BE\": 0,\n                    \"U_IL\": 288,\n                    \"U_REF2\": \"01E001-78\",\n                    \"U_PAGLOC0\": 0,\n                    \"U_PAGEXT0\": 0,\n                    \"U_RETLOC0\": 0,\n                    \"U_RETEXT0\": 0,\n                    \"U_MPBB\": \"2\"\n                }\n            ]\n        };\n        \n        const oModelPlanilla = new JSONModel();\n        oModelPlanilla.setData(fallbackData);\n        \n        const oView = this.getController().getView();\n        if (oView) {\n            oView.setModel(oModelPlanilla, \"planilla\");\n            console.log(\"PagosMasivosManager - Fallback planilla model assigned to view\");\n            \n            // Cargar también las series\n            this.loadSeriesData();\n        }\n    }\n\n    public loadSeriesData(): void {\n        console.log(\"PagosMasivosManager - Loading series data...\");\n        const seriesUrl = \"./model/mock/series-pago.json\";\n        \n        fetch(seriesUrl)\n            .then(response => {\n                console.log(\"PagosMasivosManager - Series response status:\", response.status);\n                return response.json();\n            })\n            .then(data => {\n                console.log(\"PagosMasivosManager - Series data received:\", data);\n                const oView = this.getController().getView();\n                if (oView) {\n                    const oModelSeries = new JSONModel();\n                    oModelSeries.setData(data);\n                    oView.setModel(oModelSeries, \"series\");\n                    console.log(\"PagosMasivosManager - Series model assigned to view\");\n                    console.log(\"PagosMasivosManager - Series model data:\", oModelSeries.getData());\n                } else {\n                    console.error(\"PagosMasivosManager - View not found when loading series\");\n                }\n            })\n            .catch(error => {\n                console.error(\"Error cargando series:\", error);\n            });\n    }\n\n    private navigateToDetailPage(): void {\n        console.log(\"PagosMasivosManager - Navigating to detail page\");\n        \n        const oComponent = this.getController().getOwnerComponent() as any;\n        const oRouter = oComponent.getRouter();\n        \n        // For new planillas, navigate without ID\n        oRouter.navTo(\"RoutePagosMasivosDetalle\", { planillaId: \"new\" });\n        console.log(\"PagosMasivosManager - Navigation to detail completed\");\n    }\n\n    private navigateBackToList(): void {\n        console.log(\"PagosMasivosManager - Navigating back to list\");\n        \n        const oComponent = this.getController().getOwnerComponent() as any;\n        const oRouter = oComponent.getRouter();\n        \n        oRouter.navTo(\"RoutePagosMasivos\");\n        console.log(\"PagosMasivosManager - Navigation back completed\");\n    }\n\n    private applyFilters(): void {\n        const aFilters: any[] = [];\n        \n        // Filtro de rango de fechas\n        const dateRangeFilter = this.getControlById(\"pagosMasivosDateRangeFilter\");\n        if (dateRangeFilter && dateRangeFilter.getValue()) {\n            const dateRangeValue = dateRangeFilter.getValue();\n            console.log(\"PagosMasivos - Filtro de rango de fechas:\", dateRangeFilter);\n            console.log(\"PagosMasivos - Valor del rango de fechas:\", dateRangeValue);\n            \n            // DateRangeSelection devuelve un string en formato \"startDate - endDate\"\n            if (dateRangeValue && typeof dateRangeValue === 'string' && dateRangeValue.includes(' - ')) {\n                const [startDateStr, endDateStr] = dateRangeValue.split(' - ');\n                if (startDateStr) {\n                    const startDate = new Date(startDateStr);\n                    aFilters.push({ path: \"DateOfSale\", operator: \"GE\", value: startDate });\n                }\n                if (endDateStr) {\n                    const endDate = new Date(endDateStr);\n                    aFilters.push({ path: \"DateOfSale\", operator: \"LE\", value: endDate });\n                }\n            }\n        }\n\n        // Filtro de estado\n        const statusFilter = this.getControlById(\"pagosMasivosStatusFilter\");\n        if (statusFilter && statusFilter.getSelectedKey() && statusFilter.getSelectedKey() !== \"\") {\n            aFilters.push({ path: \"U_ESTADO\", operator: \"EQ\", value: statusFilter.getSelectedKey() });\n        }\n\n        // Filtro de banco\n        const bancoFilter = this.getControlById(\"pagosMasivosBancoFilter\");\n        if (bancoFilter && bancoFilter.getSelectedKey() && bancoFilter.getSelectedKey() !== \"\") {\n            aFilters.push({ path: \"U_IDBANCO\", operator: \"EQ\", value: bancoFilter.getSelectedKey() });\n        }\n\n        // Aplicar filtros a datos originales\n        const originalData = this.oOriginalModel.getData();\n        let filteredData = originalData;\n\n        if (aFilters.length > 0) {\n            filteredData = this.filterData(originalData, aFilters);\n        }\n\n        this.oFilteredModel.setData(filteredData);\n    }\n\n    private filterData(data: any, filters: any[]): any {\n        if (!data || !data.PlanillasCollection) {\n            return data;\n        }\n\n        const filteredItems = data.PlanillasCollection.filter((item: any) => {\n            return filters.every(filter => {\n                const value = item[filter.path];\n                const filterValue = filter.value;\n                \n                switch (filter.operator) {\n                    case \"EQ\":\n                        return value === filterValue;\n                    case \"GE\":\n                        if (filter.path === \"DateOfSale\") {\n                            const itemDate = new Date(value);\n                            return itemDate >= filterValue;\n                        }\n                        return value >= filterValue;\n                    case \"LE\":\n                        if (filter.path === \"DateOfSale\") {\n                            const itemDate = new Date(value);\n                            return itemDate <= filterValue;\n                        }\n                        return value <= filterValue;\n                    default:\n                        return true;\n                }\n            });\n        });\n\n        return {\n            ...data,\n            PlanillasCollection: filteredItems\n        };\n    }\n\n    // Helper methods\n    private getControlById(controlId: string): any {\n        // This would need to be implemented to get controls from the view\n        // For now, we'll need to pass the controller reference\n        return null;\n    }\n\n    private getOwnerComponent(): UIComponent {\n        // This would need to be implemented to get the component\n        // For now, we'll need to pass the component reference\n        return null as any;\n    }\n\n    // Method to set controller reference for accessing controls\n    public setController(controller: any): void {\n        console.log(\"PagosMasivosManager - Setting controller reference:\", controller);\n        this.controller = controller;\n        this.getControlById = (controlId: string) => {\n            const control = controller.byId(controlId);\n            console.log(\"PagosMasivosManager - Getting control by ID:\", controlId, control);\n            return control;\n        };\n        this.getOwnerComponent = () => controller.getOwnerComponent();\n    }\n\n    // Method to get controller reference\n    public getController(): any {\n        return this.controller;\n    }\n\n    // Document Selection Methods\n    public onAddDocumentos(): void {\n        console.log(\"PagosMasivosManager - onAddDocumentos triggered\");\n        \n        // Check if we're in creation mode\n        const planillaModel = this.getController().getView().getModel(\"planilla\");\n        if (!planillaModel) {\n            console.error(\"PagosMasivosManager - Planilla model not found\");\n            return;\n        }\n        \n        const planillaData = planillaModel.getData();\n        if (!planillaData.isNewPlanilla) {\n            MessageToast.show(\"Solo se pueden agregar documentos en modo creación\", { duration: 3000 });\n            return;\n        }\n        \n        // Load available documents\n        this.loadAvailableDocuments();\n        \n        // Open the dialog\n        const dialog = this.getController().byId(\"documentSelectionDialog\");\n        if (dialog) {\n            dialog.open();\n        } else {\n            console.error(\"PagosMasivosManager - Document selection dialog not found\");\n        }\n    }\n\n    private loadAvailableDocuments(): void {\n        console.log(\"PagosMasivosManager - Loading available documents...\");\n        const documentsUrl = \"./model/mock/available-documents.json\";\n        \n        fetch(documentsUrl)\n            .then(response => {\n                console.log(\"PagosMasivosManager - Documents response status:\", response.status);\n                return response.json();\n            })\n            .then(data => {\n                console.log(\"PagosMasivosManager - Documents data received:\", data);\n                \n                // Get current planilla data to check for existing documents\n                const planillaModel = this.getController().getView().getModel(\"planilla\");\n                const currentLines = planillaModel ? planillaModel.getData().VS_PMP1Collection || [] : [];\n                \n                console.log(\"PagosMasivosManager - Current planilla lines:\", currentLines.length);\n                if (currentLines.length > 0) {\n                    console.log(\"PagosMasivosManager - Planilla lines details:\");\n                    currentLines.forEach((line: any, index: number) => {\n                        console.log(`  Line ${index}: U_NUMDOC=\"${line.U_NUMDOC}\", U_IDSN=\"${line.U_IDSN}\"`);\n                    });\n                }\n                console.log(\"PagosMasivosManager - Available documents:\", data.documents.length);\n                console.log(\"PagosMasivosManager - First few available documents:\");\n                data.documents.slice(0, 3).forEach((doc: any, index: number) => {\n                    console.log(`  Doc ${index}: DocNum=\"${doc.DocNum}\", CardCode=\"${doc.CardCode}\"`);\n                });\n                \n                // Add selected property and check if already in planilla for each document\n                data.documents.forEach((doc: any) => {\n                    doc.selected = false;\n                    \n                    // Always initialize to false first\n                    doc.alreadyInPlanilla = false;\n                    \n                    // Only check against existing lines if there are any\n                    if (currentLines.length > 0) {\n                        console.log(`PagosMasivosManager - Checking document ${doc.DocNum} (${doc.CardCode}) against ${currentLines.length} planilla lines`);\n                        \n                        const isAlreadyAdded = currentLines.some((line: any) => {\n                            const matches = line.U_NUMDOC === doc.DocNum && line.U_IDSN === doc.CardCode;\n                            console.log(`PagosMasivosManager - Comparing: \"${line.U_NUMDOC}\" === \"${doc.DocNum}\" && \"${line.U_IDSN}\" === \"${doc.CardCode}\" = ${matches}`);\n                            if (matches) {\n                                console.log(`PagosMasivosManager - Document ${doc.DocNum} (${doc.CardCode}) matches planilla line ${line.U_NUMDOC} (${line.U_IDSN})`);\n                            }\n                            return matches;\n                        });\n                        doc.alreadyInPlanilla = isAlreadyAdded;\n                    } else {\n                        console.log(`PagosMasivosManager - No planilla lines to check against for document ${doc.DocNum}`);\n                    }\n                    \n                    console.log(`PagosMasivosManager - Document ${doc.DocNum} (${doc.CardCode}) - alreadyInPlanilla: ${doc.alreadyInPlanilla}`);\n                });\n                \n                // Prepare model data\n                const modelData = {\n                    documents: data.documents,\n                    selectedTotal: 0,\n                    selectedCount: 0,\n                    existingCount: 0\n                };\n                \n                const oView = this.getController().getView();\n                if (oView) {\n                    const oModelDocuments = new JSONModel();\n                    oModelDocuments.setData(modelData);\n                    oView.setModel(oModelDocuments, \"availableDocuments\");\n                    console.log(\"PagosMasivosManager - Available documents model assigned to view\");\n                } else {\n                    console.error(\"PagosMasivosManager - View not found when loading documents\");\n                }\n            })\n            .catch(error => {\n                console.error(\"Error cargando documentos disponibles:\", error);\n                MessageToast.show(\"Error al cargar documentos disponibles\", { duration: 3000 });\n            });\n    }\n\n\n\n    public onDocumentSearch(oEvent: any): void {\n        const searchTerm = oEvent.getParameter(\"query\").toLowerCase();\n        console.log(\"PagosMasivosManager - Document search:\", searchTerm);\n        \n        const documentsModel = this.getController().getView().getModel(\"availableDocuments\");\n        if (!documentsModel) return;\n        \n        const data = documentsModel.getData();\n        const documents = data.documents;\n        \n        // Filter documents based on search term\n        const filteredDocuments = documents.filter((doc: any) => {\n            return doc.CardName.toLowerCase().includes(searchTerm) ||\n                   doc.DocNum.toLowerCase().includes(searchTerm) ||\n                   doc.CardCode.toLowerCase().includes(searchTerm);\n        });\n        \n        // Update the model with filtered data\n        documentsModel.setProperty(\"/documents\", filteredDocuments);\n    }\n\n\n\n    public onDocumentBankFilterChange(oEvent: any): void {\n        const selectedBank = oEvent.getParameter(\"selectedItem\").getKey();\n        console.log(\"PagosMasivosManager - Document bank filter:\", selectedBank);\n        \n        // Reload original data and apply filter\n        this.loadAvailableDocuments();\n        \n        if (selectedBank) {\n            const documentsModel = this.getController().getView().getModel(\"availableDocuments\");\n            if (!documentsModel) return;\n            \n            const data = documentsModel.getData();\n            const documents = data.documents;\n            \n            // Filter documents by bank\n            const filteredDocuments = documents.filter((doc: any) => {\n                return doc.BankCode === selectedBank;\n            });\n            \n            // Update the model with filtered data\n            documentsModel.setProperty(\"/documents\", filteredDocuments);\n        }\n    }\n\n\n\n    public onDocumentSelectionChange(oEvent: any): void {\n        console.log(\"PagosMasivosManager - Document selection changed\");\n        \n        const documentsModel = this.getController().getView().getModel(\"availableDocuments\");\n        if (!documentsModel) return;\n        \n        const data = documentsModel.getData();\n        const documents = data.documents;\n        \n        // Get current planilla data to check for existing documents\n        const planillaModel = this.getController().getView().getModel(\"planilla\");\n        const currentLines = planillaModel ? planillaModel.getData().VS_PMP1Collection || [] : [];\n        \n        // Get selected items from the table\n        const table = this.getController().byId(\"availableDocumentsTable\");\n        const selectedItems = table.getSelectedItems();\n        \n        // Update selected property for each document and check if it's already in planilla\n        documents.forEach((doc: any) => {\n            doc.selected = selectedItems.some((item: any) => {\n                const context = item.getBindingContext(\"availableDocuments\");\n                return context && context.getProperty(\"DocEntry\") === doc.DocEntry;\n            });\n            \n            // Always initialize to false first\n            doc.alreadyInPlanilla = false;\n            \n            // Only check against existing lines if there are any\n            if (currentLines.length > 0) {\n                const isAlreadyAdded = currentLines.some((line: any) => {\n                    const matches = line.U_NUMDOC === doc.DocNum && line.U_IDSN === doc.CardCode;\n                    if (matches) {\n                        console.log(`PagosMasivosManager - Selection change: Document ${doc.DocNum} (${doc.CardCode}) matches planilla line ${line.U_NUMDOC} (${line.U_IDSN})`);\n                    }\n                    return matches;\n                });\n                doc.alreadyInPlanilla = isAlreadyAdded;\n            }\n        });\n        \n        // Calculate selected total and count (excluding already existing documents)\n        const selectedDocuments = documents.filter((doc: any) => doc.selected && !doc.alreadyInPlanilla);\n        const selectedTotal = selectedDocuments.reduce((sum: number, doc: any) => sum + doc.Balance, 0);\n        const selectedCount = selectedDocuments.length;\n        \n        // Count documents that are selected but already in planilla\n        const selectedButExisting = documents.filter((doc: any) => doc.selected && doc.alreadyInPlanilla);\n        const existingCount = selectedButExisting.length;\n        \n        // Update the model\n        documentsModel.setProperty(\"/selectedTotal\", selectedTotal);\n        documentsModel.setProperty(\"/selectedCount\", selectedCount);\n        documentsModel.setProperty(\"/existingCount\", existingCount);\n        documentsModel.refresh(true);\n        \n        // Show warning if user selected documents that are already in planilla\n        if (existingCount > 0) {\n            console.log(`PagosMasivosManager - ${existingCount} selected document(s) already exist in planilla`);\n        }\n    }\n\n\n\n    public onDocumentDialogCancel(): void {\n        console.log(\"PagosMasivosManager - Document dialog cancelled\");\n        \n        const dialog = this.getController().byId(\"documentSelectionDialog\");\n        if (dialog) {\n            dialog.close();\n        }\n    }\n\n    public onDocumentDialogConfirm(): void {\n        console.log(\"PagosMasivosManager - Document dialog confirmed\");\n        \n        const documentsModel = this.getController().getView().getModel(\"availableDocuments\");\n        if (!documentsModel) return;\n        \n        const data = documentsModel.getData();\n        const selectedDocuments = data.documents.filter((doc: any) => doc.selected);\n        \n        if (selectedDocuments.length === 0) {\n            MessageToast.show(\"No hay documentos seleccionados\", { duration: 3000 });\n            return;\n        }\n        \n        // Filter out documents that are already in the planilla\n        const planillaModel = this.getController().getView().getModel(\"planilla\");\n        const currentLines = planillaModel ? planillaModel.getData().VS_PMP1Collection || [] : [];\n        \n        const validDocuments = selectedDocuments.filter((doc: any) => {\n            const isAlreadyInPlanilla = currentLines.some((line: any) => {\n                return line.U_NUMDOC === doc.DocNum && line.U_IDSN === doc.CardCode;\n            });\n            \n            if (isAlreadyInPlanilla) {\n                console.log(`PagosMasivosManager - Document ${doc.DocNum} already in planilla, skipping`);\n            }\n            \n            return !isAlreadyInPlanilla;\n        });\n        \n        if (validDocuments.length === 0) {\n            MessageToast.show(\"Todos los documentos seleccionados ya existen en la planilla\", { duration: 3000 });\n            return;\n        }\n        \n        if (validDocuments.length < selectedDocuments.length) {\n            const duplicateCount = selectedDocuments.length - validDocuments.length;\n            MessageToast.show(`${duplicateCount} documento(s) duplicado(s) fueron omitidos`, { duration: 3000 });\n        }\n        \n        // Add valid documents to the planilla\n        this.addDocumentsToPlanilla(validDocuments);\n        \n        // Close the dialog\n        const dialog = this.getController().byId(\"documentSelectionDialog\");\n        if (dialog) {\n            dialog.close();\n        }\n        \n        MessageToast.show(`${validDocuments.length} documento(s) agregado(s) a la planilla`, { duration: 3000 });\n    }\n\n    private addDocumentsToPlanilla(selectedDocuments: any[]): void {\n        console.log(\"PagosMasivosManager - Adding documents to planilla:\", selectedDocuments);\n        \n        const planillaModel = this.getController().getView().getModel(\"planilla\");\n        if (!planillaModel) return;\n        \n        const planillaData = planillaModel.getData();\n        const currentLines = planillaData.VS_PMP1Collection || [];\n        \n        // Convert documents to planilla lines (no need to check for duplicates as they're already filtered)\n        const newLines = selectedDocuments.map((doc: any, index: number) => {\n            const lineId = currentLines.length + index + 1;\n            return {\n                LineId: lineId,\n                DocEntry: doc.DocEntry,\n                DocNum: doc.DocNum,\n                NumAtCard: doc.DocNum,\n                CardCode: doc.CardCode,\n                CardName: doc.CardName,\n                DocDate: doc.DocDate,\n                DocDueDate: doc.DueDate,\n                TaxDate: doc.DocDate,\n                TaxCode: \"\",\n                TaxAmount: 0,\n                TaxAmountFC: 0,\n                DocTotal: doc.Total,\n                DocTotalFC: doc.Total,\n                WithholdingTax: 0,\n                // Planilla specific fields\n                U_NUMDOC: doc.DocNum,\n                U_IDSN: doc.CardCode,\n                U_NMSN: doc.CardName,\n                U_FDOCU: doc.DocDate,\n                U_FVENC: doc.DueDate,\n                U_IMPORTE: doc.Total,\n                U_SALDO: doc.Balance,\n                U_RETLOC: 0,\n                U_PAGLOC0: doc.Balance,\n                U_CTAINF: doc.BankCode,\n                U_CCORRI: doc.AccountCode,\n                U_MONINF: doc.Currency\n            };\n        });\n        \n        // Add new lines to existing lines\n        const updatedLines = [...currentLines, ...newLines];\n        planillaData.VS_PMP1Collection = updatedLines;\n        \n        // Recalculate totals\n        this.recalculatePlanillaTotals(planillaData);\n        \n        // Update the model\n        planillaModel.setData(planillaData);\n        planillaModel.refresh(true);\n        \n        console.log(\"PagosMasivosManager - Documents added to planilla. Total lines:\", updatedLines.length);\n        console.log(\"PagosMasivosManager - Documents added:\", selectedDocuments.length);\n    }\n\n    private recalculatePlanillaTotals(planillaData: any): void {\n        const lines = planillaData.VS_PMP1Collection || [];\n        \n        // Calculate totals\n        const total = lines.reduce((sum: number, line: any) => sum + (line.U_IMPORTE || 0), 0);\n        const reten = lines.reduce((sum: number, line: any) => sum + (line.U_RETLOC || 0), 0);\n        const subtotal = total - reten;\n        \n        // Update planilla totals\n        planillaData.U_TOTAL = total;\n        planillaData.U_RETEN = reten;\n        planillaData.U_SUBTOTAL = subtotal;\n        \n        console.log(\"PagosMasivosManager - Planilla totals recalculated:\", { total, reten, subtotal });\n    }\n\n}"],"mappings":"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","ignoreList":[]}