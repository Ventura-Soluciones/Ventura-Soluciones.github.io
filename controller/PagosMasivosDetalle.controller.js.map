{"version":3,"file":"PagosMasivosDetalle.controller.js","names":["formatter","_interopRequireDefault","__formatter","UserManager","___modules_UserManager","MenuManager","___modules_MenuManager","PagosMasivosManager","___modules_PagosMasivosManager","NavigationManager","___modules_NavigationManager","PagosMasivosDetalle","Controller","extend","constructor","prototype","apply","this","arguments","onInit","_onInit","userManager","menuManager","pagosMasivosManager","navigationManager","loadAuthenticatedUser","oView","getView","setModel","getModel","console","log","loadHardcodedMenuData","filterNavigationByRole","getCurrentUser","role","initializeModels","setController","oModel","JSONModel","loadData","undefined","cuentasBancariasModel","attachRequestCompleted","oFilterBar","byId","oTable","_filterTimer","data","getData","documents","forEach","doc","alreadyInPlanilla","setData","_clearTableFilters","checkForDetailNavigation","onExit","_onExit","onSelectionChange","_onSelectionChange","oEvent","_debouncedSearch","onDateRangeChange","_onDateRangeChange","iDelay","delay","clearTimeout","setTimeout","onSearch","_onSearch","aTableFilters","getFilterGroupItems","reduce","aResult","oFilterGroupItem","oControl","getControl","getSelectedKeys","aSelectedKeys","aFilters","map","sSelectedKey","fieldPath","getName","Filter","path","operator","FilterOperator","Contains","value1","length","push","filters","and","getValue","sValue","aDateRange","split","sStartDate","sEndDate","BT","value2","getBinding","filter","_logTableData","aData","getProperty","slice","docTypes","suppliers","banks","onSideNavigationItemSelect","_onSideNavigationItemSelect","onSideNavItemSelect","_onSideNavItemSelect","onMenuButtonPress","_onMenuButtonPress","onLogout","_onLogout","MessageBox","confirm","title","onClose","sAction","Action","OK","logout","MessageToast","show","duration","oComponent","getOwnerComponent","oRouter","getRouter","navTo","onBackToPagosMasivos","_onBackToPagosMasivos","onNuevaPlanilla","_onNuevaPlanilla","planillaId","onEditPlanilla","_onEditPlanilla","oModelPlanilla","planillaData","Status","error","onAnularPlanilla","_onAnularPlanilla","mockCancelPlanillaAPI","DocEntry","_mockCancelPlanillaAPI","mockResponse","success","message","timestamp","Date","toISOString","details","JSON","stringify","U_ESTADO","refresh","onDownloadPlanilla","_onDownloadPlanilla","onFechaEjecucionChange","_onFechaEjecucionChange","onSerieChange","_onSerieChange","onCuentaBancariaChange","_onCuentaBancariaChange","selectedItem","getParameter","selectedKey","getKey","cuentasBancarias","selectedAccount","value","find","account","AccNo","planillaModel","setProperty","BankCode","Branch","GLAccount","U_CUENTA","U_IDBANCO","U_NMBANCO","U_MONEDA","U_GLACCOUNT","onGuardarPlanilla","_onGuardarPlanilla","isNewPlanilla","validationResult","validateNewPlanilla","isValid","mockCreatePlanillaAPI","information","onEjecutarPlanilla","_onEjecutarPlanilla","warning","VS_PMP1Collection","mockExecutePlanillaAPI","_mockCreatePlanillaAPI","Math","floor","random","createdPlanilla","_mockExecutePlanillaAPI","executeData","U_FECHAP","U_TC","U_NOPBAN","executedPlanilla","_validateNewPlanilla","errors","U_SERIE","join","onAddDocumentos","_onAddDocumentos","onDocumentSearch","_onDocumentSearch","onDocumentBankFilterChange","_onDocumentBankFilterChange","onDocumentSelectionChange","_onDocumentSelectionChange","onDocumentDialogCancel","_onDocumentDialogCancel","onDocumentDialogConfirm","_onDocumentDialogConfirm","aSelectedItems","getSelectedItems","oPlanillaModel","currentDocuments","existingDocNums","U_NUMDOC","documentsToAdd","skippedDocuments","oItem","documentData","getBindingContext","getObject","includes","DocNum","newLine","LineId","VisOrder","Object","LogInst","U_CHECK","U_IDPAGO","U_TIPDOC","DocType","U_IDDOC","U_LINDOC","U_OBJDOC","U_CUODOC","U_IDSN","CardCode","U_NMSN","CardName","U_RUC","U_MONDOC","Currency","U_IMPORTE","Total","U_SALDO","Balance","U_PAGONETO","U_PAGLOC","U_PAGEXT","U_RETLOC","U_RETEXT","U_FVENC","DueDate","U_FCONT","DocDate","U_FDOCU","U_CCORRI","CuentaBancaria","U_CTAINF","U_MONINF","U_RETCOD","U_RETPOR","U_SL","U_SE","U_RL","U_RE","U_BL","U_BE","U_IL","U_REF2","U_PAGLOC0","U_PAGEXT0","U_RETLOC0","U_RETEXT0","U_MPBB","recalculatePlanillaTotals","updateAlreadyAddedStatus","oDialog","close","removeSelections","_updateAlreadyAddedStatus","markAlreadyAddedDocuments","onDeletePlanillaLine","_onDeletePlanillaLine","button","getSource","listItem","getParent","bindingContext","lineData","lineIndex","getPath","pop","action","deletePlanillaLine","parseInt","_deletePlanillaLine","updatedLines","line","index","_recalculatePlanillaTotals","lines","totalImporte","sum","totalRetencion","totalPagoFinal","U_TOTAL","U_RETEN","U_SUBTOTAL","total","retencion","subtotal","onDeleteSelectedLines","_onDeleteSelectedLines","selectedItems","documentsToDelete","item","documentNames","deleteSelectedPlanillaLines","_deleteSelectedPlanillaLines","documentNumbersToDelete","loadPlanillaById","_loadPlanillaById","planillasUrl","oData","planillas","planillaIdNum","planilla","planillaWithMode","loadSeriesData","loadFallbackPlanillaData","_loadFallbackPlanillaData","fallbackData","U_CCBANCO","U_FECHA","U_FECHAV","U_GLOSA","U_REF","U_IDSUC","U_NMSUC","U_FCAJA","U_CONTA","_checkForDetailNavigation","oRoute","getRoute","attachPatternMatched","createNewPlanilla","onDocumentDialogAfterOpen","_onDocumentDialogAfterOpen","availableDocuments","_markAlreadyAddedDocuments","keys","markedCount","isAlreadyAdded"],"sources":["PagosMasivosDetalle.controller.ts"],"sourcesContent":["import Controller from \"sap/ui/core/mvc/Controller\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport Dialog from \"sap/m/Dialog\";\nimport formatter from \"../model/formatter\";\nimport Event from \"sap/ui/base/Event\";\nimport type UIComponent from \"sap/ui/core/UIComponent\";\nimport { UserManager } from \"./modules/UserManager\";\nimport { MenuManager } from \"./modules/MenuManager\";\nimport { PagosMasivosManager } from \"./modules/PagosMasivosManager\";\nimport { NavigationManager } from \"./modules/NavigationManager\";\nimport Filter from \"sap/ui/model/Filter\";\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\n\n\n/**\n * @namespace com.vs.extension.finanb1.controller\n */\nexport default class PagosMasivosDetalle extends Controller {\n    public formatter = formatter;\n    \n    // Gestores para diferentes funcionalidades\n    public userManager: UserManager;\n    public menuManager: MenuManager;\n    public pagosMasivosManager: PagosMasivosManager;\n    public navigationManager: NavigationManager;\n\n    // Propiedades para FilterBar\n    private oModel: any;\n    private oFilterBar: any;\n    private oTable: any;\n    private _filterTimer: any;\n\n\n    public onInit(): void {\n        // Inicializar gestores\n        this.userManager = new UserManager();\n        this.menuManager = new MenuManager();\n        this.pagosMasivosManager = new PagosMasivosManager();\n        this.navigationManager = new NavigationManager(this);\n        \n        // Cargar usuario autenticado\n        this.userManager.loadAuthenticatedUser();\n        \n        // Configurar modelo del menú\n        const oView = this.getView();\n        if (oView) {\n            oView.setModel(this.menuManager.getModel(), \"menuModel\");\n            console.log(\"Modelo de menú asignado a la vista en onInit\");\n        }\n        \n        // Cargar datos del menú\n        this.menuManager.loadHardcodedMenuData();\n        this.menuManager.filterNavigationByRole(this.userManager.getCurrentUser()?.role || 'user');\n        \n        // Inicializar modelos de PagosMasivos\n        this.pagosMasivosManager.initializeModels();\n        this.pagosMasivosManager.setController(this);\n        \n        // Configurar modelo de documentos disponibles\n        if (oView) {\n            this.oModel = new JSONModel();\n\t\t\tthis.oModel.loadData(\"./model/mock/available-documents.json\", undefined, false);\n\t\t\toView.setModel(this.oModel, \"oModel\");\n\n            // Cargar datos de cuentas bancarias\n            const cuentasBancariasModel = new JSONModel();\n            cuentasBancariasModel.loadData(\"./model/mock/cuentas-bancarias.json\", undefined, false);\n            oView.setModel(cuentasBancariasModel, \"cuentasBancarias\");\n            \n            // Asegurar que los datos de cuentas bancarias se carguen\n            cuentasBancariasModel.attachRequestCompleted(() => {\n                console.log(\"Modelo de cuentas bancarias cargado\");\n            });\n\n            this.oFilterBar = this.getView()?.byId(\"filterbar\");\n            this.oTable = this.getView()?.byId(\"table\");\n            \n            // Inicializar temporizador de debounce para filtrado automático\n            this._filterTimer = null;\n            \n            // Asegurar que la tabla muestre todos los datos inicialmente después de cargar el modelo\n            this.oModel.attachRequestCompleted(() => {\n                console.log(\"Modelo de documentos disponibles cargado\");\n                // Inicializar alreadyInPlanilla a false para todos los documentos\n                const data = this.oModel.getData();\n                if (data && data.documents) {\n                    data.documents.forEach((doc: any) => {\n                        doc.alreadyInPlanilla = false;\n                    });\n                    this.oModel.setData(data);\n                }\n                this._clearTableFilters();\n            });\n        }\n        \n\n        \n        // Verificar navegación a detalle\n        this.checkForDetailNavigation();\n    }\n\n//MÉTODOS DE FILTROS\npublic onExit(): void {\n    this.oModel = null;\n    this.oFilterBar = null;\n    this.oTable = null;\n}\n\npublic onSelectionChange(oEvent: Event): void {\n    // Aplicar filtro inmediatamente\n    this._debouncedSearch();\n}\n\npublic onDateRangeChange(oEvent: Event): void {\n    // Aplicar filtro inmediatamente\n    this._debouncedSearch();\n}\n\nprivate _debouncedSearch(iDelay?: number): void {\n    const delay = iDelay || 0;\n    \n    // Limpiar temporizador existente\n    if (this._filterTimer) {\n        clearTimeout(this._filterTimer);\n    }\n    \n    // Establecer nuevo temporizador\n    this._filterTimer = setTimeout(() => {\n        this.onSearch();\n    }, delay);\n}\n\npublic onSearch(): void {\n    const aTableFilters = this.oFilterBar.getFilterGroupItems().reduce((aResult: any[], oFilterGroupItem: any) => {\n        const oControl = oFilterGroupItem.getControl();\n        \n        // Manejar controles MultiComboBox (filtros de texto)\n        if (oControl && oControl.getSelectedKeys) {\n            const aSelectedKeys = oControl.getSelectedKeys();\n            const aFilters = aSelectedKeys.map((sSelectedKey: string) => {\n                // Mapear nombres de filtros a campos reales de datos\n                let fieldPath = oFilterGroupItem.getName();\n                if (fieldPath === \"Name\") fieldPath = \"DocType\";\n                else if (fieldPath === \"Category\") fieldPath = \"CardCode\";\n                else if (fieldPath === \"SupplierName\") fieldPath = \"BankCode\";\n                \n                return new Filter({\n                    path: fieldPath,\n                    operator: FilterOperator.Contains,\n                    value1: sSelectedKey\n                });\n            });\n\n            if (aSelectedKeys.length > 0) {\n                aResult.push(new Filter({\n                    filters: aFilters,\n                    and: false\n                }));\n            }\n        }\n        // Manejar controles DateRangeSelection (filtros de rango de fechas)\n        else if (oControl && oControl.getValue) {\n            const sValue = oControl.getValue();\n            if (sValue && sValue !== \"\") {\n                const aDateRange = sValue.split(\" - \");\n                if (aDateRange.length === 2) {\n                    const sStartDate = aDateRange[0];\n                    const sEndDate = aDateRange[1];\n                    \n                    // Solo aplicar filtro si ambas fechas están seleccionadas\n                    if (sStartDate && sEndDate && sStartDate !== \"\" && sEndDate !== \"\") {\n                        aResult.push(new Filter({\n                            path: \"DocDate\", // Mapear al campo de fecha del documento\n                            operator: FilterOperator.BT,\n                            value1: sStartDate,\n                            value2: sEndDate\n                        }));\n                    }\n                }\n            }\n        }\n\n        return aResult;\n    }, []);\n\n    if (this.oTable && this.oTable.getBinding(\"items\")) {\n        this.oTable.getBinding(\"items\").filter(aTableFilters);\n    }\n}\n\n\n\nprivate _clearTableFilters(): void {\n    // Limpiar filtros existentes para mostrar todos los datos\n    if (this.oTable && this.oTable.getBinding(\"items\")) {\n        this.oTable.getBinding(\"items\").filter([]);\n    }\n    \n    // Depuración: Registrar los datos para ver qué está disponible\n    this._logTableData();\n}\n\nprivate _logTableData(): void {\n    // Método de depuración para verificar qué datos están disponibles\n    const oView = this.getView();\n    if (!oView) return;\n    \n    const oModel = oView.getModel();\n    if (!oModel) return;\n    \n    const aData = oModel.getProperty(\"/documents\");\n    if (!aData) return;\n    \n    console.log(\"Total de documentos:\", aData.length);\n    console.log(\"Primeros documentos:\", aData.slice(0, 3));\n    \n    // Registrar datos de filtros disponibles\n    const docTypes = oModel.getProperty(\"/docTypes\");\n    const suppliers = oModel.getProperty(\"/suppliers\");\n    const banks = oModel.getProperty(\"/banks\");\n    \n    console.log(\"Tipos de documento disponibles:\", docTypes?.length || 0);\n    console.log(\"Proveedores disponibles:\", suppliers?.length || 0);\n    console.log(\"Bancos disponibles:\", banks?.length || 0);\n}\n\n\n    // ===== MÉTODOS DE NAVEGACIÓN =====\n    public onSideNavigationItemSelect(oEvent: Event): void {\n        this.navigationManager.onSideNavigationItemSelect(oEvent);\n    }\n\n    public onSideNavItemSelect(oEvent: any): void {\n        this.navigationManager.onSideNavItemSelect(oEvent);\n    }\n\n    public onMenuButtonPress(): void {\n        this.navigationManager.onMenuButtonPress();\n    }\n\n    public onLogout(): void {\n        MessageBox.confirm(\"¿Está seguro que desea cerrar sesión?\", {\n            title: \"Confirmar Cierre de Sesión\",\n            onClose: (sAction: string) => {\n                if (sAction === MessageBox.Action.OK) {\n                    this.userManager.logout();\n                    MessageToast.show(\"Sesión cerrada exitosamente\", { duration: 2000 });\n                    const oComponent = this.getOwnerComponent() as UIComponent;\n                    const oRouter = oComponent.getRouter();\n                    oRouter.navTo(\"RouteLogin\");\n                }\n            }\n        });\n    }\n\n    // ===== MÉTODOS DE PAGOS MASIVOS DETALLE =====\n    public onBackToPagosMasivos(): void {\n        console.log(\"PagosMasivosDetalle.controller - onBackToPagosMasivos triggered!\");\n        const oComponent = this.getOwnerComponent() as UIComponent;\n        const oRouter = oComponent.getRouter();\n        oRouter.navTo(\"RoutePagosMasivos\");\n    }\n\n    public onNuevaPlanilla(): void {\n        console.log(\"PagosMasivosDetalle.controller - onNuevaPlanilla triggered!\");\n        // Navigate to new planilla\n        const oComponent = this.getOwnerComponent() as UIComponent;\n        const oRouter = oComponent.getRouter();\n        oRouter.navTo(\"RoutePagosMasivosDetalle\", { planillaId: \"new\" });\n    }\n\n    public onEditPlanilla(): void {\n        const oView = this.getView();\n        if (oView) {\n            const oModelPlanilla = oView.getModel(\"planilla\") as JSONModel;\n            if (oModelPlanilla) {\n                const planillaData = oModelPlanilla.getData();\n                if (planillaData && planillaData.Status === \"Creada\") {\n                    MessageToast.show(\"Función de edición en desarrollo\", { duration: 2000 });\n                    // Aquí se puede implementar la lógica para editar la planilla\n                } else {\n                    MessageBox.error(\"Solo se pueden editar planillas con estado 'Creada'\");\n                }\n            }\n        }\n    }\n\n    public onAnularPlanilla(): void {\n        const oView = this.getView();\n        if (oView) {\n            const oModelPlanilla = oView.getModel(\"planilla\") as JSONModel;\n            if (oModelPlanilla) {\n                const planillaData = oModelPlanilla.getData();\n                if (planillaData) {\n                    MessageBox.confirm(\"¿Está seguro que desea anular esta planilla?\", {\n                        title: \"Confirmar Anulación\",\n                        onClose: (sAction: string) => {\n                            if (sAction === MessageBox.Action.OK) {\n                                // Mock API call to cancel planilla\n                                this.mockCancelPlanillaAPI(planillaData.DocEntry);\n                            }\n                        }\n                    });\n                } else {\n                    MessageBox.error(\"No se pudo obtener los datos de la planilla\");\n                }\n            } else {\n                MessageBox.error(\"No se pudo acceder al modelo de la planilla\");\n            }\n        } else {\n            MessageBox.error(\"No se pudo acceder a la vista\");\n        }\n    }\n\n    private mockCancelPlanillaAPI(planillaId: number): void {\n        console.log(\"PagosMasivosDetalle.controller - Llamada API simulada: POST /Planilla(\" + planillaId + \")/Cancel\");\n        \n        // Simular retraso de llamada API\n        setTimeout(() => {\n            // Respuesta exitosa simulada\n            const mockResponse = {\n                success: true,\n                message: \"Planilla anulada exitosamente\",\n                planillaId: planillaId,\n                timestamp: new Date().toISOString()\n            };\n            \n            console.log(\"PagosMasivosDetalle.controller - Respuesta API simulada:\", mockResponse);\n            \n            // Mostrar mensaje de éxito\n            MessageBox.success(\"Planilla anulada exitosamente\", {\n                title: \"Operación Exitosa\",\n                details: `Llamada API: POST /Planilla(${planillaId})/Cancel\\nRespuesta: ${JSON.stringify(mockResponse, null, 2)}`,\n                onClose: () => {\n                    // Actualizar el estado de la planilla en el modelo\n                    const oView = this.getView();\n                    if (oView) {\n                        const oModelPlanilla = oView.getModel(\"planilla\") as JSONModel;\n                        if (oModelPlanilla) {\n                            const planillaData = oModelPlanilla.getData();\n                            if (planillaData) {\n                                planillaData.U_ESTADO = \"A\"; // Anulada\n                                oModelPlanilla.refresh(true);\n                                console.log(\"PagosMasivosDetalle.controller - Estado de planilla actualizado a 'Anulada'\");\n                            }\n                        }\n                    }\n                }\n            });\n        }, 1000); // Retraso de 1 segundo para simular llamada API\n    }\n\n    public onDownloadPlanilla(): void {\n        console.log(\"PagosMasivosDetalle.controller - onDownloadPlanilla triggered!\");\n        this.pagosMasivosManager.onDownloadPlanilla();\n    }\n\n    public onFechaEjecucionChange(oEvent: any): void {\n        console.log(\"PagosMasivosDetalle.controller - onFechaEjecucionChange triggered!\");\n        this.pagosMasivosManager.onFechaEjecucionChange(oEvent);\n    }\n\n    public onSerieChange(oEvent: any): void {\n        console.log(\"PagosMasivosDetalle.controller - onSerieChange triggered!\");\n        this.pagosMasivosManager.onSerieChange(oEvent);\n    }\n\n    public onCuentaBancariaChange(oEvent: any): void {\n        console.log(\"PagosMasivosDetalle.controller - onCuentaBancariaChange activado\");\n        \n        const oView = this.getView();\n        if (!oView) return;\n        \n        const selectedItem = oEvent.getParameter(\"selectedItem\");\n        if (!selectedItem) {\n            console.log(\"No se seleccionó ninguna cuenta bancaria\");\n            return;\n        }\n        \n        const selectedKey = selectedItem.getKey();\n        console.log(\"PagosMasivosDetalle.controller - Cuenta bancaria seleccionada (clave):\", selectedKey);\n        \n        // Obtener el modelo de cuentas bancarias para encontrar la cuenta seleccionada\n        const cuentasBancariasModel = oView.getModel(\"cuentasBancarias\") as JSONModel;\n        if (!cuentasBancariasModel) {\n            console.error(\"PagosMasivosDetalle.controller - Modelo de cuentas bancarias no encontrado\");\n            return;\n        }\n        \n        const cuentasBancarias = cuentasBancariasModel.getData();\n        const selectedAccount = cuentasBancarias.value.find((account: any) => account.AccNo === selectedKey);\n        \n        if (!selectedAccount) {\n            console.error(\"PagosMasivosDetalle.controller - Cuenta seleccionada no encontrada\");\n            return;\n        }\n        \n        console.log(\"PagosMasivosDetalle.controller - Cuenta seleccionada:\", selectedAccount);\n        \n        // Actualizar el modelo de planilla con los datos de la cuenta seleccionada\n        const planillaModel = oView.getModel(\"planilla\") as JSONModel;\n        if (planillaModel) {\n            // Actualizar los campos basándose en la cuenta seleccionada\n            planillaModel.setProperty(\"/U_CUENTA\", selectedAccount.AccNo);\n            planillaModel.setProperty(\"/U_IDBANCO\", selectedAccount.BankCode);\n            planillaModel.setProperty(\"/U_NMBANCO\", selectedAccount.BankCode); // Usando BankCode como nombre del banco por ahora\n            planillaModel.setProperty(\"/U_MONEDA\", selectedAccount.Branch);\n            planillaModel.setProperty(\"/U_GLACCOUNT\", selectedAccount.GLAccount);\n            \n            console.log(\"PagosMasivosDetalle.controller - Planilla actualizada con datos de cuenta:\", {\n                U_CUENTA: selectedAccount.AccNo,\n                U_IDBANCO: selectedAccount.BankCode,\n                U_NMBANCO: selectedAccount.BankCode,\n                U_MONEDA: selectedAccount.Branch,\n                U_GLACCOUNT: selectedAccount.GLAccount\n            });\n            \n            // Forzar actualización del modelo\n            planillaModel.refresh(true);\n        } else {\n            console.error(\"PagosMasivosDetalle.controller - Modelo de planilla no encontrado\");\n        }\n    }\n\n    public onGuardarPlanilla(): void {\n        console.log(\"PagosMasivosDetalle.controller - onGuardarPlanilla triggered!\");\n        \n        const oView = this.getView();\n        if (!oView) {\n            MessageBox.error(\"No se pudo acceder a la vista\");\n            return;\n        }\n        \n        const oModelPlanilla = oView.getModel(\"planilla\") as JSONModel;\n        if (!oModelPlanilla) {\n            MessageBox.error(\"No se pudo acceder al modelo de la planilla\");\n            return;\n        }\n        \n        const planillaData = oModelPlanilla.getData();\n        if (!planillaData) {\n            MessageBox.error(\"No se pudo obtener los datos de la planilla\");\n            return;\n        }\n        \n        // Verificar si es una nueva planilla\n        console.log(\"PagosMasivosDetalle.controller - Valor de isNewPlanilla:\", planillaData.isNewPlanilla);\n        console.log(\"PagosMasivosDetalle.controller - Datos de planilla:\", planillaData);\n        \n        if (planillaData.isNewPlanilla === true) {\n            // Validar campos requeridos para nueva planilla\n            const validationResult = this.validateNewPlanilla(planillaData);\n            \n            if (!validationResult.isValid) {\n                MessageBox.error(validationResult.message, {\n                    title: \"Validación Requerida\"\n                });\n                return;\n            }\n            \n            // Mostrar confirmación para crear nueva planilla\n            MessageBox.confirm(\"¿Está seguro que desea crear esta planilla?\", {\n                title: \"Confirmar Creación\",\n                onClose: (sAction: string) => {\n                    if (sAction === MessageBox.Action.OK) {\n                        // Llamada API simulada para crear planilla\n                        this.mockCreatePlanillaAPI(planillaData);\n                    }\n                }\n            });\n        } else {\n            // Para planillas existentes, solo mostrar un mensaje\n            MessageBox.information(\"Esta planilla ya existe. Use 'Ejecutar' para procesarla.\");\n        }\n    }\n\n    public onEjecutarPlanilla(): void {\n        console.log(\"PagosMasivosDetalle.controller - onEjecutarPlanilla triggered!\");\n        \n        const oView = this.getView();\n        if (!oView) {\n            MessageBox.error(\"No se pudo acceder a la vista\");\n            return;\n        }\n        \n        const oModelPlanilla = oView.getModel(\"planilla\") as JSONModel;\n        if (!oModelPlanilla) {\n            MessageBox.error(\"No se pudo acceder al modelo de la planilla\");\n            return;\n        }\n        \n        const planillaData = oModelPlanilla.getData();\n        if (!planillaData) {\n            MessageBox.error(\"No se pudo obtener los datos de la planilla\");\n            return;\n        }\n        \n        // Verificar que la planilla esté en estado \"Creada\"\n        if (planillaData.U_ESTADO !== \"C\") {\n            MessageBox.warning(\"Solo se pueden ejecutar planillas con estado 'Creada'\");\n            return;\n        }\n        \n        // Validar que tenga al menos un documento\n        if (!planillaData.VS_PMP1Collection || planillaData.VS_PMP1Collection.length === 0) {\n            MessageBox.warning(\"La planilla debe tener al menos un documento para ser ejecutada\");\n            return;\n        }\n        \n        // Mostrar confirmación para ejecutar la planilla\n        MessageBox.confirm(\"¿Está seguro que desea ejecutar esta planilla?\", {\n            title: \"Confirmar Ejecución\",\n            onClose: (sAction: string) => {\n                if (sAction === MessageBox.Action.OK) {\n                    // Llamada API simulada para ejecutar planilla\n                    this.mockExecutePlanillaAPI(planillaData);\n                }\n            }\n        });\n    }\n\n    private mockCreatePlanillaAPI(planillaData: any): void {\n        console.log(\"PagosMasivosDetalle.controller - Llamada API simulada: POST /Planilla\");\n        console.log(\"PagosMasivosDetalle.controller - Datos enviados:\", planillaData);\n        \n        // Simular retraso de llamada API\n        setTimeout(() => {\n            // Respuesta exitosa simulada\n            const mockResponse = {\n                success: true,\n                message: \"Planilla creada exitosamente\",\n                planillaId: Math.floor(Math.random() * 1000) + 100, // ID aleatorio\n                timestamp: new Date().toISOString(),\n                createdPlanilla: {\n                    ...planillaData,\n                    DocEntry: Math.floor(Math.random() * 1000) + 100,\n                    isNewPlanilla: false,\n                    U_ESTADO: \"C\" // Creada\n                }\n            };\n            \n            console.log(\"PagosMasivosDetalle.controller - Respuesta API simulada:\", mockResponse);\n            \n            // Mostrar mensaje de éxito con detalles de la API\n            MessageBox.success(\"Planilla creada exitosamente\", {\n                title: \"Operación Exitosa\",\n                details: `Llamada API: POST /Planilla\\nDatos enviados: ${JSON.stringify(planillaData, null, 2)}\\nRespuesta: ${JSON.stringify(mockResponse, null, 2)}`,\n                onClose: () => {\n                    // Actualizar la planilla con los datos de respuesta\n                    const oView = this.getView();\n                    if (oView) {\n                        const oModelPlanilla = oView.getModel(\"planilla\") as JSONModel;\n                        if (oModelPlanilla) {\n                            // Actualizar con los datos de la planilla creada\n                            oModelPlanilla.setData(mockResponse.createdPlanilla);\n                            oModelPlanilla.refresh(true);\n                            console.log(\"PagosMasivosDetalle.controller - Planilla actualizada con datos creados\");\n                        }\n                    }\n                }\n            });\n        }, 1500); // Retraso de 1.5 segundos para simular llamada API\n    }\n\n    private mockExecutePlanillaAPI(planillaData: any): void {\n        console.log(\"PagosMasivosDetalle.controller - Llamada API simulada: POST /Planilla(\" + planillaData.DocEntry + \")/Execute\");\n        \n        // Preparar solo los datos requeridos para la ejecución\n        const executeData = {\n            DocEntry: planillaData.DocEntry,\n            U_FECHAP: planillaData.U_FECHAP,\n            U_TC: planillaData.U_TC,\n            U_NOPBAN: planillaData.U_NOPBAN\n        };\n        \n        console.log(\"PagosMasivosDetalle.controller - Datos enviados para ejecución:\", executeData);\n        \n        // Simular retraso de llamada API\n        setTimeout(() => {\n            // Respuesta exitosa simulada\n            const mockResponse = {\n                success: true,\n                message: \"Planilla ejecutada exitosamente\",\n                planillaId: planillaData.DocEntry,\n                timestamp: new Date().toISOString(),\n                executedPlanilla: {\n                    ...planillaData,\n                    U_ESTADO: \"E\" // Ejecutada\n                }\n            };\n            \n            console.log(\"PagosMasivosDetalle.controller - Respuesta API simulada:\", mockResponse);\n            \n            // Mostrar mensaje de éxito con detalles de la API\n            MessageBox.success(\"Planilla ejecutada exitosamente\", {\n                title: \"Operación Exitosa\",\n                details: `Llamada API: POST /Planilla(${planillaData.DocEntry})/Execute\\nDatos enviados: ${JSON.stringify(executeData, null, 2)}\\nRespuesta: ${JSON.stringify(mockResponse, null, 2)}`,\n                onClose: () => {\n                    // Actualizar la planilla con los datos de respuesta\n                    const oView = this.getView();\n                    if (oView) {\n                        const oModelPlanilla = oView.getModel(\"planilla\") as JSONModel;\n                        if (oModelPlanilla) {\n                            // Actualizar con los datos de la planilla ejecutada\n                            oModelPlanilla.setData(mockResponse.executedPlanilla);\n                            oModelPlanilla.refresh(true);\n                            console.log(\"PagosMasivosDetalle.controller - Planilla actualizada con datos ejecutados\");\n                        }\n                    }\n                }\n            });\n        }, 2000); // Retraso de 2 segundos para simular llamada API\n    }\n\n    private validateNewPlanilla(planillaData: any): { isValid: boolean; message: string } {\n        console.log(\"PagosMasivosDetalle.controller - Validando nueva planilla:\", planillaData);\n        \n        const errors: string[] = [];\n        \n        // Validar Cuenta Bancaria\n        if (!planillaData.U_CUENTA) {\n            errors.push(\"• Cuenta Bancaria es requerida\");\n        }\n        \n        // Validar Serie\n        if (!planillaData.U_SERIE) {\n            errors.push(\"• Serie es requerida\");\n        }\n        \n        // Validar Fecha de Ejecución\n        if (!planillaData.U_FECHAP) {\n            errors.push(\"• Fecha de Ejecución es requerida\");\n        }\n        \n        // Validar Tipo de Cambio\n        if (!planillaData.U_TC) {\n            errors.push(\"• Tipo de Cambio es requerido\");\n        }\n        \n        // Validar al menos un documento\n        if (!planillaData.VS_PMP1Collection || planillaData.VS_PMP1Collection.length === 0) {\n            errors.push(\"• Al menos un documento es requerido\");\n        }\n        \n        if (errors.length > 0) {\n            const message = \"Por favor complete los siguientes campos requeridos:\\n\\n\" + errors.join(\"\\n\");\n            return { isValid: false, message: message };\n        }\n        \n        return { isValid: true, message: \"\" };\n    }\n\n    public onAddDocumentos(): void {\n        console.log(\"PagosMasivosDetalle.controller - onAddDocumentos triggered!\");\n        if (this.pagosMasivosManager) {\n            this.pagosMasivosManager.onAddDocumentos();\n        } else {\n            console.error(\"PagosMasivosManager is not initialized!\");\n        }\n    }\n\n    public onDocumentSearch(oEvent: any): void {\n        console.log(\"PagosMasivosDetalle.controller - onDocumentSearch triggered!\");\n        if (this.pagosMasivosManager) {\n            this.pagosMasivosManager.onDocumentSearch(oEvent);\n        }\n    }\n\n\n\n    public onDocumentBankFilterChange(oEvent: any): void {\n        console.log(\"PagosMasivosDetalle.controller - onDocumentBankFilterChange triggered!\");\n        if (this.pagosMasivosManager) {\n            this.pagosMasivosManager.onDocumentBankFilterChange(oEvent);\n        }\n    }\n\n\n\n    public onDocumentSelectionChange(oEvent: any): void {\n        console.log(\"PagosMasivosDetalle.controller - onDocumentSelectionChange triggered!\");\n        if (this.pagosMasivosManager) {\n            this.pagosMasivosManager.onDocumentSelectionChange(oEvent);\n        }\n    }\n\n    public onDocumentDialogCancel(): void {\n        console.log(\"PagosMasivosDetalle.controller - onDocumentDialogCancel triggered!\");\n        if (this.pagosMasivosManager) {\n            this.pagosMasivosManager.onDocumentDialogCancel();\n        }\n    }\n\n    public onDocumentDialogConfirm(): void {\n        console.log(\"PagosMasivosDetalle.controller - onDocumentDialogConfirm triggered!\");\n        \n        const oView = this.getView();\n        if (!oView) return;\n        \n        const oTable = oView.byId(\"table\") as any;\n        if (!oTable) return;\n        \n        const aSelectedItems = oTable.getSelectedItems();\n        if (aSelectedItems.length === 0) {\n            MessageBox.warning(\"Por favor seleccione al menos un documento.\");\n            return;\n        }\n        \n        // Obtener el modelo de planilla\n        const oPlanillaModel = oView.getModel(\"planilla\") as JSONModel;\n        if (!oPlanillaModel) return;\n        \n        const planillaData = oPlanillaModel.getData();\n        if (!planillaData) return;\n        \n        // Obtener documentos actuales en la planilla\n        const currentDocuments = planillaData.VS_PMP1Collection || [];\n        \n        // Obtener números de documentos existentes para evitar duplicados\n        const existingDocNums = currentDocuments.map((doc: any) => doc.U_NUMDOC);\n        const documentsToAdd: any[] = [];\n        const skippedDocuments: any[] = [];\n        \n        // Agregar documentos seleccionados a la planilla (evitando duplicados)\n        aSelectedItems.forEach((oItem: any) => {\n            const documentData = oItem.getBindingContext(\"oModel\").getObject();\n            \n            // Verificar si el documento ya está en la planilla\n            if (existingDocNums.includes(documentData.DocNum)) {\n                skippedDocuments.push(documentData.DocNum);\n                return; // Omitir este documento\n            }\n            \n            // Crear nueva línea de elemento para la planilla\n            const newLine = {\n                DocEntry: planillaData.DocEntry,\n                LineId: currentDocuments.length + documentsToAdd.length + 1,\n                VisOrder: currentDocuments.length + documentsToAdd.length + 1,\n                Object: \"VS_OPMP\",\n                LogInst: null,\n                U_CHECK: \"Y\",\n                U_IDPAGO: planillaData.U_IDPAGO,\n                U_TIPDOC: documentData.DocType,\n                U_IDDOC: documentData.DocEntry,\n                U_LINDOC: 0,\n                U_OBJDOC: \"18\",\n                U_CUODOC: \"1\",\n                U_IDSN: documentData.CardCode,\n                U_NMSN: documentData.CardName,\n                U_RUC: documentData.CardCode,\n                U_NUMDOC: documentData.DocNum,\n                U_MONDOC: documentData.Currency,\n                U_IMPORTE: documentData.Total,\n                U_SALDO: documentData.Balance,\n                U_PAGONETO: documentData.Balance,\n                U_PAGLOC: documentData.Balance,\n                U_PAGEXT: 0,\n                U_RETLOC: 0, // Valor por defecto 0 ya que RetLoc no existe en documentos disponibles\n                U_RETEXT: 0,\n                U_FVENC: documentData.DueDate,\n                U_FCONT: documentData.DocDate,\n                U_FDOCU: documentData.DocDate,\n                U_CCORRI: documentData.CuentaBancaria,\n                U_CTAINF: documentData.BankCode,\n                U_MONINF: documentData.Currency,\n                U_RETCOD: \"\",\n                U_RETPOR: 0,\n                U_ESTADO: \"1\",\n                U_SL: documentData.Balance,\n                U_SE: 0,\n                U_RL: 0, // Valor por defecto 0 ya que RetLoc no existe en documentos disponibles\n                U_RE: 0,\n                U_BL: 0,\n                U_BE: 0,\n                U_IL: documentData.Balance,\n                U_REF2: documentData.DocNum,\n                U_PAGLOC0: documentData.Balance, // Usar Balance como PAGLOC0 ya que PAGLOC0 no existe\n                U_PAGEXT0: 0,\n                U_RETLOC0: 0, // Valor por defecto 0 ya que RetLoc no existe en documentos disponibles\n                U_RETEXT0: 0,\n                U_MPBB: \"2\"\n            };\n            \n            documentsToAdd.push(newLine);\n        });\n        \n        // Agregar nuevos documentos a la planilla\n        currentDocuments.push(...documentsToAdd);\n        \n        // Actualizar el modelo de planilla\n        planillaData.VS_PMP1Collection = currentDocuments;\n        \n        // Recalcular totales después de agregar documentos\n        this.recalculatePlanillaTotals(planillaData);\n        \n        // Actualizar el modelo con datos recalculados\n        oPlanillaModel.setData(planillaData);\n        oPlanillaModel.refresh(true);\n        \n        // Actualizar el estado de ya agregado en el modal\n        this.updateAlreadyAddedStatus();\n        \n        // Cerrar el diálogo\n        const oDialog = oView.byId(\"documentSelectionDialog\") as any;\n        if (oDialog) {\n            oDialog.close();\n        }\n        \n        // Limpiar selección de tabla\n        oTable.removeSelections();\n        \n        // Mostrar mensaje apropiado\n        if (documentsToAdd.length > 0 && skippedDocuments.length > 0) {\n            MessageToast.show(`${documentsToAdd.length} documento(s) agregado(s), ${skippedDocuments.length} ya existían.`);\n        } else if (documentsToAdd.length > 0) {\n            MessageToast.show(`${documentsToAdd.length} documento(s) agregado(s) a la planilla.`);\n        } else if (skippedDocuments.length > 0) {\n            MessageBox.warning(\"Todos los documentos seleccionados ya están en la planilla.\");\n        } else {\n            MessageBox.warning(\"Por favor seleccione al menos un documento.\");\n        }\n    }\n\n    private updateAlreadyAddedStatus(): void {\n        this.markAlreadyAddedDocuments();\n    }\n\n    public onDeletePlanillaLine(oEvent: any): void {\n        console.log(\"PagosMasivosDetalle.controller - Delete planilla line triggered\");\n        \n        const oView = this.getView();\n        if (!oView) {\n            return;\n        }\n\n        const oPlanillaModel = oView.getModel(\"planilla\") as JSONModel;\n        if (!oPlanillaModel) {\n            console.log(\"Planilla model not found\");\n            return;\n        }\n\n        // Get the button that was clicked\n        const button = oEvent.getSource();\n        const listItem = button.getParent().getParent();\n        const bindingContext = listItem.getBindingContext(\"planilla\");\n        \n        if (!bindingContext) {\n            console.log(\"No binding context found\");\n            return;\n        }\n\n        // Get the line data\n        const lineData = bindingContext.getObject();\n        const lineIndex = bindingContext.getPath().split(\"/\").pop();\n        \n        console.log(\"Deleting line:\", lineData);\n        console.log(\"Line index:\", lineIndex);\n        \n        // Show confirmation dialog\n        MessageBox.confirm(\n            `¿Está seguro que desea eliminar el documento ${lineData.U_NUMDOC}?`,\n            {\n                title: \"Confirmar eliminación\",\n                onClose: (action: string) => {\n                    if (action === MessageBox.Action.OK) {\n                        this.deletePlanillaLine(parseInt(lineIndex));\n                    }\n                }\n            }\n        );\n    }\n\n    private deletePlanillaLine(lineIndex: number): void {\n        console.log(\"PagosMasivosDetalle.controller - Deleting line at index:\", lineIndex);\n        \n        const oView = this.getView();\n        if (!oView) {\n            return;\n        }\n\n        const oPlanillaModel = oView.getModel(\"planilla\") as JSONModel;\n        if (!oPlanillaModel) {\n            console.log(\"Planilla model not found\");\n            return;\n        }\n\n        const planillaData = oPlanillaModel.getData();\n        if (!planillaData || !planillaData.VS_PMP1Collection) {\n            console.log(\"No planilla data found\");\n            return;\n        }\n\n        // Remove the line from the collection\n        const updatedLines = planillaData.VS_PMP1Collection.filter((line: any, index: number) => index !== lineIndex);\n        \n        // Update the planilla data\n        planillaData.VS_PMP1Collection = updatedLines;\n        \n        // Recalculate totals\n        this.recalculatePlanillaTotals(planillaData);\n        \n        // Update the model\n        oPlanillaModel.setData(planillaData);\n        oPlanillaModel.refresh(true);\n        \n        console.log(\"Line deleted successfully\");\n        MessageToast.show(\"Línea eliminada correctamente\", { duration: 3000 });\n        \n        // Update the available documents to reflect the change\n        this.updateAlreadyAddedStatus();\n    }\n\n    private recalculatePlanillaTotals(planillaData: any): void {\n        console.log(\"PagosMasivosDetalle.controller - Recalculando totales de planilla\");\n        \n        if (!planillaData || !planillaData.VS_PMP1Collection) {\n            return;\n        }\n\n        const lines = planillaData.VS_PMP1Collection;\n        \n        // Calcular totales\n        const totalImporte = lines.reduce((sum: number, line: any) => sum + (line.U_IMPORTE || 0), 0);\n        const totalRetencion = lines.reduce((sum: number, line: any) => sum + (line.U_RETLOC || 0), 0);\n        const totalPagoFinal = lines.reduce((sum: number, line: any) => sum + (line.U_PAGLOC0 || 0), 0);\n        \n        // Actualizar totales de planilla\n        planillaData.U_TOTAL = totalImporte;\n        planillaData.U_RETEN = totalRetencion;\n        planillaData.U_SUBTOTAL = totalPagoFinal;\n        \n        console.log(\"Totales actualizados:\", {\n            total: totalImporte,\n            retencion: totalRetencion,\n            subtotal: totalPagoFinal\n        });\n    }\n\n    public onDeleteSelectedLines(): void {\n        console.log(\"PagosMasivosDetalle.controller - Delete selected lines triggered\");\n        \n        const oView = this.getView();\n        if (!oView) {\n            return;\n        }\n\n        const oPlanillaModel = oView.getModel(\"planilla\") as JSONModel;\n        if (!oPlanillaModel) {\n            console.log(\"Planilla model not found\");\n            return;\n        }\n\n        const planillaData = oPlanillaModel.getData();\n        if (!planillaData || !planillaData.VS_PMP1Collection) {\n            console.log(\"No planilla data found\");\n            return;\n        }\n\n        // Get the table\n        const oTable = oView.byId(\"planillaLinesTable\") as any;\n        if (!oTable) {\n            console.log(\"Planilla table not found\");\n            return;\n        }\n\n        // Get selected items\n        const selectedItems = oTable.getSelectedItems();\n        if (selectedItems.length === 0) {\n            MessageBox.warning(\"Por favor seleccione al menos una línea para eliminar.\");\n            return;\n        }\n\n        // Obtener los documentos a eliminar\n        const documentsToDelete = selectedItems.map((item: any) => {\n            const bindingContext = item.getBindingContext(\"planilla\");\n            return bindingContext ? bindingContext.getObject() : null;\n        }).filter((doc: any) => doc !== null);\n\n        if (documentsToDelete.length === 0) {\n            MessageBox.warning(\"No se pudieron obtener los documentos seleccionados.\");\n            return;\n        }\n\n        // Mostrar diálogo de confirmación\n        const documentNames = documentsToDelete.map((doc: any) => doc.U_NUMDOC).join(\", \");\n        MessageBox.confirm(\n            `¿Está seguro que desea eliminar los siguientes documentos?\\n${documentNames}`,\n            {\n                title: \"Confirmar eliminación múltiple\",\n                onClose: (action: string) => {\n                    if (action === MessageBox.Action.OK) {\n                        this.deleteSelectedPlanillaLines(documentsToDelete);\n                    }\n                }\n            }\n        );\n    }\n\n    private deleteSelectedPlanillaLines(documentsToDelete: any[]): void {\n        console.log(\"PagosMasivosDetalle.controller - Deleting selected lines:\", documentsToDelete);\n        \n        const oView = this.getView();\n        if (!oView) {\n            return;\n        }\n\n        const oPlanillaModel = oView.getModel(\"planilla\") as JSONModel;\n        if (!oPlanillaModel) {\n            console.log(\"Planilla model not found\");\n            return;\n        }\n\n        const planillaData = oPlanillaModel.getData();\n        if (!planillaData || !planillaData.VS_PMP1Collection) {\n            console.log(\"No planilla data found\");\n            return;\n        }\n\n        // Obtener números de documentos a eliminar\n        const documentNumbersToDelete = documentsToDelete.map((doc: any) => doc.U_NUMDOC);\n        \n        // Eliminar las líneas de la colección\n        const updatedLines = planillaData.VS_PMP1Collection.filter((line: any) => \n            !documentNumbersToDelete.includes(line.U_NUMDOC)\n        );\n        \n        // Actualizar los datos de la planilla\n        planillaData.VS_PMP1Collection = updatedLines;\n        \n        // Recalcular totales\n        this.recalculatePlanillaTotals(planillaData);\n        \n        // Actualizar el modelo\n        oPlanillaModel.setData(planillaData);\n        oPlanillaModel.refresh(true);\n        \n        // Limpiar selección de tabla\n        const oTable = oView.byId(\"planillaLinesTable\") as any;\n        if (oTable) {\n            oTable.removeSelections();\n        }\n        \n        console.log(\"Líneas seleccionadas eliminadas exitosamente\");\n        MessageToast.show(`${documentsToDelete.length} línea(s) eliminada(s) correctamente`, { duration: 3000 });\n        \n        // Actualizar los documentos disponibles para reflejar el cambio\n        this.updateAlreadyAddedStatus();\n    }\n\n    // ===== MÉTODOS PRIVADOS =====\n    private loadPlanillaById(planillaId: string): void {\n        // Cargar datos de la planilla desde el archivo JSON\n        const planillasUrl = \"./model/mock/planilla-object.json\";\n        \n        try {\n            const oModel = new JSONModel();\n            oModel.loadData(planillasUrl, undefined, false);\n            const oData = oModel.getData();\n            console.log(\"PagosMasivosDetalle.controller - Datos de planilla cargados:\", oData);\n            \n            // Buscar la planilla por ID en el array de planillas (convertir a número para comparación)\n            const planillas = oData.planillas || [];\n            const planillaIdNum = parseInt(planillaId);\n            const planilla = planillas.find((item: any) => item.DocEntry === planillaIdNum);\n            \n            if (planilla) {\n                console.log(\"PagosMasivosDetalle.controller - Planilla encontrada:\", planilla);\n                \n                // Agregar la propiedad isNewPlanilla como false para planillas existentes\n                const planillaWithMode = {\n                    ...planilla,\n                    isNewPlanilla: false\n                };\n                \n                // Crear modelo para la planilla seleccionada\n                const oModelPlanilla = new JSONModel();\n                oModelPlanilla.setData(planillaWithMode);\n                \n                // Asignar el modelo a la vista\n                const oView = this.getView();\n                if (oView) {\n                    oView.setModel(oModelPlanilla, \"planilla\");\n                    console.log(\"PagosMasivosDetalle.controller - Modelo de planilla asignado a la vista\");\n                    \n                    // Cargar también las series\n                    this.pagosMasivosManager.loadSeriesData();\n                    \n                    // Cargar cuentas bancarias para el ComboBox\n                    const cuentasBancariasModel = new JSONModel();\n                    cuentasBancariasModel.loadData(\"./model/mock/cuentas-bancarias.json\", undefined, false);\n                    oView.setModel(cuentasBancariasModel, \"cuentasBancarias\");\n                    \n                    cuentasBancariasModel.attachRequestCompleted(() => {\n                        console.log(\"PagosMasivosDetalle.controller - Cuentas bancarias cargadas para planilla existente\");\n                        // Forzar actualización del modelo de planilla para asegurar que el ComboBox funcione\n                        oModelPlanilla.refresh(true);\n                    });\n                }\n            } else {\n                console.log(\"PagosMasivosDetalle.controller - Planilla no encontrada, cargando datos de respaldo\");\n                this.loadFallbackPlanillaData(planillaId);\n            }\n        } catch (error) {\n            console.error(\"PagosMasivosDetalle.controller - Excepción al cargar datos de planilla:\", error);\n            this.loadFallbackPlanillaData(planillaId);\n        }\n    }\n\n        private loadFallbackPlanillaData(planillaId: string): void {\n        console.log(\"PagosMasivosDetalle.controller - Cargando datos de respaldo para planilla ID:\", planillaId);\n        \n        // Datos de respaldo para mostrar en caso de error\n        const fallbackData = {\n            \"DocEntry\": planillaId,\n            \"DocNum\": parseInt(planillaId),\n            \"isNewPlanilla\": false,\n            \"U_CUENTA\": \"194-1985504-0-94\",\n            \"U_IDBANCO\": \"BCP\",\n            \"U_NMBANCO\": \"BANCO DE CREDITO\",\n            \"U_CCBANCO\": \"1941985504094\",\n            \"U_GLACCOUNT\": \"1041101\",\n            \"U_MONEDA\": \"SOL\",\n            \"U_SERIE\": 24,\n            \"U_ESTADO\": \"E\",\n            \"U_FECHA\": \"2024-03-21T00:00:00Z\",\n            \"U_FECHAP\": \"2024-03-21T00:00:00Z\",\n            \"U_TC\": 3.701,\n            \"U_RETEN\": null,\n            \"U_FECHAV\": null,\n            \"U_IDSN\": null,\n            \"U_NMSN\": null,\n            \"U_GLOSA\": \"PG F/VARIAS\",\n            \"U_TOTAL\": 19516.06,\n            \"U_IDPAGO\": 1977,\n            \"U_SUBTOTAL\": 19516.06,\n            \"U_REF\": null,\n            \"U_NOPBAN\": \"09627515\",\n            \"U_IDSUC\": null,\n            \"U_NMSUC\": null,\n            \"U_FCAJA\": -1,\n            \"U_CONTA\": 0,\n            \"VS_PMP1Collection\": [\n                {\n                    \"DocEntry\": parseInt(planillaId),\n                    \"LineId\": 1,\n                    \"VisOrder\": 1,\n                    \"Object\": \"VS_OPMP\",\n                    \"LogInst\": null,\n                    \"U_CHECK\": \"Y\",\n                    \"U_IDPAGO\": 1971,\n                    \"U_TIPDOC\": \"Factura\",\n                    \"U_IDDOC\": 3617,\n                    \"U_LINDOC\": 0,\n                    \"U_OBJDOC\": \"18\",\n                    \"U_CUODOC\": \"1\",\n                    \"U_IDSN\": \"PL10081644867\",\n                    \"U_NMSN\": \"BUSTAMANTE DAVILA MARIA ELIZABETH\",\n                    \"U_RUC\": \"10081644867\",\n                    \"U_NUMDOC\": \"E001-78\",\n                    \"U_MONDOC\": \"SOL\",\n                    \"U_IMPORTE\": 288,\n                    \"U_SALDO\": 288,\n                    \"U_PAGONETO\": 288,\n                    \"U_PAGLOC\": 288,\n                    \"U_PAGEXT\": 0,\n                    \"U_RETLOC\": 0,\n                    \"U_RETEXT\": 0,\n                    \"U_FVENC\": \"2024-03-15T00:00:00Z\",\n                    \"U_FCONT\": \"2024-03-15T00:00:00Z\",\n                    \"U_FDOCU\": \"2024-03-15T00:00:00Z\",\n                    \"U_CCORRI\": \"19394614129025\",\n                    \"U_CTAINF\": \"BCP\",\n                    \"U_MONINF\": \"SOL\",\n                    \"U_RETCOD\": \"\",\n                    \"U_RETPOR\": 0,\n                    \"U_ESTADO\": \"1\",\n                    \"U_SL\": 288,\n                    \"U_SE\": 0,\n                    \"U_RL\": 0,\n                    \"U_RE\": 0,\n                    \"U_BL\": 0,\n                    \"U_BE\": 0,\n                    \"U_IL\": 288,\n                    \"U_REF2\": \"01E001-78\",\n                    \"U_PAGLOC0\": 0,\n                    \"U_PAGEXT0\": 0,\n                    \"U_RETLOC0\": 0,\n                    \"U_RETEXT0\": 0,\n                    \"U_MPBB\": \"2\"\n                }\n            ]\n        };\n        \n        const oModelPlanilla = new JSONModel();\n        oModelPlanilla.setData(fallbackData);\n        \n        const oView = this.getView();\n        if (oView) {\n            oView.setModel(oModelPlanilla, \"planilla\");\n            console.log(\"PagosMasivosDetalle.controller - Modelo de planilla de respaldo asignado a la vista\");\n            \n            // Cargar también las series\n            this.pagosMasivosManager.loadSeriesData();\n            \n            // Cargar cuentas bancarias para el ComboBox\n            const cuentasBancariasModel = new JSONModel();\n            cuentasBancariasModel.loadData(\"./model/mock/cuentas-bancarias.json\", undefined, false);\n            oView.setModel(cuentasBancariasModel, \"cuentasBancarias\");\n            \n            cuentasBancariasModel.attachRequestCompleted(() => {\n                console.log(\"PagosMasivosDetalle.controller - Cuentas bancarias cargadas para planilla de respaldo\");\n                // Forzar actualización del modelo de planilla para asegurar que el ComboBox funcione\n                oModelPlanilla.refresh(true);\n            });\n        }\n    }\n\n    private checkForDetailNavigation(): void {\n        // Verificar si necesitamos navegar a la página de detalle\n        const oComponent = this.getOwnerComponent() as UIComponent;\n        const oRouter = oComponent.getRouter();\n        \n        // Obtener parámetros de la ruta actual\n        const oRoute = oRouter.getRoute(\"RoutePagosMasivosDetalle\");\n        if (oRoute) {\n            oRoute.attachPatternMatched((oEvent: any) => {\n                const planillaId = oEvent.getParameter(\"arguments\").planillaId;\n                if (planillaId && planillaId !== \"new\") {\n                    console.log(\"PagosMasivosDetalle.controller - Navegando al detalle de planilla:\", planillaId);\n                    this.loadPlanillaById(planillaId);\n                } else if (planillaId === \"new\") {\n                    console.log(\"PagosMasivosDetalle.controller - Creando nueva planilla\");\n                    this.pagosMasivosManager.createNewPlanilla();\n                }\n            });\n        }\n    }\n\n\n\n    public onDocumentDialogAfterOpen(): void {\n        console.log(\"PagosMasivosDetalle.controller - Diálogo abierto, marcando documentos existentes\");\n        \n        const oView = this.getView();\n        if (!oView) {\n            return;\n        }\n\n        // Obtener el modelo de planilla para verificar documentos existentes\n        const oPlanillaModel = oView.getModel(\"planilla\") as JSONModel;\n        const oModel = oView.getModel(\"oModel\") as JSONModel;\n        \n        if (!oPlanillaModel || !oModel) {\n            console.log(\"Modelos no encontrados\");\n            return;\n        }\n        \n        const planillaData = oPlanillaModel.getData();\n        const availableDocuments = oModel.getData();\n        \n        console.log(\"Datos de planilla:\", planillaData);\n        console.log(\"Datos de documentos disponibles:\", availableDocuments);\n        \n        if (!planillaData || !availableDocuments) {\n            console.log(\"No hay datos disponibles\");\n            return;\n        }\n        \n        // Verificar si los documentos están cargados\n        if (!availableDocuments.documents || availableDocuments.documents.length === 0) {\n            console.log(\"Documentos aún no cargados, esperando datos...\");\n            // Esperar a que el modelo se cargue\n            oModel.attachRequestCompleted(() => {\n                setTimeout(() => {\n                    this.markAlreadyAddedDocuments();\n                }, 100);\n            });\n            return;\n        }\n        \n        // Agregar un pequeño retraso para asegurar que los datos estén correctamente vinculados\n        setTimeout(() => {\n            this.markAlreadyAddedDocuments();\n        }, 100);\n    }\n\n    private markAlreadyAddedDocuments(): void {\n        console.log(\"=== INICIO markAlreadyAddedDocuments ===\");\n        const oView = this.getView();\n        if (!oView) {\n            console.log(\"Vista no encontrada\");\n            return;\n        }\n        \n        const oPlanillaModel = oView.getModel(\"planilla\") as JSONModel;\n        const oModel = oView.getModel(\"oModel\") as JSONModel;\n        \n        if (!oPlanillaModel || !oModel) {\n            console.log(\"Modelos no encontrados\");\n            return;\n        }\n        \n        const planillaData = oPlanillaModel.getData();\n        const availableDocuments = oModel.getData();\n        \n        console.log(\"Claves de datos de planilla:\", planillaData ? Object.keys(planillaData) : \"null\");\n        console.log(\"Claves de documentos disponibles:\", availableDocuments ? Object.keys(availableDocuments) : \"null\");\n        \n        if (!planillaData || !availableDocuments || !availableDocuments.documents) {\n            console.log(\"Faltan datos para marcar documentos\");\n            return;\n        }\n        \n        // Verificar si los datos de planilla están correctamente cargados\n        if (!planillaData.VS_PMP1Collection) {\n            console.log(\"VS_PMP1Collection de planilla no encontrada, inicializando como vacía\");\n            planillaData.VS_PMP1Collection = [];\n            oPlanillaModel.setData(planillaData);\n        }\n        \n        // Obtener números de documentos existentes en la planilla\n        const existingDocNums = (planillaData.VS_PMP1Collection || []).map((doc: any) => doc.U_NUMDOC);\n        console.log(\"Documentos existentes en planilla:\", existingDocNums);\n        console.log(\"Cantidad de documentos disponibles:\", availableDocuments.documents.length);\n        console.log(\"Longitud de VS_PMP1Collection de planilla:\", planillaData.VS_PMP1Collection ? planillaData.VS_PMP1Collection.length : 0);\n        \n        // Siempre inicializar alreadyInPlanilla a false primero\n        console.log(\"Inicializando todos los documentos a alreadyInPlanilla = false\");\n        availableDocuments.documents.forEach((doc: any, index: number) => {\n            doc.alreadyInPlanilla = false;\n            console.log(`Documento ${index}: ${doc.DocNum} - alreadyInPlanilla establecido a false`);\n        });\n        \n        // Solo marcar documentos si realmente hay documentos existentes en la planilla\n        if (!planillaData.VS_PMP1Collection || planillaData.VS_PMP1Collection.length === 0) {\n            console.log(\"No hay documentos existentes en planilla, todos los documentos marcados como no agregados\");\n            // Asegurar que todos los documentos estén marcados como no agregados\n            availableDocuments.documents.forEach((doc: any, index: number) => {\n                doc.alreadyInPlanilla = false;\n                console.log(`Documento ${index}: ${doc.DocNum} - alreadyInPlanilla establecido a false (planilla vacía)`);\n            });\n        } else {\n            // Marcar documentos como ya en la planilla\n            let markedCount = 0;\n            availableDocuments.documents.forEach((doc: any, index: number) => {\n                const isAlreadyAdded = existingDocNums.includes(doc.DocNum);\n                doc.alreadyInPlanilla = isAlreadyAdded;\n                console.log(`Documento ${index}: ${doc.DocNum} - verificando contra existentes: ${existingDocNums.join(', ')} - alreadyInPlanilla establecido a ${isAlreadyAdded}`);\n                if (isAlreadyAdded) {\n                    markedCount++;\n                }\n            });\n            console.log(`Marcados ${markedCount} documentos como ya agregados de ${availableDocuments.documents.length} total`);\n        }\n        \n        // Actualizar el modelo\n        console.log(\"Actualizando modelo con datos modificados\");\n        oModel.setData(availableDocuments);\n        console.log(\"=== FIN markAlreadyAddedDocuments ===\");\n    }\n\n\n} "],"mappings":"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","ignoreList":[]}