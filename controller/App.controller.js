sap.ui.define(["sap/ui/core/mvc/Controller","sap/m/MessageToast","sap/ui/model/json/JSONModel","sap/m/MessageBox","../model/formatter","./modules/UserManager","./modules/MenuManager","./modules/PagosMasivosManager","./modules/NavigationManager"],function(o,a,n,e,t,s,i,l,r){"use strict";function g(o){return o&&o.__esModule&&typeof o.default!=="undefined"?o.default:o}const c=g(t);const u=s["UserManager"];const d=i["MenuManager"];const p=l["PagosMasivosManager"];const M=r["NavigationManager"];const h=o.extend("com.vs.extension.finanb1.controller.App",{constructor:function a(){o.prototype.constructor.apply(this,arguments);this.formatter=c},onInit:function o(){this.userManager=new u;this.menuManager=new d;this.pagosMasivosManager=new p;this.navigationManager=new M(this);this.userManager.loadAuthenticatedUser();const a=this.getView();if(a){a.setModel(this.menuManager.getModel(),"menuModel");console.log("Modelo de menú asignado a la vista en onInit")}this.menuManager.loadHardcodedMenuData();this.menuManager.filterNavigationByRole(this.userManager.getCurrentUser()?.role||"user");this.pagosMasivosManager.initializeModels();this.pagosMasivosManager.setController(this);if(a){a.setModel(this.pagosMasivosManager.getFilteredModel(),"planillas")}this.checkForDetailNavigation();this.checkAuthentication()},onSideNavigationItemSelect:function o(a){this.navigationManager.onSideNavigationItemSelect(a)},onSideNavItemSelect:function o(a){this.navigationManager.onSideNavItemSelect(a)},onMenuButtonPress:function o(){this.navigationManager.onMenuButtonPress()},onLogout:function o(){e.confirm("¿Está seguro que desea cerrar sesión?",{title:"Confirmar Cierre de Sesión",onClose:o=>{if(o===e.Action.OK){this.userManager.logout();a.show("Sesión cerrada exitosamente",{duration:2e3});const o=this.getOwnerComponent();const n=o.getRouter();n.navTo("RouteLogin")}}})},onDateRangeChange:function o(a){this.pagosMasivosManager.onDateRangeChange(a)},onStatusChange:function o(a){this.pagosMasivosManager.onStatusChange(a)},onBancoChange:function o(a){this.pagosMasivosManager.onBancoChange(a)},onClearFilters:function o(){this.pagosMasivosManager.onClearFilters()},onNuevaPlanillaButtonPress:function o(){this.pagosMasivosManager.onNuevaPlanillaButtonPress()},onListItemPress:function o(a){console.log("App.controller - onListItemPress triggered!",a);this.pagosMasivosManager.onListItemPress(a)},onBackToPagosMasivos:function o(){console.log("App.controller - onBackToPagosMasivos triggered!");const a=this.getOwnerComponent();const n=a.getRouter();n.navTo("RoutePagosMasivos")},onEditPlanilla:function o(){const n=this.getView();if(n){const o=n.getModel("planilla");if(o){const n=o.getData();if(n&&n.Status==="Creada"){a.show("Función de edición en desarrollo",{duration:2e3})}else{e.error("Solo se pueden editar planillas con estado 'Creada'")}}}},onAnularPlanilla:function o(){const n=this.getView();if(n){const o=n.getModel("planilla");if(o){const n=o.getData();if(n&&n.Status==="Creada"){e.confirm("¿Está seguro que desea anular esta planilla?",{title:"Confirmar Anulación",onClose:t=>{if(t===e.Action.OK){n.Status="Anulada";o.setData(n);a.show("Planilla anulada exitosamente",{duration:2e3})}}})}else{e.error("Solo se pueden anular planillas con estado 'Creada'")}}}},onDownloadPlanilla:function o(){console.log("App.controller - onDownloadPlanilla triggered!");this.pagosMasivosManager.onDownloadPlanilla()},onFechaEjecucionChange:function o(a){console.log("App.controller - onFechaEjecucionChange triggered!");this.pagosMasivosManager.onFechaEjecucionChange(a)},onSerieChange:function o(a){console.log("App.controller - onSerieChange triggered!");this.pagosMasivosManager.onSerieChange(a)},onGuardarPlanilla:function o(){console.log("App.controller - onGuardarPlanilla triggered!");console.log("App.controller - PagosMasivosManager instance:",this.pagosMasivosManager);if(this.pagosMasivosManager){this.pagosMasivosManager.onGuardarPlanilla()}else{console.error("PagosMasivosManager is not initialized!")}},onAddDocumentos:function o(){console.log("App.controller - onAddDocumentos triggered!");if(this.pagosMasivosManager){this.pagosMasivosManager.onAddDocumentos()}else{console.error("PagosMasivosManager is not initialized!")}},onDocumentSearch:function o(a){console.log("App.controller - onDocumentSearch triggered!");if(this.pagosMasivosManager){this.pagosMasivosManager.onDocumentSearch(a)}},onDocumentBankFilterChange:function o(a){console.log("App.controller - onDocumentBankFilterChange triggered!");if(this.pagosMasivosManager){this.pagosMasivosManager.onDocumentBankFilterChange(a)}},onDocumentSelectionChange:function o(a){console.log("App.controller - onDocumentSelectionChange triggered!");if(this.pagosMasivosManager){this.pagosMasivosManager.onDocumentSelectionChange(a)}},onDocumentDialogCancel:function o(){console.log("App.controller - onDocumentDialogCancel triggered!");if(this.pagosMasivosManager){this.pagosMasivosManager.onDocumentDialogCancel()}},onDocumentDialogConfirm:function o(){console.log("App.controller - onDocumentDialogConfirm triggered!");if(this.pagosMasivosManager){this.pagosMasivosManager.onDocumentDialogConfirm()}},loadPlanillaById:function o(a){const e="./model/mock/products.json";try{const o=new n;o.loadData(e,undefined,false);const t=o.getData();console.log("App.controller - Planilla data loaded:",t);const s=t.find(o=>o.Id===a);if(s){console.log("App.controller - Planilla found:",s);const o=new n;o.setData(s);const a=this.getView();if(a){a.setModel(o,"planilla");console.log("App.controller - Planilla model assigned to view")}}else{console.log("App.controller - Planilla not found, loading fallback data");this.loadFallbackPlanillaData(a)}}catch(o){console.error("App.controller - Exception loading planilla data:",o);this.loadFallbackPlanillaData(a)}},loadFallbackPlanillaData:function o(a){console.log("App.controller - Loading fallback planilla data for ID:",a);const e={Id:a,Name:`Planilla Pago Proveedor ${a}`,DateOfSale:"2024-01-01",Status:"Creada",Quantity:10,Price:1e3,CurrencyCode:"SOL",Bank:"BCP",SupplierName:"Proveedor Ejemplo",Description:"Descripción de ejemplo para la planilla"};const t=new n;t.setData(e);const s=this.getView();if(s){s.setModel(t,"planilla");console.log("App.controller - Fallback planilla model assigned to view")}},checkForDetailNavigation:function o(){const a=this.getOwnerComponent();const n=a.getRouter();const e=n.getRoute("RoutePagosMasivosDetalle");if(e){e.attachPatternMatched(o=>{const a=o.getParameter("arguments").planillaId;if(a){console.log("App.controller - Navigating to planilla detail:",a);this.loadPlanillaById(a)}})}},checkAuthentication:function o(){const a=sessionStorage.getItem("finanb1_auth")||localStorage.getItem("finanb1_auth");if(a){try{const o=JSON.parse(a);if(o.isAuthenticated){const o=this.getOwnerComponent();const a=o.getRouter();a.navTo("RouteConfiguracion")}}catch(o){console.error("Error parsing auth data:",o)}}}});return h});
//# sourceMappingURL=App.controller.js.map